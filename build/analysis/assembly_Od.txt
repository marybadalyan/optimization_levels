Microsoft (R) COFF/PE Dumper Version 14.43.34808.0
Copyright (C) Microsoft Corporation.  All rights reserved.


Dump of file C:\Users\MeriBadalyan\optimization_levels\build\OP_level_1.dir\Release\main.obj

File Type: COFF OBJECT

?run@@YAHXZ (int __cdecl run(void)):
  0000000000000000: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  0000000000000007: 48 C7 84 24 98 00  mov         qword ptr [rsp+98h],5F5E100h
                    00 00 00 E1 F5 05
  0000000000000013: 48 8D 44 24 20     lea         rax,[rsp+20h]
  0000000000000018: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000001D: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000022: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  000000000000002A: F2 0F 10 05 00 00  movsd       xmm0,mmword ptr [__real@3ff0000000000000]
                    00 00
  0000000000000032: F2 0F 11 44 24 58  movsd       mmword ptr [rsp+58h],xmm0
  0000000000000038: 48 8D 84 24 80 00  lea         rax,[rsp+80h]
                    00 00
  0000000000000040: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000045: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000004A: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000004F: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000054: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  000000000000005B: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000060: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  0000000000000068: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000006D: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  0000000000000075: 4C 8D 44 24 58     lea         r8,[rsp+58h]
  000000000000007A: BA 00 E1 F5 05     mov         edx,5F5E100h
  000000000000007F: 48 8D 8C 24 80 00  lea         rcx,[rsp+80h]
                    00 00
  0000000000000087: E8 00 00 00 00     call        ??$_Construct_n@AEBN@?$vector@NV?$allocator@N@std@@@std@@AEAAX_KAEBN@Z
  000000000000008C: 90                 nop
  000000000000008D: 0F 57 C0           xorps       xmm0,xmm0
  0000000000000090: F2 0F 11 44 24 40  movsd       mmword ptr [rsp+40h],xmm0
  0000000000000096: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  000000000000009F: EB 0D              jmp         00000000000000AE
  00000000000000A1: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000A6: 48 FF C0           inc         rax
  00000000000000A9: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000AE: 48 81 7C 24 28 00  cmp         qword ptr [rsp+28h],5F5E100h
                    E1 F5 05
  00000000000000B7: 73 3A              jae         00000000000000F3
  00000000000000B9: 48 8D 84 24 80 00  lea         rax,[rsp+80h]
                    00 00
  00000000000000C1: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000C6: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000CB: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000CE: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000D3: 48 8D 04 C8        lea         rax,[rax+rcx*8]
  00000000000000D7: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000DC: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000E1: F2 0F 10 44 24 40  movsd       xmm0,mmword ptr [rsp+40h]
  00000000000000E7: F2 0F 58 00        addsd       xmm0,mmword ptr [rax]
  00000000000000EB: F2 0F 11 44 24 40  movsd       mmword ptr [rsp+40h],xmm0
  00000000000000F1: EB AE              jmp         00000000000000A1
  00000000000000F3: 48 8D 15 00 00 00  lea         rdx,[$SG83739]
                    00
  00000000000000FA: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000101: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000106: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000010B: F2 0F 10 4C 24 40  movsd       xmm1,mmword ptr [rsp+40h]
  0000000000000111: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000116: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z]
  000000000000011C: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000121: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000128: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  000000000000012D: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000133: 90                 nop
  0000000000000134: C7 44 24 30 00 00  mov         dword ptr [rsp+30h],0
                    00 00
  000000000000013C: 48 8D 8C 24 80 00  lea         rcx,[rsp+80h]
                    00 00
  0000000000000144: E8 00 00 00 00     call        ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AEAAXXZ
  0000000000000149: 90                 nop
  000000000000014A: 8B 44 24 30        mov         eax,dword ptr [rsp+30h]
  000000000000014E: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  0000000000000155: C3                 ret
  0000000000000156: CC                 int         3
  0000000000000157: CC                 int         3
  0000000000000158: CC                 int         3
  0000000000000159: CC                 int         3
  000000000000015A: CC                 int         3
  000000000000015B: CC                 int         3
  000000000000015C: CC                 int         3
  000000000000015D: CC                 int         3
  000000000000015E: CC                 int         3
  000000000000015F: CC                 int         3
main:
  0000000000000160: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000165: 89 4C 24 08        mov         dword ptr [rsp+8],ecx
  0000000000000169: 48 81 EC 08 03 00  sub         rsp,308h
                    00
  0000000000000170: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  0000000000000177: 48 33 C4           xor         rax,rsp
  000000000000017A: 48 89 84 24 F0 02  mov         qword ptr [rsp+2F0h],rax
                    00 00
  0000000000000182: 83 BC 24 10 03 00  cmp         dword ptr [rsp+310h],3
                    00 03
  000000000000018A: 7D 1D              jge         00000000000001A9
  000000000000018C: 48 8D 15 00 00 00  lea         rdx,[$SG84251]
                    00
  0000000000000193: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  000000000000019A: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000019F: B8 01 00 00 00     mov         eax,1
  00000000000001A4: E9 B9 06 00 00     jmp         0000000000000862
  00000000000001A9: B8 08 00 00 00     mov         eax,8
  00000000000001AE: 48 6B C0 01        imul        rax,rax,1
  00000000000001B2: 48 8B 8C 24 18 03  mov         rcx,qword ptr [rsp+318h]
                    00 00
  00000000000001BA: 48 8B 14 01        mov         rdx,qword ptr [rcx+rax]
  00000000000001BE: 48 8D 8C 24 90 02  lea         rcx,[rsp+290h]
                    00 00
  00000000000001C6: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  00000000000001CB: 90                 nop
  00000000000001CC: B8 08 00 00 00     mov         eax,8
  00000000000001D1: 48 6B C0 02        imul        rax,rax,2
  00000000000001D5: 48 8B 8C 24 18 03  mov         rcx,qword ptr [rsp+318h]
                    00 00
  00000000000001DD: 48 8B 14 01        mov         rdx,qword ptr [rcx+rax]
  00000000000001E1: 48 8D 8C 24 B0 02  lea         rcx,[rsp+2B0h]
                    00 00
  00000000000001E9: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  00000000000001EE: 90                 nop
  00000000000001EF: 48 8D 4C 24 50     lea         rcx,[rsp+50h]
  00000000000001F4: E8 00 00 00 00     call        ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  00000000000001F9: E8 00 00 00 00     call        ?run@@YAHXZ
  00000000000001FE: 48 8D 4C 24 68     lea         rcx,[rsp+68h]
  0000000000000203: E8 00 00 00 00     call        ?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ
  0000000000000208: 90                 nop
  0000000000000209: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000020E: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000213: 48 8D 44 24 58     lea         rax,[rsp+58h]
  0000000000000218: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000021D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000222: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000022A: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000022F: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000234: 48 8D 44 24 70     lea         rax,[rsp+70h]
  0000000000000239: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000023E: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000243: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  000000000000024B: 4C 8B 84 24 80 00  mov         r8,qword ptr [rsp+80h]
                    00 00
  0000000000000253: 48 8B 94 24 88 00  mov         rdx,qword ptr [rsp+88h]
                    00 00
  000000000000025B: 48 8D 8C 24 90 00  lea         rcx,[rsp+90h]
                    00 00
  0000000000000263: E8 00 00 00 00     call        ??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z
  0000000000000268: 48 8D 84 24 90 00  lea         rax,[rsp+90h]
                    00 00
  0000000000000270: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  0000000000000278: 48 8B 94 24 98 00  mov         rdx,qword ptr [rsp+98h]
                    00 00
  0000000000000280: 48 8D 8C 24 58 01  lea         rcx,[rsp+158h]
                    00 00
  0000000000000288: E8 00 00 00 00     call        ??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@$0A@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z
  000000000000028D: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  0000000000000295: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000029D: F2 0F 10 00        movsd       xmm0,mmword ptr [rax]
  00000000000002A1: F2 0F 11 84 24 A8  movsd       mmword ptr [rsp+0A8h],xmm0
                    00 00 00
  00000000000002AA: F2 0F 10 84 24 A8  movsd       xmm0,mmword ptr [rsp+0A8h]
                    00 00 00
  00000000000002B3: F2 0F 11 84 24 E0  movsd       mmword ptr [rsp+0E0h],xmm0
                    00 00 00
  00000000000002BC: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_CYAN@Color@@3PEBDEB]
                    00
  00000000000002C3: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000002CA: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000002CF: 48 8D 15 00 00 00  lea         rdx,[$SG84252]
                    00
  00000000000002D6: 48 8B C8           mov         rcx,rax
  00000000000002D9: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000002DE: 48 8D 94 24 90 02  lea         rdx,[rsp+290h]
                    00 00
  00000000000002E6: 48 8B C8           mov         rcx,rax
  00000000000002E9: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  00000000000002EE: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  00000000000002F6: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  00000000000002FD: 48 89 84 24 B0 00  mov         qword ptr [rsp+0B0h],rax
                    00 00
  0000000000000305: 48 8B 94 24 B0 00  mov         rdx,qword ptr [rsp+0B0h]
                    00 00
  000000000000030D: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000315: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000031A: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  0000000000000322: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000329: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000331: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000337: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_MAGENTA@Color@@3PEBDEB]
                    00
  000000000000033E: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000345: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000034A: 48 8D 15 00 00 00  lea         rdx,[$SG84253]
                    00
  0000000000000351: 48 8B C8           mov         rcx,rax
  0000000000000354: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000359: 48 8D 94 24 B0 02  lea         rdx,[rsp+2B0h]
                    00 00
  0000000000000361: 48 8B C8           mov         rcx,rax
  0000000000000364: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000369: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  0000000000000371: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  0000000000000378: 48 89 84 24 C8 00  mov         qword ptr [rsp+0C8h],rax
                    00 00
  0000000000000380: 48 8B 94 24 C8 00  mov         rdx,qword ptr [rsp+0C8h]
                    00 00
  0000000000000388: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000390: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000395: 48 89 84 24 D8 00  mov         qword ptr [rsp+0D8h],rax
                    00 00
  000000000000039D: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000003A4: 48 8B 8C 24 D8 00  mov         rcx,qword ptr [rsp+0D8h]
                    00 00
  00000000000003AC: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000003B2: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_YELLOW@Color@@3PEBDEB]
                    00
  00000000000003B9: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000003C0: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000003C5: 48 8D 15 00 00 00  lea         rdx,[$SG84255]
                    00
  00000000000003CC: 48 8B C8           mov         rcx,rax
  00000000000003CF: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000003D4: 48 89 84 24 F8 00  mov         qword ptr [rsp+0F8h],rax
                    00 00
  00000000000003DC: F2 0F 10 84 24 E0  movsd       xmm0,mmword ptr [rsp+0E0h]
                    00 00 00
  00000000000003E5: F2 0F 11 84 24 E8  movsd       mmword ptr [rsp+0E8h],xmm0
                    00 00 00
  00000000000003EE: F2 0F 10 84 24 E8  movsd       xmm0,mmword ptr [rsp+0E8h]
                    00 00 00
  00000000000003F7: F2 0F 11 84 24 F0  movsd       mmword ptr [rsp+0F0h],xmm0
                    00 00 00
  0000000000000400: F2 0F 10 8C 24 F0  movsd       xmm1,mmword ptr [rsp+0F0h]
                    00 00 00
  0000000000000409: 48 8B 8C 24 F8 00  mov         rcx,qword ptr [rsp+0F8h]
                    00 00
  0000000000000411: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@N@Z]
  0000000000000417: 48 8D 15 00 00 00  lea         rdx,[$SG84254]
                    00
  000000000000041E: 48 8B C8           mov         rcx,rax
  0000000000000421: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000426: 48 89 84 24 08 01  mov         qword ptr [rsp+108h],rax
                    00 00
  000000000000042E: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  0000000000000435: 48 89 84 24 00 01  mov         qword ptr [rsp+100h],rax
                    00 00
  000000000000043D: 48 8B 94 24 00 01  mov         rdx,qword ptr [rsp+100h]
                    00 00
  0000000000000445: 48 8B 8C 24 08 01  mov         rcx,qword ptr [rsp+108h]
                    00 00
  000000000000044D: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000452: 48 89 84 24 10 01  mov         qword ptr [rsp+110h],rax
                    00 00
  000000000000045A: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000461: 48 8B 8C 24 10 01  mov         rcx,qword ptr [rsp+110h]
                    00 00
  0000000000000469: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  000000000000046F: C7 44 24 20 01 00  mov         dword ptr [rsp+20h],1
                    00 00
  0000000000000477: 41 B9 40 00 00 00  mov         r9d,40h
  000000000000047D: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000483: 48 8D 94 24 90 02  lea         rdx,[rsp+290h]
                    00 00
  000000000000048B: 48 8D 8C 24 60 01  lea         rcx,[rsp+160h]
                    00 00
  0000000000000493: E8 00 00 00 00     call        ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z
  0000000000000498: 90                 nop
  0000000000000499: 48 8B 84 24 60 01  mov         rax,qword ptr [rsp+160h]
                    00 00
  00000000000004A1: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000004A5: 48 8D 84 04 60 01  lea         rax,[rsp+rax+160h]
                    00 00
  00000000000004AD: 48 8B C8           mov         rcx,rax
  00000000000004B0: FF 15 00 00 00 00  call        qword ptr [__imp_??7ios_base@std@@QEBA_NXZ]
  00000000000004B6: 0F B6 C0           movzx       eax,al
  00000000000004B9: 85 C0              test        eax,eax
  00000000000004BB: 74 63              je          0000000000000520
  00000000000004BD: 48 8D 15 00 00 00  lea         rdx,[$SG84257]
                    00
  00000000000004C4: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cerr@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000004CB: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000004D0: 90                 nop
  00000000000004D1: C7 44 24 40 01 00  mov         dword ptr [rsp+40h],1
                    00 00
  00000000000004D9: 48 8D 84 24 10 02  lea         rax,[rsp+210h]
                    00 00
  00000000000004E1: 48 8B C8           mov         rcx,rax
  00000000000004E4: E8 00 00 00 00     call        ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  00000000000004E9: 48 8D 84 24 10 02  lea         rax,[rsp+210h]
                    00 00
  00000000000004F1: 48 8B C8           mov         rcx,rax
  00000000000004F4: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  00000000000004FA: 90                 nop
  00000000000004FB: 48 8D 8C 24 B0 02  lea         rcx,[rsp+2B0h]
                    00 00
  0000000000000503: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000508: 90                 nop
  0000000000000509: 48 8D 8C 24 90 02  lea         rcx,[rsp+290h]
                    00 00
  0000000000000511: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000516: 90                 nop
  0000000000000517: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  000000000000051B: E9 42 03 00 00     jmp         0000000000000862
  0000000000000520: 48 8D 15 00 00 00  lea         rdx,[$SG84259]
                    00
  0000000000000527: 48 8D 8C 24 D0 02  lea         rcx,[rsp+2D0h]
                    00 00
  000000000000052F: E8 00 00 00 00     call        ??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z
  0000000000000534: 90                 nop
  0000000000000535: 48 8D 84 24 70 02  lea         rax,[rsp+270h]
                    00 00
  000000000000053D: 48 89 84 24 18 01  mov         qword ptr [rsp+118h],rax
                    00 00
  0000000000000545: 0F B6 54 24 33     movzx       edx,byte ptr [rsp+33h]
  000000000000054A: 48 8B 8C 24 18 01  mov         rcx,qword ptr [rsp+118h]
                    00 00
  0000000000000552: E8 00 00 00 00     call        ??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z
  0000000000000557: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  000000000000055F: E8 00 00 00 00     call        ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000564: 90                 nop
  0000000000000565: C6 44 24 30 00     mov         byte ptr [rsp+30h],0
  000000000000056A: C7 44 24 34 00 00  mov         dword ptr [rsp+34h],0
                    00 00
  0000000000000572: 48 8D 94 24 70 02  lea         rdx,[rsp+270h]
                    00 00
  000000000000057A: 48 8D 8C 24 60 01  lea         rcx,[rsp+160h]
                    00 00
  0000000000000582: E8 00 00 00 00     call        ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  0000000000000587: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000058C: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000591: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000594: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000598: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000059D: 48 03 C8           add         rcx,rax
  00000000000005A0: 48 8B C1           mov         rax,rcx
  00000000000005A3: 48 8B C8           mov         rcx,rax
  00000000000005A6: FF 15 00 00 00 00  call        qword ptr [__imp_??Bios_base@std@@QEBA_NXZ]
  00000000000005AC: 0F B6 C0           movzx       eax,al
  00000000000005AF: 85 C0              test        eax,eax
  00000000000005B1: 0F 84 73 01 00 00  je          000000000000072A
  00000000000005B7: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  00000000000005BC: 85 C0              test        eax,eax
  00000000000005BE: 75 59              jne         0000000000000619
  00000000000005C0: 45 33 C0           xor         r8d,r8d
  00000000000005C3: 48 8D 94 24 D0 02  lea         rdx,[rsp+2D0h]
                    00 00
  00000000000005CB: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  00000000000005D3: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z
  00000000000005D8: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  00000000000005DC: 74 36              je          0000000000000614
  00000000000005DE: C6 44 24 30 01     mov         byte ptr [rsp+30h],1
  00000000000005E3: 48 8D 15 00 00 00  lea         rdx,[$SG84263]
                    00
  00000000000005EA: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000005F1: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000005F6: 48 89 84 24 20 01  mov         qword ptr [rsp+120h],rax
                    00 00
  00000000000005FE: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000605: 48 8B 8C 24 20 01  mov         rcx,qword ptr [rsp+120h]
                    00 00
  000000000000060D: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000613: 90                 nop
  0000000000000614: E9 0C 01 00 00     jmp         0000000000000725
  0000000000000619: 48 83 BC 24 80 02  cmp         qword ptr [rsp+280h],0
                    00 00 00
  0000000000000622: 75 0A              jne         000000000000062E
  0000000000000624: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  000000000000062C: EB 08              jmp         0000000000000636
  000000000000062E: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  0000000000000636: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  000000000000063B: 88 44 24 31        mov         byte ptr [rsp+31h],al
  000000000000063F: 0F B6 44 24 31     movzx       eax,byte ptr [rsp+31h]
  0000000000000644: 0F B6 C0           movzx       eax,al
  0000000000000647: 85 C0              test        eax,eax
  0000000000000649: 75 3A              jne         0000000000000685
  000000000000064B: 45 33 C0           xor         r8d,r8d
  000000000000064E: 48 8D 15 00 00 00  lea         rdx,[$SG84266]
                    00
  0000000000000655: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  000000000000065D: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  0000000000000662: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000666: 75 1D              jne         0000000000000685
  0000000000000668: 45 33 C0           xor         r8d,r8d
  000000000000066B: 48 8D 15 00 00 00  lea         rdx,[$SG84267]
                    00
  0000000000000672: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  000000000000067A: E8 00 00 00 00     call        ?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z
  000000000000067F: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000683: 74 05              je          000000000000068A
  0000000000000685: E9 A0 00 00 00     jmp         000000000000072A
  000000000000068A: 48 83 BC 24 80 02  cmp         qword ptr [rsp+280h],0
                    00 00 00
  0000000000000693: 75 0A              jne         000000000000069F
  0000000000000695: C7 44 24 3C 01 00  mov         dword ptr [rsp+3Ch],1
                    00 00
  000000000000069D: EB 08              jmp         00000000000006A7
  000000000000069F: C7 44 24 3C 00 00  mov         dword ptr [rsp+3Ch],0
                    00 00
  00000000000006A7: 0F B6 44 24 3C     movzx       eax,byte ptr [rsp+3Ch]
  00000000000006AC: 88 44 24 32        mov         byte ptr [rsp+32h],al
  00000000000006B0: 0F B6 44 24 32     movzx       eax,byte ptr [rsp+32h]
  00000000000006B5: 0F B6 C0           movzx       eax,al
  00000000000006B8: 85 C0              test        eax,eax
  00000000000006BA: 75 69              jne         0000000000000725
  00000000000006BC: 33 D2              xor         edx,edx
  00000000000006BE: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  00000000000006C6: E8 00 00 00 00     call        ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
  00000000000006CB: 0F BE 00           movsx       eax,byte ptr [rax]
  00000000000006CE: 83 F8 09           cmp         eax,9
  00000000000006D1: 74 17              je          00000000000006EA
  00000000000006D3: 33 D2              xor         edx,edx
  00000000000006D5: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  00000000000006DD: E8 00 00 00 00     call        ??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z
  00000000000006E2: 0F BE 00           movsx       eax,byte ptr [rax]
  00000000000006E5: 83 F8 20           cmp         eax,20h
  00000000000006E8: 75 3B              jne         0000000000000725
  00000000000006EA: 48 8D 94 24 70 02  lea         rdx,[rsp+270h]
                    00 00
  00000000000006F2: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  00000000000006F9: E8 00 00 00 00     call        ??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z
  00000000000006FE: 48 89 84 24 28 01  mov         qword ptr [rsp+128h],rax
                    00 00
  0000000000000706: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  000000000000070D: 48 8B 8C 24 28 01  mov         rcx,qword ptr [rsp+128h]
                    00 00
  0000000000000715: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  000000000000071B: 8B 44 24 34        mov         eax,dword ptr [rsp+34h]
  000000000000071F: FF C0              inc         eax
  0000000000000721: 89 44 24 34        mov         dword ptr [rsp+34h],eax
  0000000000000725: E9 48 FE FF FF     jmp         0000000000000572
  000000000000072A: 48 8D 8C 24 60 01  lea         rcx,[rsp+160h]
                    00 00
  0000000000000732: E8 00 00 00 00     call        ?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0000000000000737: 48 8D 15 00 00 00  lea         rdx,[$SG84270]
                    00
  000000000000073E: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000745: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000074A: 48 89 84 24 30 01  mov         qword ptr [rsp+130h],rax
                    00 00
  0000000000000752: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  0000000000000759: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  0000000000000761: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  0000000000000767: 48 8B 15 00 00 00  mov         rdx,qword ptr [?BOLD_GREEN@Color@@3PEBDEB]
                    00
  000000000000076E: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?cout@std@@3V?$basic_ostream@DU?$char_traits@D@std@@@1@A]
                    00
  0000000000000775: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  000000000000077A: 48 8D 15 00 00 00  lea         rdx,[$SG84272]
                    00
  0000000000000781: 48 8B C8           mov         rcx,rax
  0000000000000784: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  0000000000000789: 48 89 84 24 38 01  mov         qword ptr [rsp+138h],rax
                    00 00
  0000000000000791: 8B 54 24 34        mov         edx,dword ptr [rsp+34h]
  0000000000000795: 48 8B 8C 24 38 01  mov         rcx,qword ptr [rsp+138h]
                    00 00
  000000000000079D: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@H@Z]
  00000000000007A3: 48 8D 15 00 00 00  lea         rdx,[$SG84271]
                    00
  00000000000007AA: 48 8B C8           mov         rcx,rax
  00000000000007AD: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000007B2: 48 89 84 24 48 01  mov         qword ptr [rsp+148h],rax
                    00 00
  00000000000007BA: 48 8B 05 00 00 00  mov         rax,qword ptr [?RESET@Color@@3PEBDEB]
                    00
  00000000000007C1: 48 89 84 24 40 01  mov         qword ptr [rsp+140h],rax
                    00 00
  00000000000007C9: 48 8B 94 24 40 01  mov         rdx,qword ptr [rsp+140h]
                    00 00
  00000000000007D1: 48 8B 8C 24 48 01  mov         rcx,qword ptr [rsp+148h]
                    00 00
  00000000000007D9: E8 00 00 00 00     call        ??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z
  00000000000007DE: 48 89 84 24 50 01  mov         qword ptr [rsp+150h],rax
                    00 00
  00000000000007E6: 48 8D 15 00 00 00  lea         rdx,[??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z]
                    00
  00000000000007ED: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  00000000000007F5: FF 15 00 00 00 00  call        qword ptr [__imp_??6?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV01@P6AAEAV01@AEAV01@@Z@Z]
  00000000000007FB: 90                 nop
  00000000000007FC: C7 44 24 44 00 00  mov         dword ptr [rsp+44h],0
                    00 00
  0000000000000804: 48 8D 8C 24 70 02  lea         rcx,[rsp+270h]
                    00 00
  000000000000080C: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000811: 90                 nop
  0000000000000812: 48 8D 8C 24 D0 02  lea         rcx,[rsp+2D0h]
                    00 00
  000000000000081A: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000081F: 90                 nop
  0000000000000820: 48 8D 84 24 10 02  lea         rax,[rsp+210h]
                    00 00
  0000000000000828: 48 8B C8           mov         rcx,rax
  000000000000082B: E8 00 00 00 00     call        ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000830: 48 8D 84 24 10 02  lea         rax,[rsp+210h]
                    00 00
  0000000000000838: 48 8B C8           mov         rcx,rax
  000000000000083B: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000841: 90                 nop
  0000000000000842: 48 8D 8C 24 B0 02  lea         rcx,[rsp+2B0h]
                    00 00
  000000000000084A: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000084F: 90                 nop
  0000000000000850: 48 8D 8C 24 90 02  lea         rcx,[rsp+290h]
                    00 00
  0000000000000858: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000085D: 90                 nop
  000000000000085E: 8B 44 24 44        mov         eax,dword ptr [rsp+44h]
  0000000000000862: 48 8B 8C 24 F0 02  mov         rcx,qword ptr [rsp+2F0h]
                    00 00
  000000000000086A: 48 33 CC           xor         rcx,rsp
  000000000000086D: E8 00 00 00 00     call        __security_check_cookie
  0000000000000872: 48 81 C4 08 03 00  add         rsp,308h
                    00
  0000000000000879: C3                 ret

?dtor$0@?0??run@@YAHXZ@4HA (int `int __cdecl run(void)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 8D 80 00 00  lea         rcx,[rbp+80h]
                    00
  0000000000000010: E8 00 00 00 00     call        ??1?$vector@NV?$allocator@N@std@@@std@@QEAA@XZ
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5D                 pop         rbp
  000000000000001A: C3                 ret
main$dtor$0:
  000000000000001B: 40 55              push        rbp
  000000000000001D: 48 83 EC 20        sub         rsp,20h
  0000000000000021: 48 8B EA           mov         rbp,rdx
  0000000000000024: 48 8D 8D 90 02 00  lea         rcx,[rbp+290h]
                    00
  000000000000002B: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000030: 48 83 C4 20        add         rsp,20h
  0000000000000034: 5D                 pop         rbp
  0000000000000035: C3                 ret
main$dtor$1:
  0000000000000036: 40 55              push        rbp
  0000000000000038: 48 83 EC 20        sub         rsp,20h
  000000000000003C: 48 8B EA           mov         rbp,rdx
  000000000000003F: 48 8D 8D B0 02 00  lea         rcx,[rbp+2B0h]
                    00
  0000000000000046: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000004B: 48 83 C4 20        add         rsp,20h
  000000000000004F: 5D                 pop         rbp
  0000000000000050: C3                 ret
main$dtor$2:
  0000000000000051: 40 55              push        rbp
  0000000000000053: 48 83 EC 20        sub         rsp,20h
  0000000000000057: 48 8B EA           mov         rbp,rdx
  000000000000005A: 48 8D 8D 60 01 00  lea         rcx,[rbp+160h]
                    00
  0000000000000061: E8 00 00 00 00     call        ??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ
  0000000000000066: 48 83 C4 20        add         rsp,20h
  000000000000006A: 5D                 pop         rbp
  000000000000006B: C3                 ret
main$dtor$3:
  000000000000006C: 40 55              push        rbp
  000000000000006E: 48 83 EC 20        sub         rsp,20h
  0000000000000072: 48 8B EA           mov         rbp,rdx
  0000000000000075: 48 8D 8D D0 02 00  lea         rcx,[rbp+2D0h]
                    00
  000000000000007C: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000081: 48 83 C4 20        add         rsp,20h
  0000000000000085: 5D                 pop         rbp
  0000000000000086: C3                 ret
main$dtor$4:
  0000000000000087: 40 55              push        rbp
  0000000000000089: 48 83 EC 20        sub         rsp,20h
  000000000000008D: 48 8B EA           mov         rbp,rdx
  0000000000000090: 48 8D 8D 70 02 00  lea         rcx,[rbp+270h]
                    00
  0000000000000097: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  000000000000009C: 48 83 C4 20        add         rsp,20h
  00000000000000A0: 5D                 pop         rbp
  00000000000000A1: C3                 ret

??$?0$$V@?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@U_Zero_then_variadic_args_t@1@@Z (public: __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1><>(struct std::_Zero_then_variadic_args_t)):
  0000000000000000: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 57                 push        rdi
  000000000000000A: 48 83 EC 10        sub         rsp,10h
  000000000000000E: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000013: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000017: 48 8B 04 24        mov         rax,qword ptr [rsp]
  000000000000001B: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000020: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000025: 48 8B 7C 24 08     mov         rdi,qword ptr [rsp+8]
  000000000000002A: 33 C0              xor         eax,eax
  000000000000002C: B9 10 00 00 00     mov         ecx,10h
  0000000000000031: F3 AA              rep stos    byte ptr [rdi]
  0000000000000033: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000037: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  000000000000003F: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000043: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  000000000000004B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000050: 48 83 C4 10        add         rsp,10h
  0000000000000054: 5F                 pop         rdi
  0000000000000055: C3                 ret

??$?6DU?$char_traits@D@std@@V?$allocator@D@1@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 48        sub         rsp,48h
  000000000000000E: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000013: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000017: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000021: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000026: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000002B: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
  0000000000000030: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000035: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  000000000000003A: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  000000000000003F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000044: E8 00 00 00 00     call        ??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z
  0000000000000049: 48 83 C4 48        add         rsp,48h
  000000000000004D: C3                 ret

??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &,char const *)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 81 EC E8 00 00  sub         rsp,0E8h
                    00
  0000000000000011: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000019: 48 8B 84 24 F8 00  mov         rax,qword ptr [rsp+0F8h]
                    00 00
  0000000000000021: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000026: 48 C7 44 24 40 FF  mov         qword ptr [rsp+40h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000002F: 48 FF 44 24 40     inc         qword ptr [rsp+40h]
  0000000000000034: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000039: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003E: 80 3C 08 00        cmp         byte ptr [rax+rcx],0
  0000000000000042: 75 EB              jne         000000000000002F
  0000000000000044: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000049: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000051: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000059: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000005E: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000066: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000069: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000006D: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000075: 48 03 C8           add         rcx,rax
  0000000000000078: 48 8B C1           mov         rax,rcx
  000000000000007B: 48 8B C8           mov         rcx,rax
  000000000000007E: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  0000000000000084: 48 85 C0           test        rax,rax
  0000000000000087: 7E 5F              jle         00000000000000E8
  0000000000000089: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000091: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000094: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000098: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000000A0: 48 03 C8           add         rcx,rax
  00000000000000A3: 48 8B C1           mov         rax,rcx
  00000000000000A6: 48 8B C8           mov         rcx,rax
  00000000000000A9: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  00000000000000AF: 48 3B 44 24 48     cmp         rax,qword ptr [rsp+48h]
  00000000000000B4: 7E 32              jle         00000000000000E8
  00000000000000B6: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000000BE: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000C1: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000C5: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000000CD: 48 03 C8           add         rcx,rax
  00000000000000D0: 48 8B C1           mov         rax,rcx
  00000000000000D3: 48 8B C8           mov         rcx,rax
  00000000000000D6: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  00000000000000DC: 48 2B 44 24 48     sub         rax,qword ptr [rsp+48h]
  00000000000000E1: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000000E6: EB 09              jmp         00000000000000F1
  00000000000000E8: 48 C7 44 24 70 00  mov         qword ptr [rsp+70h],0
                    00 00 00
  00000000000000F1: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000F6: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000FB: 48 8B 94 24 F0 00  mov         rdx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000103: 48 8D 8C 24 C8 00  lea         rcx,[rsp+0C8h]
                    00 00
  000000000000010B: E8 00 00 00 00     call        ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  0000000000000110: 90                 nop
  0000000000000111: 0F B6 84 24 D0 00  movzx       eax,byte ptr [rsp+0D0h]
                    00 00
  0000000000000119: 88 44 24 24        mov         byte ptr [rsp+24h],al
  000000000000011D: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  0000000000000122: 0F B6 C0           movzx       eax,al
  0000000000000125: 85 C0              test        eax,eax
  0000000000000127: 75 10              jne         0000000000000139
  0000000000000129: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000012D: 83 C8 04           or          eax,4
  0000000000000130: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000134: E9 B3 02 00 00     jmp         $LN23
  0000000000000139: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000141: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000144: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000148: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000150: 48 03 C8           add         rcx,rax
  0000000000000153: 48 8B C1           mov         rax,rcx
  0000000000000156: 48 8B C8           mov         rcx,rax
  0000000000000159: FF 15 00 00 00 00  call        qword ptr [__imp_?flags@ios_base@std@@QEBAHXZ]
  000000000000015F: 25 C0 01 00 00     and         eax,1C0h
  0000000000000164: 83 F8 40           cmp         eax,40h
  0000000000000167: 0F 84 E5 00 00 00  je          0000000000000252
  000000000000016D: EB 0D              jmp         000000000000017C
  000000000000016F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000174: 48 FF C8           dec         rax
  0000000000000177: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000017C: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  0000000000000182: 0F 8E CA 00 00 00  jle         0000000000000252
  0000000000000188: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000190: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000193: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000197: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  000000000000019F: 48 03 C8           add         rcx,rax
  00000000000001A2: 48 8B C1           mov         rax,rcx
  00000000000001A5: 48 8B C8           mov         rcx,rax
  00000000000001A8: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000001AE: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  00000000000001B6: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000001BE: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000001C1: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000001C5: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000001CD: 48 03 C8           add         rcx,rax
  00000000000001D0: 48 8B C1           mov         rax,rcx
  00000000000001D3: 48 8B C8           mov         rcx,rax
  00000000000001D6: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  00000000000001DC: 88 44 24 25        mov         byte ptr [rsp+25h],al
  00000000000001E0: 0F B6 54 24 25     movzx       edx,byte ptr [rsp+25h]
  00000000000001E5: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  00000000000001ED: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000001F3: 89 44 24 50        mov         dword ptr [rsp+50h],eax
  00000000000001F7: 8B 44 24 50        mov         eax,dword ptr [rsp+50h]
  00000000000001FB: 89 44 24 58        mov         dword ptr [rsp+58h],eax
  00000000000001FF: C7 44 24 54 FF FF  mov         dword ptr [rsp+54h],0FFFFFFFFh
                    FF FF
  0000000000000207: 8B 44 24 54        mov         eax,dword ptr [rsp+54h]
  000000000000020B: 89 44 24 5C        mov         dword ptr [rsp+5Ch],eax
  000000000000020F: 8B 44 24 58        mov         eax,dword ptr [rsp+58h]
  0000000000000213: 39 44 24 5C        cmp         dword ptr [rsp+5Ch],eax
  0000000000000217: 75 0A              jne         0000000000000223
  0000000000000219: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  0000000000000221: EB 08              jmp         000000000000022B
  0000000000000223: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  000000000000022B: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  0000000000000230: 88 44 24 26        mov         byte ptr [rsp+26h],al
  0000000000000234: 0F B6 44 24 26     movzx       eax,byte ptr [rsp+26h]
  0000000000000239: 0F B6 C0           movzx       eax,al
  000000000000023C: 85 C0              test        eax,eax
  000000000000023E: 74 0D              je          000000000000024D
  0000000000000240: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000244: 83 C8 04           or          eax,4
  0000000000000247: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  000000000000024B: EB 05              jmp         0000000000000252
  000000000000024D: E9 1D FF FF FF     jmp         000000000000016F
  0000000000000252: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  0000000000000257: 75 6B              jne         00000000000002C4
  0000000000000259: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000261: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000264: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000268: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000270: 48 03 C8           add         rcx,rax
  0000000000000273: 48 8B C1           mov         rax,rcx
  0000000000000276: 48 8B C8           mov         rcx,rax
  0000000000000279: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000027F: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000287: 4C 8B 44 24 48     mov         r8,qword ptr [rsp+48h]
  000000000000028C: 48 8B 94 24 F8 00  mov         rdx,qword ptr [rsp+0F8h]
                    00 00
  0000000000000294: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  000000000000029C: FF 15 00 00 00 00  call        qword ptr [__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z]
  00000000000002A2: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000002AA: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000002AF: 48 39 84 24 98 00  cmp         qword ptr [rsp+98h],rax
                    00 00
  00000000000002B7: 74 0B              je          00000000000002C4
  00000000000002B9: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000002BD: 83 C8 04           or          eax,4
  00000000000002C0: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000002C4: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  00000000000002C9: 0F 85 E5 00 00 00  jne         00000000000003B4
  00000000000002CF: EB 0D              jmp         00000000000002DE
  00000000000002D1: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000002D6: 48 FF C8           dec         rax
  00000000000002D9: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000002DE: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  00000000000002E4: 0F 8E CA 00 00 00  jle         00000000000003B4
  00000000000002EA: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000002F2: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000002F5: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002F9: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000301: 48 03 C8           add         rcx,rax
  0000000000000304: 48 8B C1           mov         rax,rcx
  0000000000000307: 48 8B C8           mov         rcx,rax
  000000000000030A: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000310: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  0000000000000318: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000320: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000323: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000327: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  000000000000032F: 48 03 C8           add         rcx,rax
  0000000000000332: 48 8B C1           mov         rax,rcx
  0000000000000335: 48 8B C8           mov         rcx,rax
  0000000000000338: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  000000000000033E: 88 44 24 27        mov         byte ptr [rsp+27h],al
  0000000000000342: 0F B6 54 24 27     movzx       edx,byte ptr [rsp+27h]
  0000000000000347: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000034F: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  0000000000000355: 89 44 24 60        mov         dword ptr [rsp+60h],eax
  0000000000000359: 8B 44 24 60        mov         eax,dword ptr [rsp+60h]
  000000000000035D: 89 44 24 68        mov         dword ptr [rsp+68h],eax
  0000000000000361: C7 44 24 64 FF FF  mov         dword ptr [rsp+64h],0FFFFFFFFh
                    FF FF
  0000000000000369: 8B 44 24 64        mov         eax,dword ptr [rsp+64h]
  000000000000036D: 89 44 24 6C        mov         dword ptr [rsp+6Ch],eax
  0000000000000371: 8B 44 24 68        mov         eax,dword ptr [rsp+68h]
  0000000000000375: 39 44 24 6C        cmp         dword ptr [rsp+6Ch],eax
  0000000000000379: 75 0A              jne         0000000000000385
  000000000000037B: C7 44 24 3C 01 00  mov         dword ptr [rsp+3Ch],1
                    00 00
  0000000000000383: EB 08              jmp         000000000000038D
  0000000000000385: C7 44 24 3C 00 00  mov         dword ptr [rsp+3Ch],0
                    00 00
  000000000000038D: 0F B6 44 24 3C     movzx       eax,byte ptr [rsp+3Ch]
  0000000000000392: 88 44 24 28        mov         byte ptr [rsp+28h],al
  0000000000000396: 0F B6 44 24 28     movzx       eax,byte ptr [rsp+28h]
  000000000000039B: 0F B6 C0           movzx       eax,al
  000000000000039E: 85 C0              test        eax,eax
  00000000000003A0: 74 0D              je          00000000000003AF
  00000000000003A2: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000003A6: 83 C8 04           or          eax,4
  00000000000003A9: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000003AD: EB 05              jmp         00000000000003B4
  00000000000003AF: E9 1D FF FF FF     jmp         00000000000002D1
  00000000000003B4: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000003BC: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000003BF: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000003C3: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000003CB: 48 03 C8           add         rcx,rax
  00000000000003CE: 48 8B C1           mov         rax,rcx
  00000000000003D1: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  00000000000003D9: 33 D2              xor         edx,edx
  00000000000003DB: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  00000000000003E3: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEAA_J_J@Z]
  00000000000003E9: 90                 nop
  00000000000003EA: EB 00              jmp         $LN23
$LN23:
  00000000000003EC: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  00000000000003F4: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000003F7: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000003FB: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  0000000000000403: 48 03 C8           add         rcx,rax
  0000000000000406: 48 8B C1           mov         rax,rcx
  0000000000000409: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  0000000000000411: 45 33 C0           xor         r8d,r8d
  0000000000000414: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  0000000000000418: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000420: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000426: 90                 nop
  0000000000000427: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  000000000000042F: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  0000000000000437: 48 8D 8C 24 C8 00  lea         rcx,[rsp+0C8h]
                    00 00
  000000000000043F: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000444: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000044C: 48 81 C4 E8 00 00  add         rsp,0E8h
                    00
  0000000000000453: C3                 ret

?dtor$0@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA (int `class dtor$0::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class dtor$0::std &,char const *)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 8D C8 00 00  lea         rcx,[rbp+0C8h]
                    00
  0000000000000010: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5D                 pop         rbp
  000000000000001A: C3                 ret

?catch$10@?0???$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z@4HA (int `class catch$10::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::operator<<<struct std::char_traits<char> >(class catch$10::std &,char const *)'::`1'::catch$10):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 55                 push        rbp
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B EA           mov         rbp,rdx
__catch$??$?6U?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@PEBD@Z$0:
  000000000000000D: 48 8B 85 F0 00 00  mov         rax,qword ptr [rbp+0F0h]
                    00
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001B: 48 8B 8D F0 00 00  mov         rcx,qword ptr [rbp+0F0h]
                    00
  0000000000000022: 48 03 C8           add         rcx,rax
  0000000000000025: 48 8B C1           mov         rax,rcx
  0000000000000028: 48 89 85 B0 00 00  mov         qword ptr [rbp+0B0h],rax
                    00
  000000000000002F: 41 B0 01           mov         r8b,1
  0000000000000032: BA 04 00 00 00     mov         edx,4
  0000000000000037: 48 8B 8D B0 00 00  mov         rcx,qword ptr [rbp+0B0h]
                    00
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000044: 90                 nop
  0000000000000045: 48 8D 05 00 00 00  lea         rax,[$LN23]
                    00
  000000000000004C: 48 83 C4 20        add         rsp,20h
  0000000000000050: 5D                 pop         rbp
  0000000000000051: C3                 ret
  0000000000000052: CC                 int         3

??$?G_JU?$ratio@$00$0DLJKMKAA@@std@@_JU01@@chrono@std@@YA?AV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@AEBV201@0@Z (class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > __cdecl std::chrono::operator-<__int64,struct std::ratio<1,1000000000>,__int64,struct std::ratio<1,1000000000> >(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 38        sub         rsp,38h
  0000000000000013: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000018: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001B: 48 89 04 24        mov         qword ptr [rsp],rax
  000000000000001F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000024: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000027: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  000000000000002C: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000030: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000035: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000003A: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000003F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000044: 48 8B 4C 24 18     mov         rcx,qword ptr [rsp+18h]
  0000000000000049: 48 2B C1           sub         rax,rcx
  000000000000004C: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000051: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000056: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000005B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000005E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000063: 48 83 C4 38        add         rsp,38h
  0000000000000067: C3                 ret

??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z (void * __cdecl std::_Allocate<16,struct std::_Default_allocate_traits>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 48        sub         rsp,48h
  0000000000000009: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  000000000000000F: 75 04              jne         0000000000000015
  0000000000000011: 33 C0              xor         eax,eax
  0000000000000013: EB 52              jmp         0000000000000067
  0000000000000015: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000001A: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000001F: 0F B6 C0           movzx       eax,al
  0000000000000022: 85 C0              test        eax,eax
  0000000000000024: 74 16              je          000000000000003C
  0000000000000026: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000002B: E8 00 00 00 00     call        ??2@YAPEAX_K@Z
  0000000000000030: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000035: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000003A: EB 2B              jmp         0000000000000067
  000000000000003C: 48 81 7C 24 50 00  cmp         qword ptr [rsp+50h],1000h
                    10 00 00
  0000000000000045: 72 0C              jb          0000000000000053
  0000000000000047: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000004C: E8 00 00 00 00     call        ??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  0000000000000051: EB 14              jmp         0000000000000067
  0000000000000053: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000058: E8 00 00 00 00     call        ??2@YAPEAX_K@Z
  000000000000005D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000062: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000067: 48 83 C4 48        add         rsp,48h
  000000000000006B: C3                 ret

??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z (private: static char * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Allocate_for_capacity<0>(class std::allocator<char> &,unsigned __int64 &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 81 EC 80 00 00  sub         rsp,80h
                    00
  0000000000000012: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  000000000000001A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001D: 48 FF C0           inc         rax
  0000000000000020: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  0000000000000028: 48 89 01           mov         qword ptr [rcx],rax
  000000000000002B: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000034: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  000000000000003C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000003F: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000044: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  0000000000000049: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000004E: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000053: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000058: 48 8B C8           mov         rcx,rax
  000000000000005B: E8 00 00 00 00     call        ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  0000000000000060: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000065: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000006A: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  000000000000006F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000074: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000079: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000007E: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000083: 0F B6 C0           movzx       eax,al
  0000000000000086: 85 C0              test        eax,eax
  0000000000000088: 74 76              je          0000000000000100
  000000000000008A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000008F: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000094: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000099: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000009E: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  00000000000000A7: EB 0D              jmp         00000000000000B6
  00000000000000A9: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000AE: 48 FF C0           inc         rax
  00000000000000B1: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000B6: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  00000000000000BE: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000C1: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  00000000000000C6: 73 38              jae         0000000000000100
  00000000000000C8: 48 C7 44 24 78 01  mov         qword ptr [rsp+78h],1
                    00 00 00
  00000000000000D1: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000D6: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000DB: 48 03 C8           add         rcx,rax
  00000000000000DE: 48 8B C1           mov         rax,rcx
  00000000000000E1: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000E6: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000EB: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000000F0: 48 8B 7C 24 70     mov         rdi,qword ptr [rsp+70h]
  00000000000000F5: 33 C0              xor         eax,eax
  00000000000000F7: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  00000000000000FC: F3 AA              rep stos    byte ptr [rdi]
  00000000000000FE: EB A9              jmp         00000000000000A9
  0000000000000100: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  0000000000000108: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000010B: 48 FF C8           dec         rax
  000000000000010E: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  0000000000000116: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000119: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000011E: 48 81 C4 80 00 00  add         rsp,80h
                    00
  0000000000000125: 5F                 pop         rdi
  0000000000000126: C3                 ret

??$_Allocate_manually_vector_aligned@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z (void * __cdecl std::_Allocate_manually_vector_aligned<struct std::_Default_allocate_traits>(unsigned __int64)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 48        sub         rsp,48h
  0000000000000009: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000000E: 48 83 C0 27        add         rax,27h
  0000000000000012: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000017: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000001C: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  0000000000000021: 77 06              ja          0000000000000029
  0000000000000023: E8 00 00 00 00     call        ?_Throw_bad_array_new_length@std@@YAXXZ
  0000000000000028: 90                 nop
  0000000000000029: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000002E: E8 00 00 00 00     call        ??2@YAPEAX_K@Z
  0000000000000033: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000038: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000003D: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000042: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000048: 74 02              je          000000000000004C
  000000000000004A: EB 0D              jmp         0000000000000059
  000000000000004C: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter_noinfo_noreturn]
  0000000000000052: 90                 nop
  0000000000000053: 33 C0              xor         eax,eax
  0000000000000055: 85 C0              test        eax,eax
  0000000000000057: 75 F3              jne         000000000000004C
  0000000000000059: 33 C0              xor         eax,eax
  000000000000005B: 85 C0              test        eax,eax
  000000000000005D: 75 E3              jne         0000000000000042
  000000000000005F: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000064: 48 83 C0 27        add         rax,27h
  0000000000000068: 48 83 E0 E0        and         rax,0FFFFFFFFFFFFFFE0h
  000000000000006C: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000071: B8 08 00 00 00     mov         eax,8
  0000000000000076: 48 6B C0 FF        imul        rax,rax,0FFFFFFFFFFFFFFFFh
  000000000000007A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000007F: 48 8B 54 24 20     mov         rdx,qword ptr [rsp+20h]
  0000000000000084: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  0000000000000088: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000008D: 48 83 C4 48        add         rsp,48h
  0000000000000091: C3                 ret

??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct<1,char const *>(char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC 28 01 00  sub         rsp,128h
                    00
  0000000000000016: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  000000000000001E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000023: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  000000000000002B: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000030: 48 39 84 24 40 01  cmp         qword ptr [rsp+140h],rax
                    00 00
  0000000000000038: 76 06              jbe         0000000000000040
  000000000000003A: E8 00 00 00 00     call        ?_Xlen_string@std@@YAXXZ
  000000000000003F: 90                 nop
  0000000000000040: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000048: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  0000000000000050: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000058: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  0000000000000060: 48 8B 84 24 A8 00  mov         rax,qword ptr [rsp+0A8h]
                    00 00
  0000000000000068: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  0000000000000070: 48 8D 05 00 00 00  lea         rax,[?_Fake_alloc@std@@3U_Fake_allocator@1@B]
                    00
  0000000000000077: 48 89 84 24 18 01  mov         qword ptr [rsp+118h],rax
                    00 00
  000000000000007F: 48 83 BC 24 40 01  cmp         qword ptr [rsp+140h],0Fh
                    00 00 0F
  0000000000000088: 0F 87 F4 00 00 00  ja          0000000000000182
  000000000000008E: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000093: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  000000000000009B: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000009F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000A4: 48 C7 40 18 0F 00  mov         qword ptr [rax+18h],0Fh
                    00 00
  00000000000000AC: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000B1: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000B6: C6 44 24 22 00     mov         byte ptr [rsp+22h],0
  00000000000000BB: 0F B6 44 24 22     movzx       eax,byte ptr [rsp+22h]
  00000000000000C0: 0F B6 C0           movzx       eax,al
  00000000000000C3: 85 C0              test        eax,eax
  00000000000000C5: 74 53              je          000000000000011A
  00000000000000C7: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  00000000000000D0: EB 0D              jmp         00000000000000DF
  00000000000000D2: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000D7: 48 FF C0           inc         rax
  00000000000000DA: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000DF: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  00000000000000E7: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  00000000000000EC: 74 2A              je          0000000000000118
  00000000000000EE: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000F3: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000F8: 48 03 C8           add         rcx,rax
  00000000000000FB: 48 8B C1           mov         rax,rcx
  00000000000000FE: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000103: 48 8B 94 24 38 01  mov         rdx,qword ptr [rsp+138h]
                    00 00
  000000000000010B: 48 03 D1           add         rdx,rcx
  000000000000010E: 48 8B CA           mov         rcx,rdx
  0000000000000111: 0F B6 09           movzx       ecx,byte ptr [rcx]
  0000000000000114: 88 08              mov         byte ptr [rax],cl
  0000000000000116: EB BA              jmp         00000000000000D2
  0000000000000118: EB 1B              jmp         0000000000000135
  000000000000011A: 4C 8B 84 24 40 01  mov         r8,qword ptr [rsp+140h]
                    00 00
  0000000000000122: 48 8B 94 24 38 01  mov         rdx,qword ptr [rsp+138h]
                    00 00
  000000000000012A: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000012F: E8 00 00 00 00     call        memcpy
  0000000000000134: 90                 nop
  0000000000000135: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000013A: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  0000000000000142: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000147: 48 03 C8           add         rcx,rax
  000000000000014A: 48 8B C1           mov         rax,rcx
  000000000000014D: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000152: C6 44 24 23 00     mov         byte ptr [rsp+23h],0
  0000000000000157: 0F B6 44 24 23     movzx       eax,byte ptr [rsp+23h]
  000000000000015C: 0F B6 C0           movzx       eax,al
  000000000000015F: 85 C0              test        eax,eax
  0000000000000161: 74 0E              je          0000000000000171
  0000000000000163: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000168: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  000000000000016D: 88 08              mov         byte ptr [rax],cl
  000000000000016F: EB 0C              jmp         000000000000017D
  0000000000000171: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000176: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  000000000000017B: 88 08              mov         byte ptr [rax],cl
  000000000000017D: E9 DD 02 00 00     jmp         000000000000045F
  0000000000000182: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  000000000000018A: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000018F: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000194: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  000000000000019C: 48 83 C8 0F        or          rax,0Fh
  00000000000001A0: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000001A5: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000001AA: 48 39 44 24 50     cmp         qword ptr [rsp+50h],rax
  00000000000001AF: 76 0F              jbe         00000000000001C0
  00000000000001B1: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000001B6: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000001BB: E9 93 00 00 00     jmp         0000000000000253
  00000000000001C0: 33 D2              xor         edx,edx
  00000000000001C2: B8 0F 00 00 00     mov         eax,0Fh
  00000000000001C7: B9 02 00 00 00     mov         ecx,2
  00000000000001CC: 48 F7 F1           div         rax,rcx
  00000000000001CF: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000001D4: 48 2B C8           sub         rcx,rax
  00000000000001D7: 48 8B C1           mov         rax,rcx
  00000000000001DA: 48 83 F8 0F        cmp         rax,0Fh
  00000000000001DE: 73 0C              jae         00000000000001EC
  00000000000001E0: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000001E5: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000001EA: EB 67              jmp         0000000000000253
  00000000000001EC: 33 D2              xor         edx,edx
  00000000000001EE: B8 0F 00 00 00     mov         eax,0Fh
  00000000000001F3: B9 02 00 00 00     mov         ecx,2
  00000000000001F8: 48 F7 F1           div         rax,rcx
  00000000000001FB: 48 83 C0 0F        add         rax,0Fh
  00000000000001FF: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000204: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000209: 48 39 44 24 50     cmp         qword ptr [rsp+50h],rax
  000000000000020E: 73 0C              jae         000000000000021C
  0000000000000210: 48 8D 44 24 70     lea         rax,[rsp+70h]
  0000000000000215: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000021A: EB 0A              jmp         0000000000000226
  000000000000021C: 48 8D 44 24 50     lea         rax,[rsp+50h]
  0000000000000221: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000226: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  000000000000022B: 48 89 84 24 B0 00  mov         qword ptr [rsp+0B0h],rax
                    00 00
  0000000000000233: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000023B: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  0000000000000243: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  000000000000024B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000024E: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000253: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000258: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000260: 48 8D 94 24 88 00  lea         rdx,[rsp+88h]
                    00 00
  0000000000000268: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000270: E8 00 00 00 00     call        ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
  0000000000000275: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000027A: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000027F: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000287: C6 44 24 24 00     mov         byte ptr [rsp+24h],0
  000000000000028C: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  0000000000000291: 0F B6 C0           movzx       eax,al
  0000000000000294: 85 C0              test        eax,eax
  0000000000000296: 74 42              je          00000000000002DA
  0000000000000298: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  00000000000002A0: 48 89 84 24 C8 00  mov         qword ptr [rsp+0C8h],rax
                    00 00
  00000000000002A8: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  00000000000002B0: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  00000000000002B8: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  00000000000002C0: 48 89 84 24 D8 00  mov         qword ptr [rsp+0D8h],rax
                    00 00
  00000000000002C8: 48 8B 84 24 D8 00  mov         rax,qword ptr [rsp+0D8h]
                    00 00
  00000000000002D0: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000002D5: 48 89 08           mov         qword ptr [rax],rcx
  00000000000002D8: EB 40              jmp         000000000000031A
  00000000000002DA: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  00000000000002E2: 48 89 84 24 E0 00  mov         qword ptr [rsp+0E0h],rax
                    00 00
  00000000000002EA: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  00000000000002F2: 48 89 84 24 E8 00  mov         qword ptr [rsp+0E8h],rax
                    00 00
  00000000000002FA: 48 8B 84 24 E8 00  mov         rax,qword ptr [rsp+0E8h]
                    00 00
  0000000000000302: 48 89 84 24 F0 00  mov         qword ptr [rsp+0F0h],rax
                    00 00
  000000000000030A: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000312: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000317: 48 89 08           mov         qword ptr [rax],rcx
  000000000000031A: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000031F: 48 8B 8C 24 40 01  mov         rcx,qword ptr [rsp+140h]
                    00 00
  0000000000000327: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000032B: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000330: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  0000000000000338: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  000000000000033C: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000341: 48 89 84 24 F8 00  mov         qword ptr [rsp+0F8h],rax
                    00 00
  0000000000000349: 48 8B 84 24 F8 00  mov         rax,qword ptr [rsp+0F8h]
                    00 00
  0000000000000351: 48 89 84 24 00 01  mov         qword ptr [rsp+100h],rax
                    00 00
  0000000000000359: 48 8B 84 24 00 01  mov         rax,qword ptr [rsp+100h]
                    00 00
  0000000000000361: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000369: C6 44 24 25 00     mov         byte ptr [rsp+25h],0
  000000000000036E: 0F B6 44 24 25     movzx       eax,byte ptr [rsp+25h]
  0000000000000373: 0F B6 C0           movzx       eax,al
  0000000000000376: 85 C0              test        eax,eax
  0000000000000378: 74 56              je          00000000000003D0
  000000000000037A: 48 C7 44 24 38 00  mov         qword ptr [rsp+38h],0
                    00 00 00
  0000000000000383: EB 0D              jmp         0000000000000392
  0000000000000385: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000038A: 48 FF C0           inc         rax
  000000000000038D: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000392: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  000000000000039A: 48 39 44 24 38     cmp         qword ptr [rsp+38h],rax
  000000000000039F: 74 2D              je          00000000000003CE
  00000000000003A1: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000003A6: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  00000000000003AE: 48 03 C8           add         rcx,rax
  00000000000003B1: 48 8B C1           mov         rax,rcx
  00000000000003B4: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000003B9: 48 8B 94 24 38 01  mov         rdx,qword ptr [rsp+138h]
                    00 00
  00000000000003C1: 48 03 D1           add         rdx,rcx
  00000000000003C4: 48 8B CA           mov         rcx,rdx
  00000000000003C7: 0F B6 09           movzx       ecx,byte ptr [rcx]
  00000000000003CA: 88 08              mov         byte ptr [rax],cl
  00000000000003CC: EB B7              jmp         0000000000000385
  00000000000003CE: EB 1E              jmp         00000000000003EE
  00000000000003D0: 4C 8B 84 24 40 01  mov         r8,qword ptr [rsp+140h]
                    00 00
  00000000000003D8: 48 8B 94 24 38 01  mov         rdx,qword ptr [rsp+138h]
                    00 00
  00000000000003E0: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  00000000000003E8: E8 00 00 00 00     call        memcpy
  00000000000003ED: 90                 nop
  00000000000003EE: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  00000000000003F3: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000003F8: 48 89 84 24 08 01  mov         qword ptr [rsp+108h],rax
                    00 00
  0000000000000400: 48 8B 84 24 08 01  mov         rax,qword ptr [rsp+108h]
                    00 00
  0000000000000408: 48 89 84 24 10 01  mov         qword ptr [rsp+110h],rax
                    00 00
  0000000000000410: 48 8B 84 24 40 01  mov         rax,qword ptr [rsp+140h]
                    00 00
  0000000000000418: 48 8B 8C 24 10 01  mov         rcx,qword ptr [rsp+110h]
                    00 00
  0000000000000420: 48 03 C8           add         rcx,rax
  0000000000000423: 48 8B C1           mov         rax,rcx
  0000000000000426: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  000000000000042E: C6 44 24 26 00     mov         byte ptr [rsp+26h],0
  0000000000000433: 0F B6 44 24 26     movzx       eax,byte ptr [rsp+26h]
  0000000000000438: 0F B6 C0           movzx       eax,al
  000000000000043B: 85 C0              test        eax,eax
  000000000000043D: 74 11              je          0000000000000450
  000000000000043F: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  0000000000000447: 0F B6 4C 24 21     movzx       ecx,byte ptr [rsp+21h]
  000000000000044C: 88 08              mov         byte ptr [rax],cl
  000000000000044E: EB 0F              jmp         000000000000045F
  0000000000000450: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  0000000000000458: 0F B6 4C 24 21     movzx       ecx,byte ptr [rsp+21h]
  000000000000045D: 88 08              mov         byte ptr [rax],cl
  000000000000045F: 48 81 C4 28 01 00  add         rsp,128h
                    00
  0000000000000466: C3                 ret

??$_Construct_n@AEBN@?$vector@NV?$allocator@N@std@@@std@@AEAAX_KAEBN@Z (private: void __cdecl std::vector<double,class std::allocator<double> >::_Construct_n<double const &>(unsigned __int64,double const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 58        sub         rsp,58h
  0000000000000013: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000018: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000001D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000022: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000027: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000002C: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000031: 48 8D 05 00 00 00  lea         rax,[?_Fake_alloc@std@@3U_Fake_allocator@1@B]
                    00
  0000000000000038: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000003D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000042: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000047: 48 83 7C 24 68 00  cmp         qword ptr [rsp+68h],0
  000000000000004D: 74 5A              je          00000000000000A9
  000000000000004F: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  0000000000000054: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000059: E8 00 00 00 00     call        ?_Buy_nonzero@?$vector@NV?$allocator@N@std@@@std@@AEAAX_K@Z
  000000000000005E: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000063: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000068: 4C 8B 4C 24 40     mov         r9,qword ptr [rsp+40h]
  000000000000006D: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000072: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  0000000000000077: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000007C: 48 8B 08           mov         rcx,qword ptr [rax]
  000000000000007F: E8 00 00 00 00     call        ??$_Uninitialized_fill_n@V?$allocator@N@std@@@std@@YAPEANPEAN_KAEBNAEAV?$allocator@N@0@@Z
  0000000000000084: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000089: 48 89 41 08        mov         qword ptr [rcx+8],rax
  000000000000008D: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000096: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  000000000000009C: 74 0B              je          00000000000000A9
  000000000000009E: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  00000000000000A3: E8 00 00 00 00     call        ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AEAAXXZ
  00000000000000A8: 90                 nop
  00000000000000A9: 48 83 C4 58        add         rsp,58h
  00000000000000AD: C3                 ret

?dtor$0@?0???$_Construct_n@AEBN@?$vector@NV?$allocator@N@std@@@std@@AEAAX_KAEBN@Z@4HA (int `private: void __cdecl std::vector<double,class std::allocator<double> >::_Construct_n<double const &>(unsigned __int64,double const &)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 20        lea         rcx,[rbp+20h]
  000000000000000D: E8 00 00 00 00     call        ??1?$_Tidy_guard@V?$vector@NV?$allocator@N@std@@@std@@@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z (void __cdecl std::_Deallocate<16>(void *,unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000013: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000018: 0F B6 C0           movzx       eax,al
  000000000000001B: 85 C0              test        eax,eax
  000000000000001D: 74 0D              je          000000000000002C
  000000000000001F: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000024: E8 00 00 00 00     call        ??3@YAXPEAX@Z
  0000000000000029: 90                 nop
  000000000000002A: EB 2B              jmp         0000000000000057
  000000000000002C: 48 81 7C 24 48 00  cmp         qword ptr [rsp+48h],1000h
                    10 00 00
  0000000000000035: 72 10              jb          0000000000000047
  0000000000000037: 48 8D 54 24 48     lea         rdx,[rsp+48h]
  000000000000003C: 48 8D 4C 24 40     lea         rcx,[rsp+40h]
  0000000000000041: E8 00 00 00 00     call        ?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z
  0000000000000046: 90                 nop
  0000000000000047: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000004C: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000051: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000056: 90                 nop
  0000000000000057: 48 83 C4 38        add         rsp,38h
  000000000000005B: C3                 ret

??$_Fill_zero_memset@PEAN@std@@YAXPEAN_K@Z (void __cdecl std::_Fill_zero_memset<double *>(double *,unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 48        sub         rsp,48h
  000000000000000E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000013: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000018: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000001D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000022: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000027: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000002C: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000031: 48 C1 E0 03        shl         rax,3
  0000000000000035: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003A: 4C 8B C0           mov         r8,rax
  000000000000003D: 33 D2              xor         edx,edx
  000000000000003F: E8 00 00 00 00     call        memset
  0000000000000044: 90                 nop
  0000000000000045: 48 83 C4 48        add         rsp,48h
  0000000000000049: C3                 ret

??$_Get_index@$0A@@id@locale@std@@QEAA_KXZ (public: unsigned __int64 __cdecl std::locale::id::_Get_index<0>(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000012: 75 4B              jne         000000000000005F
  0000000000000014: 33 D2              xor         edx,edx
  0000000000000016: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000001B: FF 15 00 00 00 00  call        qword ptr [__imp_??0_Lockit@std@@QEAA@H@Z]
  0000000000000021: 90                 nop
  0000000000000022: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000027: 48 83 38 00        cmp         qword ptr [rax],0
  000000000000002B: 75 26              jne         0000000000000053
  000000000000002D: 48 8B 05 00 00 00  mov         rax,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  0000000000000034: 8B 00              mov         eax,dword ptr [rax]
  0000000000000036: FF C0              inc         eax
  0000000000000038: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  000000000000003F: 89 01              mov         dword ptr [rcx],eax
  0000000000000041: 48 8B 05 00 00 00  mov         rax,qword ptr [__imp_?_Id_cnt@id@locale@std@@0HA]
                    00
  0000000000000048: 48 63 00           movsxd      rax,dword ptr [rax]
  000000000000004B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000050: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000053: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  0000000000000058: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  000000000000005E: 90                 nop
  000000000000005F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000064: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000067: 48 83 C4 38        add         rsp,38h
  000000000000006B: C3                 ret

??$_Getvals@_W@?$time_get@DV?$istreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z (protected: void __cdecl std::time_get<char,class std::istreambuf_iterator<char,struct std::char_traits<char> > >::_Getvals<wchar_t>(wchar_t,class std::_Locinfo const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 66 89 54 24 10     mov         word ptr [rsp+10h],dx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 56                 push        rsi
  0000000000000010: 57                 push        rdi
  0000000000000011: 48 83 EC 68        sub         rsp,68h
  0000000000000015: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000001C: 48 33 C4           xor         rax,rsp
  000000000000001F: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000024: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000029: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ]
  0000000000000037: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000003F: 48 8D 79 2C        lea         rdi,[rcx+2Ch]
  0000000000000043: 48 8B F0           mov         rsi,rax
  0000000000000046: B9 2C 00 00 00     mov         ecx,2Ch
  000000000000004B: F3 A4              rep movs    byte ptr [rdi],byte ptr [rsi]
  000000000000004D: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000055: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ]
  000000000000005B: 48 8B C8           mov         rcx,rax
  000000000000005E: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000063: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000006B: 48 89 41 10        mov         qword ptr [rcx+10h],rax
  000000000000006F: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ]
  000000000000007D: 48 8B C8           mov         rcx,rax
  0000000000000080: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000085: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000008D: 48 89 41 18        mov         qword ptr [rcx+18h],rax
  0000000000000091: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@]
                    00
  0000000000000098: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  000000000000009D: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000000A5: 48 89 41 20        mov         qword ptr [rcx+20h],rax
  00000000000000A9: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000AE: 48 33 CC           xor         rcx,rsp
  00000000000000B1: E8 00 00 00 00     call        __security_check_cookie
  00000000000000B6: 48 83 C4 68        add         rsp,68h
  00000000000000BA: 5F                 pop         rdi
  00000000000000BB: 5E                 pop         rsi
  00000000000000BC: C3                 ret

??$_Getvals@_W@?$time_get@_WV?$istreambuf_iterator@_WU?$char_traits@_W@std@@@std@@@std@@IEAAX_WAEBV_Locinfo@1@@Z (protected: void __cdecl std::time_get<wchar_t,class std::istreambuf_iterator<wchar_t,struct std::char_traits<wchar_t> > >::_Getvals<wchar_t>(wchar_t,class std::_Locinfo const &)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 66 89 54 24 10     mov         word ptr [rsp+10h],dx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 56                 push        rsi
  0000000000000010: 57                 push        rdi
  0000000000000011: 48 83 EC 68        sub         rsp,68h
  0000000000000015: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  000000000000001C: 48 33 C4           xor         rax,rsp
  000000000000001F: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000024: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  0000000000000029: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcvt@_Locinfo@std@@QEBA?AU_Cvtvec@@XZ]
  0000000000000037: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000003F: 48 8D 79 2C        lea         rdi,[rcx+2Ch]
  0000000000000043: 48 8B F0           mov         rsi,rax
  0000000000000046: B9 2C 00 00 00     mov         ecx,2Ch
  000000000000004B: F3 A4              rep movs    byte ptr [rdi],byte ptr [rsi]
  000000000000004D: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000055: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getdays@_Locinfo@std@@QEBAPEBGXZ]
  000000000000005B: 48 8B C8           mov         rcx,rax
  000000000000005E: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000063: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000006B: 48 89 41 10        mov         qword ptr [rcx+10h],rax
  000000000000006F: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  0000000000000077: FF 15 00 00 00 00  call        qword ptr [__imp_?_W_Getmonths@_Locinfo@std@@QEBAPEBGXZ]
  000000000000007D: 48 8B C8           mov         rcx,rax
  0000000000000080: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  0000000000000085: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  000000000000008D: 48 89 41 18        mov         qword ptr [rcx+18h],rax
  0000000000000091: 48 8D 0D 00 00 00  lea         rcx,[??_C@_1BK@MHIKGOKE@?$AA?3?$AAA?$AAM?$AA?3?$AAa?$AAm?$AA?3?$AAP?$AAM?$AA?3?$AAp?$AAm@]
                    00
  0000000000000098: E8 00 00 00 00     call        ?_Maklocwcs@std@@YAPEA_WPEB_W@Z
  000000000000009D: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000000A5: 48 89 41 20        mov         qword ptr [rcx+20h],rax
  00000000000000A9: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000AE: 48 33 CC           xor         rcx,rsp
  00000000000000B1: E8 00 00 00 00     call        __security_check_cookie
  00000000000000B6: 48 83 C4 68        add         rsp,68h
  00000000000000BA: 5F                 pop         rdi
  00000000000000BB: 5E                 pop         rsi
  00000000000000BC: C3                 ret

??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class std::basic_ostream<char,struct std::char_traits<char> > &,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  0000000000000016: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  000000000000001E: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000026: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000029: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000002D: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000035: 48 03 C8           add         rcx,rax
  0000000000000038: 48 8B C1           mov         rax,rcx
  000000000000003B: 48 8B C8           mov         rcx,rax
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  0000000000000044: 48 85 C0           test        rax,rax
  0000000000000047: 7E 30              jle         0000000000000079
  0000000000000049: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000051: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000054: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000058: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000060: 48 03 C8           add         rcx,rax
  0000000000000063: 48 8B C1           mov         rax,rcx
  0000000000000066: 48 8B C8           mov         rcx,rax
  0000000000000069: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  000000000000006F: 48 3B 84 24 D0 00  cmp         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000077: 77 0B              ja          0000000000000084
  0000000000000079: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000082: EB 33              jmp         00000000000000B7
  0000000000000084: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000008C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000008F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000093: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000009B: 48 03 C8           add         rcx,rax
  000000000000009E: 48 8B C1           mov         rax,rcx
  00000000000000A1: 48 8B C8           mov         rcx,rax
  00000000000000A4: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEBA_JXZ]
  00000000000000AA: 48 2B 84 24 D0 00  sub         rax,qword ptr [rsp+0D0h]
                    00 00
  00000000000000B2: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000B7: 48 8B 94 24 C0 00  mov         rdx,qword ptr [rsp+0C0h]
                    00 00
  00000000000000BF: 48 8D 8C 24 A0 00  lea         rcx,[rsp+0A0h]
                    00 00
  00000000000000C7: E8 00 00 00 00     call        ??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  00000000000000CC: 90                 nop
  00000000000000CD: 0F B6 84 24 A8 00  movzx       eax,byte ptr [rsp+0A8h]
                    00 00
  00000000000000D5: 88 44 24 24        mov         byte ptr [rsp+24h],al
  00000000000000D9: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  00000000000000DE: 0F B6 C0           movzx       eax,al
  00000000000000E1: 85 C0              test        eax,eax
  00000000000000E3: 75 10              jne         00000000000000F5
  00000000000000E5: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000000E9: 83 C8 04           or          eax,4
  00000000000000EC: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  00000000000000F0: E9 9B 02 00 00     jmp         $LN24
  00000000000000F5: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000FD: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000100: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000104: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000010C: 48 03 C8           add         rcx,rax
  000000000000010F: 48 8B C1           mov         rax,rcx
  0000000000000112: 48 8B C8           mov         rcx,rax
  0000000000000115: FF 15 00 00 00 00  call        qword ptr [__imp_?flags@ios_base@std@@QEBAHXZ]
  000000000000011B: 25 C0 01 00 00     and         eax,1C0h
  0000000000000120: 83 F8 40           cmp         eax,40h
  0000000000000123: 0F 84 DF 00 00 00  je          0000000000000208
  0000000000000129: EB 0D              jmp         0000000000000138
  000000000000012B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000130: 48 FF C8           dec         rax
  0000000000000133: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000138: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  000000000000013E: 0F 86 C4 00 00 00  jbe         0000000000000208
  0000000000000144: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000014C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000014F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000153: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000015B: 48 03 C8           add         rcx,rax
  000000000000015E: 48 8B C1           mov         rax,rcx
  0000000000000161: 48 8B C8           mov         rcx,rax
  0000000000000164: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  000000000000016A: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000016F: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000177: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000017A: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000017E: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000186: 48 03 C8           add         rcx,rax
  0000000000000189: 48 8B C1           mov         rax,rcx
  000000000000018C: 48 8B C8           mov         rcx,rax
  000000000000018F: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  0000000000000195: 88 44 24 25        mov         byte ptr [rsp+25h],al
  0000000000000199: 0F B6 54 24 25     movzx       edx,byte ptr [rsp+25h]
  000000000000019E: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000001A3: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000001A9: 89 44 24 40        mov         dword ptr [rsp+40h],eax
  00000000000001AD: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  00000000000001B1: 89 44 24 48        mov         dword ptr [rsp+48h],eax
  00000000000001B5: C7 44 24 44 FF FF  mov         dword ptr [rsp+44h],0FFFFFFFFh
                    FF FF
  00000000000001BD: 8B 44 24 44        mov         eax,dword ptr [rsp+44h]
  00000000000001C1: 89 44 24 4C        mov         dword ptr [rsp+4Ch],eax
  00000000000001C5: 8B 44 24 48        mov         eax,dword ptr [rsp+48h]
  00000000000001C9: 39 44 24 4C        cmp         dword ptr [rsp+4Ch],eax
  00000000000001CD: 75 0A              jne         00000000000001D9
  00000000000001CF: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  00000000000001D7: EB 08              jmp         00000000000001E1
  00000000000001D9: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  00000000000001E1: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  00000000000001E6: 88 44 24 26        mov         byte ptr [rsp+26h],al
  00000000000001EA: 0F B6 44 24 26     movzx       eax,byte ptr [rsp+26h]
  00000000000001EF: 0F B6 C0           movzx       eax,al
  00000000000001F2: 85 C0              test        eax,eax
  00000000000001F4: 74 0D              je          0000000000000203
  00000000000001F6: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  00000000000001FA: 83 C8 04           or          eax,4
  00000000000001FD: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000201: EB 05              jmp         0000000000000208
  0000000000000203: E9 23 FF FF FF     jmp         000000000000012B
  0000000000000208: 83 7C 24 20 00     cmp         dword ptr [rsp+20h],0
  000000000000020D: 75 6A              jne         0000000000000279
  000000000000020F: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000217: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000021A: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000021E: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000226: 48 03 C8           add         rcx,rax
  0000000000000229: 48 8B C1           mov         rax,rcx
  000000000000022C: 48 8B C8           mov         rcx,rax
  000000000000022F: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000235: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  000000000000023A: 4C 8B 84 24 D0 00  mov         r8,qword ptr [rsp+0D0h]
                    00 00
  0000000000000242: 48 8B 94 24 C8 00  mov         rdx,qword ptr [rsp+0C8h]
                    00 00
  000000000000024A: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000024F: FF 15 00 00 00 00  call        qword ptr [__imp_?sputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAA_JPEBD_J@Z]
  0000000000000255: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000025A: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000262: 48 39 44 24 70     cmp         qword ptr [rsp+70h],rax
  0000000000000267: 74 10              je          0000000000000279
  0000000000000269: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000026D: 83 C8 04           or          eax,4
  0000000000000270: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000274: E9 DF 00 00 00     jmp         0000000000000358
  0000000000000279: EB 0D              jmp         0000000000000288
  000000000000027B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000280: 48 FF C8           dec         rax
  0000000000000283: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000288: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  000000000000028E: 0F 86 C4 00 00 00  jbe         0000000000000358
  0000000000000294: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000029C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000029F: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002A3: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000002AB: 48 03 C8           add         rcx,rax
  00000000000002AE: 48 8B C1           mov         rax,rcx
  00000000000002B1: 48 8B C8           mov         rcx,rax
  00000000000002B4: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000002BA: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  00000000000002BF: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000002C7: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000002CA: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000002CE: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000002D6: 48 03 C8           add         rcx,rax
  00000000000002D9: 48 8B C1           mov         rax,rcx
  00000000000002DC: 48 8B C8           mov         rcx,rax
  00000000000002DF: FF 15 00 00 00 00  call        qword ptr [__imp_?fill@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADXZ]
  00000000000002E5: 88 44 24 27        mov         byte ptr [rsp+27h],al
  00000000000002E9: 0F B6 54 24 27     movzx       edx,byte ptr [rsp+27h]
  00000000000002EE: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  00000000000002F3: FF 15 00 00 00 00  call        qword ptr [__imp_?sputc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHD@Z]
  00000000000002F9: 89 44 24 50        mov         dword ptr [rsp+50h],eax
  00000000000002FD: 8B 44 24 50        mov         eax,dword ptr [rsp+50h]
  0000000000000301: 89 44 24 58        mov         dword ptr [rsp+58h],eax
  0000000000000305: C7 44 24 54 FF FF  mov         dword ptr [rsp+54h],0FFFFFFFFh
                    FF FF
  000000000000030D: 8B 44 24 54        mov         eax,dword ptr [rsp+54h]
  0000000000000311: 89 44 24 5C        mov         dword ptr [rsp+5Ch],eax
  0000000000000315: 8B 44 24 58        mov         eax,dword ptr [rsp+58h]
  0000000000000319: 39 44 24 5C        cmp         dword ptr [rsp+5Ch],eax
  000000000000031D: 75 0A              jne         0000000000000329
  000000000000031F: C7 44 24 3C 01 00  mov         dword ptr [rsp+3Ch],1
                    00 00
  0000000000000327: EB 08              jmp         0000000000000331
  0000000000000329: C7 44 24 3C 00 00  mov         dword ptr [rsp+3Ch],0
                    00 00
  0000000000000331: 0F B6 44 24 3C     movzx       eax,byte ptr [rsp+3Ch]
  0000000000000336: 88 44 24 28        mov         byte ptr [rsp+28h],al
  000000000000033A: 0F B6 44 24 28     movzx       eax,byte ptr [rsp+28h]
  000000000000033F: 0F B6 C0           movzx       eax,al
  0000000000000342: 85 C0              test        eax,eax
  0000000000000344: 74 0D              je          0000000000000353
  0000000000000346: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  000000000000034A: 83 C8 04           or          eax,4
  000000000000034D: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000351: EB 05              jmp         0000000000000358
  0000000000000353: E9 23 FF FF FF     jmp         000000000000027B
  0000000000000358: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000360: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000363: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000367: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000036F: 48 03 C8           add         rcx,rax
  0000000000000372: 48 8B C1           mov         rax,rcx
  0000000000000375: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000037D: 33 D2              xor         edx,edx
  000000000000037F: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  0000000000000387: FF 15 00 00 00 00  call        qword ptr [__imp_?width@ios_base@std@@QEAA_J_J@Z]
  000000000000038D: 90                 nop
  000000000000038E: EB 00              jmp         $LN24
$LN24:
  0000000000000390: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000398: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000039B: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000039F: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000003A7: 48 03 C8           add         rcx,rax
  00000000000003AA: 48 8B C1           mov         rax,rcx
  00000000000003AD: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  00000000000003B5: 45 33 C0           xor         r8d,r8d
  00000000000003B8: 8B 54 24 20        mov         edx,dword ptr [rsp+20h]
  00000000000003BC: 48 8B 8C 24 90 00  mov         rcx,qword ptr [rsp+90h]
                    00 00
  00000000000003C4: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  00000000000003CA: 90                 nop
  00000000000003CB: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000003D3: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000003DB: 48 8D 8C 24 A0 00  lea         rcx,[rsp+0A0h]
                    00 00
  00000000000003E3: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00000000000003E8: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  00000000000003F0: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  00000000000003F7: C3                 ret

?dtor$0@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA (int `class dtor$0::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class dtor$0::std &,char const * const,unsigned __int64)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 8D A0 00 00  lea         rcx,[rbp+0A0h]
                    00
  0000000000000010: E8 00 00 00 00     call        ??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5D                 pop         rbp
  000000000000001A: C3                 ret

?catch$9@?0???$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z@4HA (int `class catch$9::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::_Insert_string<char,struct std::char_traits<char>,unsigned __int64>(class catch$9::std &,char const * const,unsigned __int64)'::`1'::catch$9):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 55                 push        rbp
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B EA           mov         rbp,rdx
__catch$??$_Insert_string@DU?$char_traits@D@std@@_K@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@QEBD_K@Z$0:
  000000000000000D: 48 8B 85 C0 00 00  mov         rax,qword ptr [rbp+0C0h]
                    00
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001B: 48 8B 8D C0 00 00  mov         rcx,qword ptr [rbp+0C0h]
                    00
  0000000000000022: 48 03 C8           add         rcx,rax
  0000000000000025: 48 8B C1           mov         rax,rcx
  0000000000000028: 48 89 85 88 00 00  mov         qword ptr [rbp+88h],rax
                    00
  000000000000002F: 41 B0 01           mov         r8b,1
  0000000000000032: BA 04 00 00 00     mov         edx,4
  0000000000000037: 48 8B 8D 88 00 00  mov         rcx,qword ptr [rbp+88h]
                    00
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000044: 90                 nop
  0000000000000045: 48 8D 05 00 00 00  lea         rax,[$LN24]
                    00
  000000000000004C: 48 83 C4 20        add         rsp,20h
  0000000000000050: 5D                 pop         rbp
  0000000000000051: C3                 ret
  0000000000000052: CC                 int         3

??$_Is_all_bits_zero@N@std@@YA_NAEBN@Z (bool __cdecl std::_Is_all_bits_zero<double>(double const &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 0F 57 C0           xorps       xmm0,xmm0
  000000000000000C: F2 0F 11 44 24 28  movsd       mmword ptr [rsp+28h],xmm0
  0000000000000012: 41 B8 08 00 00 00  mov         r8d,8
  0000000000000018: 48 8D 54 24 28     lea         rdx,[rsp+28h]
  000000000000001D: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000022: E8 00 00 00 00     call        memcmp
  0000000000000027: 85 C0              test        eax,eax
  0000000000000029: 75 0A              jne         0000000000000035
  000000000000002B: C7 44 24 20 01 00  mov         dword ptr [rsp+20h],1
                    00 00
  0000000000000033: EB 08              jmp         000000000000003D
  0000000000000035: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  000000000000003D: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000042: 48 83 C4 38        add         rsp,38h
  0000000000000046: C3                 ret

??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z (private: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Reallocate_grow_by<class `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>,char>(unsigned __int64,class `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>,char)):
  0000000000000000: 44 88 4C 24 20     mov         byte ptr [rsp+20h],r9b
  0000000000000005: 44 88 44 24 18     mov         byte ptr [rsp+18h],r8b
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 81 EC 08 01 00  sub         rsp,108h
                    00
  000000000000001B: 48 8B 84 24 10 01  mov         rax,qword ptr [rsp+110h]
                    00 00
  0000000000000023: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000028: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000002D: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000031: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000036: 48 8B 8C 24 10 01  mov         rcx,qword ptr [rsp+110h]
                    00 00
  000000000000003E: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000043: 48 2B 44 24 40     sub         rax,qword ptr [rsp+40h]
  0000000000000048: 48 3B 84 24 18 01  cmp         rax,qword ptr [rsp+118h]
                    00 00
  0000000000000050: 73 06              jae         0000000000000058
  0000000000000052: E8 00 00 00 00     call        ?_Xlen_string@std@@YAXXZ
  0000000000000057: 90                 nop
  0000000000000058: 48 8B 84 24 18 01  mov         rax,qword ptr [rsp+118h]
                    00 00
  0000000000000060: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000065: 48 03 C8           add         rcx,rax
  0000000000000068: 48 8B C1           mov         rax,rcx
  000000000000006B: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000070: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000075: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000079: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000007E: 48 8B 8C 24 10 01  mov         rcx,qword ptr [rsp+110h]
                    00 00
  0000000000000086: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  000000000000008B: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000093: 48 8B 84 24 10 01  mov         rax,qword ptr [rsp+110h]
                    00 00
  000000000000009B: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000009F: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  00000000000000A7: 4C 8B 84 24 80 00  mov         r8,qword ptr [rsp+80h]
                    00 00
  00000000000000AF: 48 8B 94 24 88 00  mov         rdx,qword ptr [rsp+88h]
                    00 00
  00000000000000B7: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000BC: E8 00 00 00 00     call        ?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z
  00000000000000C1: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  00000000000000C9: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  00000000000000D1: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000D6: 48 8B 84 24 10 01  mov         rax,qword ptr [rsp+110h]
                    00 00
  00000000000000DE: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000000E6: 48 8B 84 24 98 00  mov         rax,qword ptr [rsp+98h]
                    00 00
  00000000000000EE: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  00000000000000F6: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000000FE: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  0000000000000106: 48 8D 54 24 58     lea         rdx,[rsp+58h]
  000000000000010B: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000113: E8 00 00 00 00     call        ??$_Allocate_for_capacity@$0A@@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CAPEADAEAV?$allocator@D@1@AEA_K@Z
  0000000000000118: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000011D: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000122: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000127: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000012B: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000130: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000135: 48 89 48 18        mov         qword ptr [rax+18h],rcx
  0000000000000139: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000013E: 48 89 84 24 B0 00  mov         qword ptr [rsp+0B0h],rax
                    00 00
  0000000000000146: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000014E: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  0000000000000156: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  000000000000015E: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000163: 48 83 7C 24 60 0F  cmp         qword ptr [rsp+60h],0Fh
  0000000000000169: 76 70              jbe         00000000000001DB
  000000000000016B: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000170: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000173: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000178: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000017D: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  0000000000000185: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000018D: 0F B6 8C 24 28 01  movzx       ecx,byte ptr [rsp+128h]
                    00 00
  0000000000000195: 88 4C 24 20        mov         byte ptr [rsp+20h],cl
  0000000000000199: 4C 8B 4C 24 40     mov         r9,qword ptr [rsp+40h]
  000000000000019E: 4C 8B C0           mov         r8,rax
  00000000000001A1: 48 8B 54 24 70     mov         rdx,qword ptr [rsp+70h]
  00000000000001A6: 48 8D 8C 24 20 01  lea         rcx,[rsp+120h]
                    00 00
  00000000000001AE: E8 00 00 00 00     call        ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
  00000000000001B3: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000001B8: 48 FF C0           inc         rax
  00000000000001BB: 48 8B D0           mov         rdx,rax
  00000000000001BE: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000001C3: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  00000000000001C8: 90                 nop
  00000000000001C9: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000001CE: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000001D3: 48 89 08           mov         qword ptr [rax],rcx
  00000000000001D6: E9 C2 00 00 00     jmp         000000000000029D
  00000000000001DB: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000001E0: 0F B6 8C 24 28 01  movzx       ecx,byte ptr [rsp+128h]
                    00 00
  00000000000001E8: 88 4C 24 20        mov         byte ptr [rsp+20h],cl
  00000000000001EC: 4C 8B 4C 24 40     mov         r9,qword ptr [rsp+40h]
  00000000000001F1: 4C 8B C0           mov         r8,rax
  00000000000001F4: 48 8B 54 24 70     mov         rdx,qword ptr [rsp+70h]
  00000000000001F9: 48 8D 8C 24 20 01  lea         rcx,[rsp+120h]
                    00 00
  0000000000000201: E8 00 00 00 00     call        ??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z
  0000000000000206: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000020B: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000210: C6 44 24 30 00     mov         byte ptr [rsp+30h],0
  0000000000000215: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  000000000000021A: 0F B6 C0           movzx       eax,al
  000000000000021D: 85 C0              test        eax,eax
  000000000000021F: 74 3F              je          0000000000000260
  0000000000000221: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000226: 48 89 84 24 C8 00  mov         qword ptr [rsp+0C8h],rax
                    00 00
  000000000000022E: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  0000000000000236: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  000000000000023E: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000246: 48 89 84 24 D8 00  mov         qword ptr [rsp+0D8h],rax
                    00 00
  000000000000024E: 48 8B 84 24 D8 00  mov         rax,qword ptr [rsp+0D8h]
                    00 00
  0000000000000256: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000025B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000025E: EB 3D              jmp         000000000000029D
  0000000000000260: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000265: 48 89 84 24 E0 00  mov         qword ptr [rsp+0E0h],rax
                    00 00
  000000000000026D: 48 8B 84 24 E0 00  mov         rax,qword ptr [rsp+0E0h]
                    00 00
  0000000000000275: 48 89 84 24 E8 00  mov         qword ptr [rsp+0E8h],rax
                    00 00
  000000000000027D: 48 8B 84 24 E8 00  mov         rax,qword ptr [rsp+0E8h]
                    00 00
  0000000000000285: 48 89 84 24 F0 00  mov         qword ptr [rsp+0F0h],rax
                    00 00
  000000000000028D: 48 8B 84 24 F0 00  mov         rax,qword ptr [rsp+0F0h]
                    00 00
  0000000000000295: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000029A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000029D: 48 8B 84 24 10 01  mov         rax,qword ptr [rsp+110h]
                    00 00
  00000000000002A5: 48 81 C4 08 01 00  add         rsp,108h
                    00
  00000000000002AC: C3                 ret

??$_Search_vectorized@$$CBD$$CBD@std@@YAPEBDQEBD00_K@Z (char const * __cdecl std::_Search_vectorized<char const ,char const >(char const * const,char const * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 28        sub         rsp,28h
  0000000000000018: 4C 8B 4C 24 48     mov         r9,qword ptr [rsp+48h]
  000000000000001D: 4C 8B 44 24 40     mov         r8,qword ptr [rsp+40h]
  0000000000000022: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000027: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002C: E8 00 00 00 00     call        __std_search_1
  0000000000000031: 48 83 C4 28        add         rsp,28h
  0000000000000035: C3                 ret

??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z (unsigned __int64 __cdecl std::_Traits_find<struct std::char_traits<char> >(char const * const,unsigned __int64,unsigned __int64,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 58        sub         rsp,58h
  0000000000000018: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000001D: 48 39 84 24 80 00  cmp         qword ptr [rsp+80h],rax
                    00 00
  0000000000000025: 77 1A              ja          0000000000000041
  0000000000000027: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  000000000000002F: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  0000000000000034: 48 2B C8           sub         rcx,rax
  0000000000000037: 48 8B C1           mov         rax,rcx
  000000000000003A: 48 39 44 24 70     cmp         qword ptr [rsp+70h],rax
  000000000000003F: 76 0C              jbe         000000000000004D
  0000000000000041: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  0000000000000048: E9 60 01 00 00     jmp         00000000000001AD
  000000000000004D: 48 83 BC 24 80 00  cmp         qword ptr [rsp+80h],0
                    00 00 00
  0000000000000056: 75 0A              jne         0000000000000062
  0000000000000058: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000005D: E9 4B 01 00 00     jmp         00000000000001AD
  0000000000000062: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000067: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000006C: 0F B6 C0           movzx       eax,al
  000000000000006F: 85 C0              test        eax,eax
  0000000000000071: 75 73              jne         00000000000000E6
  0000000000000073: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000078: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000007D: 48 03 C8           add         rcx,rax
  0000000000000080: 48 8B C1           mov         rax,rcx
  0000000000000083: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000088: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000008D: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000092: 48 03 C8           add         rcx,rax
  0000000000000095: 48 8B C1           mov         rax,rcx
  0000000000000098: 4C 8B 8C 24 80 00  mov         r9,qword ptr [rsp+80h]
                    00 00
  00000000000000A0: 4C 8B 44 24 78     mov         r8,qword ptr [rsp+78h]
  00000000000000A5: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  00000000000000AA: 48 8B C8           mov         rcx,rax
  00000000000000AD: E8 00 00 00 00     call        ??$_Search_vectorized@$$CBD$$CBD@std@@YAPEBDQEBD00_K@Z
  00000000000000B2: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000B7: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000BC: 48 39 44 24 38     cmp         qword ptr [rsp+38h],rax
  00000000000000C1: 74 17              je          00000000000000DA
  00000000000000C3: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000C8: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000CD: 48 2B C8           sub         rcx,rax
  00000000000000D0: 48 8B C1           mov         rax,rcx
  00000000000000D3: E9 D5 00 00 00     jmp         00000000000001AD
  00000000000000D8: EB 0C              jmp         00000000000000E6
  00000000000000DA: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  00000000000000E1: E9 C7 00 00 00     jmp         00000000000001AD
  00000000000000E6: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  00000000000000EE: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000000F3: 48 2B C8           sub         rcx,rax
  00000000000000F6: 48 8B C1           mov         rax,rcx
  00000000000000F9: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000FE: 48 8D 44 01 01     lea         rax,[rcx+rax+1]
  0000000000000103: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000108: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000010D: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000112: 48 03 C8           add         rcx,rax
  0000000000000115: 48 8B C1           mov         rax,rcx
  0000000000000118: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000011D: EB 0D              jmp         000000000000012C
  000000000000011F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000124: 48 FF C0           inc         rax
  0000000000000127: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000012C: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000131: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000136: 48 2B C8           sub         rcx,rax
  0000000000000139: 48 8B C1           mov         rax,rcx
  000000000000013C: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  0000000000000141: 0F BE 09           movsx       ecx,byte ptr [rcx]
  0000000000000144: 4C 8B C0           mov         r8,rax
  0000000000000147: 8B D1              mov         edx,ecx
  0000000000000149: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000014E: E8 00 00 00 00     call        memchr
  0000000000000153: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000158: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000015D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000162: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000168: 75 09              jne         0000000000000173
  000000000000016A: 48 C7 C0 FF FF FF  mov         rax,0FFFFFFFFFFFFFFFFh
                    FF
  0000000000000171: EB 3A              jmp         00000000000001AD
  0000000000000173: 4C 8B 84 24 80 00  mov         r8,qword ptr [rsp+80h]
                    00 00
  000000000000017B: 48 8B 54 24 78     mov         rdx,qword ptr [rsp+78h]
  0000000000000180: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000185: E8 00 00 00 00     call        memcmp
  000000000000018A: 89 44 24 24        mov         dword ptr [rsp+24h],eax
  000000000000018E: 8B 44 24 24        mov         eax,dword ptr [rsp+24h]
  0000000000000192: 85 C0              test        eax,eax
  0000000000000194: 75 12              jne         00000000000001A8
  0000000000000196: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000019B: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000001A0: 48 2B C8           sub         rcx,rax
  00000000000001A3: 48 8B C1           mov         rax,rcx
  00000000000001A6: EB 05              jmp         00000000000001AD
  00000000000001A8: E9 72 FF FF FF     jmp         000000000000011F
  00000000000001AD: 48 83 C4 58        add         rsp,58h
  00000000000001B1: C3                 ret

??$_Uninitialized_fill_n@V?$allocator@N@std@@@std@@YAPEANPEAN_KAEBNAEAV?$allocator@N@0@@Z (double * __cdecl std::_Uninitialized_fill_n<class std::allocator<double> >(double *,unsigned __int64,double const &,class std::allocator<double> &)):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 81 EC A8 00 00  sub         rsp,0A8h
                    00
  000000000000001B: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000020: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000025: 0F B6 C0           movzx       eax,al
  0000000000000028: 85 C0              test        eax,eax
  000000000000002A: 75 4F              jne         000000000000007B
  000000000000002C: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000034: E8 00 00 00 00     call        ??$_Is_all_bits_zero@N@std@@YA_NAEBN@Z
  0000000000000039: 0F B6 C0           movzx       eax,al
  000000000000003C: 85 C0              test        eax,eax
  000000000000003E: 74 3B              je          000000000000007B
  0000000000000040: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000048: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000004D: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000052: 48 8B 94 24 B8 00  mov         rdx,qword ptr [rsp+0B8h]
                    00 00
  000000000000005A: 48 8B C8           mov         rcx,rax
  000000000000005D: E8 00 00 00 00     call        ??$_Fill_zero_memset@PEAN@std@@YAXPEAN_K@Z
  0000000000000062: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000006A: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000072: 48 8D 04 C8        lea         rax,[rax+rcx*8]
  0000000000000076: E9 F8 00 00 00     jmp         0000000000000173
  000000000000007B: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000083: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000088: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000090: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000095: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  000000000000009D: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000A2: EB 13              jmp         00000000000000B7
  00000000000000A4: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  00000000000000AC: 48 FF C8           dec         rax
  00000000000000AF: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  00000000000000B7: 48 83 BC 24 B8 00  cmp         qword ptr [rsp+0B8h],0
                    00 00 00
  00000000000000C0: 76 67              jbe         0000000000000129
  00000000000000C2: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000C7: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000CC: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000D1: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000D6: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000DB: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000E0: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000E5: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  00000000000000ED: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000F2: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000F7: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000FC: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000101: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000106: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000010E: F2 0F 10 01        movsd       xmm0,mmword ptr [rcx]
  0000000000000112: F2 0F 11 00        movsd       mmword ptr [rax],xmm0
  0000000000000116: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000011B: 48 83 C0 08        add         rax,8
  000000000000011F: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000124: E9 7B FF FF FF     jmp         00000000000000A4
  0000000000000129: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000012E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000133: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000138: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000013D: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000142: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000147: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000014C: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000154: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000159: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000161: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000166: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  000000000000016E: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000173: 48 81 C4 A8 00 00  add         rsp,0A8h
                    00
  000000000000017A: C3                 ret

??$duration_cast@V?$duration@NU?$ratio@$00$00@std@@@chrono@std@@_JU?$ratio@$00$0DLJKMKAA@@3@$0A@@chrono@std@@YA?AV?$duration@NU?$ratio@$00$00@std@@@01@AEBV?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@01@@Z (class std::chrono::duration<double,struct std::ratio<1,1> > __cdecl std::chrono::duration_cast<class std::chrono::duration<double,struct std::ratio<1,1> >,__int64,struct std::ratio<1,1000000000>,0>(class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 28        sub         rsp,28h
  000000000000000E: C6 04 24 01        mov         byte ptr [rsp],1
  0000000000000012: C6 44 24 01 00     mov         byte ptr [rsp+1],0
  0000000000000017: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000001C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001F: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000024: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000029: F2 48 0F 2A C0     cvtsi2sd    xmm0,rax
  000000000000002E: F2 0F 5E 05 00 00  divsd       xmm0,mmword ptr [__real@41cdcd6500000000]
                    00 00
  0000000000000036: F2 0F 11 44 24 10  movsd       mmword ptr [rsp+10h],xmm0
  000000000000003C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000041: F2 0F 10 44 24 10  movsd       xmm0,mmword ptr [rsp+10h]
  0000000000000047: F2 0F 11 00        movsd       mmword ptr [rax],xmm0
  000000000000004B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000050: 48 83 C4 28        add         rsp,28h
  0000000000000054: C3                 ret

??$endl@DU?$char_traits@D@std@@@std@@YAAEAV?$basic_ostream@DU?$char_traits@D@std@@@0@AEAV10@@Z (class std::basic_ostream<char,struct std::char_traits<char> > & __cdecl std::endl<char,struct std::char_traits<char> >(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000011: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000015: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001A: 48 03 C8           add         rcx,rax
  000000000000001D: 48 8B C1           mov         rax,rcx
  0000000000000020: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000025: B2 0A              mov         dl,0Ah
  0000000000000027: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000002C: FF 15 00 00 00 00  call        qword ptr [__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z]
  0000000000000032: 0F B6 D0           movzx       edx,al
  0000000000000035: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000003A: FF 15 00 00 00 00  call        qword ptr [__imp_?put@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@D@Z]
  0000000000000040: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000045: FF 15 00 00 00 00  call        qword ptr [__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ]
  000000000000004B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000050: 48 83 C4 38        add         rsp,38h
  0000000000000054: C3                 ret

??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z (class std::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_istream<char,struct std::char_traits<char> > &&,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)):
  0000000000000000: 44 88 44 24 18     mov         byte ptr [rsp+18h],r8b
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC A8 00 00  sub         rsp,0A8h
                    00
  0000000000000016: C7 44 24 28 00 00  mov         dword ptr [rsp+28h],0
                    00 00
  000000000000001E: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000023: 48 8B 94 24 B0 00  mov         rdx,qword ptr [rsp+0B0h]
                    00 00
  000000000000002B: 48 8D 4C 24 50     lea         rcx,[rsp+50h]
  0000000000000030: E8 00 00 00 00     call        ??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  0000000000000035: 90                 nop
  0000000000000036: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003B: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000040: B2 01              mov         dl,1
  0000000000000042: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000047: FF 15 00 00 00 00  call        qword ptr [__imp_?_Ipfx@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA_N_N@Z]
  000000000000004D: 88 44 24 58        mov         byte ptr [rsp+58h],al
  0000000000000051: 0F B6 44 24 58     movzx       eax,byte ptr [rsp+58h]
  0000000000000056: 88 44 24 21        mov         byte ptr [rsp+21h],al
  000000000000005A: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  000000000000005F: 0F B6 C0           movzx       eax,al
  0000000000000062: 85 C0              test        eax,eax
  0000000000000064: 0F 84 DF 01 00 00  je          $LN19
  000000000000006A: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  0000000000000072: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000077: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000007C: 48 83 78 10 00     cmp         qword ptr [rax+10h],0
  0000000000000081: 73 06              jae         0000000000000089
  0000000000000083: E8 00 00 00 00     call        ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
  0000000000000088: 90                 nop
  0000000000000089: 33 D2              xor         edx,edx
  000000000000008B: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000093: E8 00 00 00 00     call        ?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z
  0000000000000098: 90                 nop
  0000000000000099: 0F B6 84 24 C0 00  movzx       eax,byte ptr [rsp+0C0h]
                    00 00
  00000000000000A1: 89 44 24 38        mov         dword ptr [rsp+38h],eax
  00000000000000A5: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  00000000000000A9: 89 44 24 48        mov         dword ptr [rsp+48h],eax
  00000000000000AD: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000000B5: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000B8: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000BC: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  00000000000000C4: 48 03 C8           add         rcx,rax
  00000000000000C7: 48 8B C1           mov         rax,rcx
  00000000000000CA: 48 8B C8           mov         rcx,rax
  00000000000000CD: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000000D3: 48 8B C8           mov         rcx,rax
  00000000000000D6: FF 15 00 00 00 00  call        qword ptr [__imp_?sgetc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  00000000000000DC: 89 44 24 3C        mov         dword ptr [rsp+3Ch],eax
  00000000000000E0: 8B 44 24 3C        mov         eax,dword ptr [rsp+3Ch]
  00000000000000E4: 89 44 24 2C        mov         dword ptr [rsp+2Ch],eax
  00000000000000E8: EB 3B              jmp         0000000000000125
  00000000000000EA: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000000F2: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000F5: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000F9: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  0000000000000101: 48 03 C8           add         rcx,rax
  0000000000000104: 48 8B C1           mov         rax,rcx
  0000000000000107: 48 8B C8           mov         rcx,rax
  000000000000010A: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000110: 48 8B C8           mov         rcx,rax
  0000000000000113: FF 15 00 00 00 00  call        qword ptr [__imp_?snextc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  0000000000000119: 89 44 24 40        mov         dword ptr [rsp+40h],eax
  000000000000011D: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  0000000000000121: 89 44 24 2C        mov         dword ptr [rsp+2Ch],eax
  0000000000000125: C7 44 24 44 FF FF  mov         dword ptr [rsp+44h],0FFFFFFFFh
                    FF FF
  000000000000012D: 8B 44 24 44        mov         eax,dword ptr [rsp+44h]
  0000000000000131: 3B 44 24 2C        cmp         eax,dword ptr [rsp+2Ch]
  0000000000000135: 75 0A              jne         0000000000000141
  0000000000000137: C7 44 24 30 01 00  mov         dword ptr [rsp+30h],1
                    00 00
  000000000000013F: EB 08              jmp         0000000000000149
  0000000000000141: C7 44 24 30 00 00  mov         dword ptr [rsp+30h],0
                    00 00
  0000000000000149: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  000000000000014E: 88 44 24 22        mov         byte ptr [rsp+22h],al
  0000000000000152: 0F B6 44 24 22     movzx       eax,byte ptr [rsp+22h]
  0000000000000157: 0F B6 C0           movzx       eax,al
  000000000000015A: 85 C0              test        eax,eax
  000000000000015C: 74 15              je          0000000000000173
  000000000000015E: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000162: 83 C8 01           or          eax,1
  0000000000000165: 89 44 24 28        mov         dword ptr [rsp+28h],eax
  0000000000000169: E9 D9 00 00 00     jmp         0000000000000247
  000000000000016E: E9 CF 00 00 00     jmp         0000000000000242
  0000000000000173: 8B 44 24 48        mov         eax,dword ptr [rsp+48h]
  0000000000000177: 39 44 24 2C        cmp         dword ptr [rsp+2Ch],eax
  000000000000017B: 75 0A              jne         0000000000000187
  000000000000017D: C7 44 24 34 01 00  mov         dword ptr [rsp+34h],1
                    00 00
  0000000000000185: EB 08              jmp         000000000000018F
  0000000000000187: C7 44 24 34 00 00  mov         dword ptr [rsp+34h],0
                    00 00
  000000000000018F: 0F B6 44 24 34     movzx       eax,byte ptr [rsp+34h]
  0000000000000194: 88 44 24 23        mov         byte ptr [rsp+23h],al
  0000000000000198: 0F B6 44 24 23     movzx       eax,byte ptr [rsp+23h]
  000000000000019D: 0F B6 C0           movzx       eax,al
  00000000000001A0: 85 C0              test        eax,eax
  00000000000001A2: 74 39              je          00000000000001DD
  00000000000001A4: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  00000000000001A9: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000001B1: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000001B4: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000001B8: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  00000000000001C0: 48 03 C8           add         rcx,rax
  00000000000001C3: 48 8B C1           mov         rax,rcx
  00000000000001C6: 48 8B C8           mov         rcx,rax
  00000000000001C9: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  00000000000001CF: 48 8B C8           mov         rcx,rax
  00000000000001D2: FF 15 00 00 00 00  call        qword ptr [__imp_?sbumpc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEAAHXZ]
  00000000000001D8: 90                 nop
  00000000000001D9: EB 6C              jmp         0000000000000247
  00000000000001DB: EB 65              jmp         0000000000000242
  00000000000001DD: 48 8B 84 24 B8 00  mov         rax,qword ptr [rsp+0B8h]
                    00 00
  00000000000001E5: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  00000000000001E9: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000001EE: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000001F3: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  00000000000001F8: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000200: E8 00 00 00 00     call        ?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ
  0000000000000205: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  000000000000020A: 48 3B C1           cmp         rax,rcx
  000000000000020D: 77 0F              ja          000000000000021E
  000000000000020F: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000213: 83 C8 02           or          eax,2
  0000000000000216: 89 44 24 28        mov         dword ptr [rsp+28h],eax
  000000000000021A: EB 2B              jmp         0000000000000247
  000000000000021C: EB 24              jmp         0000000000000242
  000000000000021E: 0F B6 44 24 2C     movzx       eax,byte ptr [rsp+2Ch]
  0000000000000223: 88 44 24 24        mov         byte ptr [rsp+24h],al
  0000000000000227: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  000000000000022C: 0F B6 D0           movzx       edx,al
  000000000000022F: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  0000000000000237: E8 00 00 00 00     call        ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
  000000000000023C: 90                 nop
  000000000000023D: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  0000000000000242: E9 A3 FE FF FF     jmp         00000000000000EA
  0000000000000247: EB 00              jmp         $LN19
$LN19:
  0000000000000249: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000024E: 85 C0              test        eax,eax
  0000000000000250: 75 0B              jne         000000000000025D
  0000000000000252: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000256: 83 C8 02           or          eax,2
  0000000000000259: 89 44 24 28        mov         dword ptr [rsp+28h],eax
  000000000000025D: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000265: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000268: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000026C: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  0000000000000274: 48 03 C8           add         rcx,rax
  0000000000000277: 48 8B C1           mov         rax,rcx
  000000000000027A: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000282: 45 33 C0           xor         r8d,r8d
  0000000000000285: 8B 54 24 28        mov         edx,dword ptr [rsp+28h]
  0000000000000289: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  0000000000000291: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000297: 90                 nop
  0000000000000298: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  00000000000002A0: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  00000000000002A8: 48 8D 4C 24 50     lea         rcx,[rsp+50h]
  00000000000002AD: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  00000000000002B2: 90                 nop
  00000000000002B3: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  00000000000002BB: 48 81 C4 A8 00 00  add         rsp,0A8h
                    00
  00000000000002C2: C3                 ret

?dtor$0@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA (int `class dtor$0::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class dtor$0::std &&,class dtor$0::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 50        lea         rcx,[rbp+50h]
  000000000000000D: E8 00 00 00 00     call        ??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

?dtor$1@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA (int `class dtor$1::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class dtor$1::std &&,class dtor$1::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)'::`1'::dtor$1):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 50        lea         rcx,[rbp+50h]
  000000000000000D: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

?catch$50@?0???$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z@4HA (int `class catch$50::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class catch$50::std &&,class catch$50::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &,char)'::`1'::catch$50):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 55                 push        rbp
  0000000000000006: 48 83 EC 20        sub         rsp,20h
  000000000000000A: 48 8B EA           mov         rbp,rdx
__catch$??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z$0:
  000000000000000D: 48 8B 85 B0 00 00  mov         rax,qword ptr [rbp+0B0h]
                    00
  0000000000000014: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000017: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001B: 48 8B 8D B0 00 00  mov         rcx,qword ptr [rbp+0B0h]
                    00
  0000000000000022: 48 03 C8           add         rcx,rax
  0000000000000025: 48 8B C1           mov         rax,rcx
  0000000000000028: 48 89 85 80 00 00  mov         qword ptr [rbp+80h],rax
                    00
  000000000000002F: 41 B0 01           mov         r8b,1
  0000000000000032: BA 04 00 00 00     mov         edx,4
  0000000000000037: 48 8B 8D 80 00 00  mov         rcx,qword ptr [rbp+80h]
                    00
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  0000000000000044: 90                 nop
  0000000000000045: 48 8D 05 00 00 00  lea         rax,[$LN19]
                    00
  000000000000004C: 48 83 C4 20        add         rsp,20h
  0000000000000050: 5D                 pop         rbp
  0000000000000051: C3                 ret
  0000000000000052: CC                 int         3

??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@AEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@@Z (class std::basic_istream<char,struct std::char_traits<char> > & __cdecl std::getline<char,struct std::char_traits<char>,class std::allocator<char> >(class std::basic_istream<char,struct std::char_traits<char> > &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000013: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000016: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000001A: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001F: 48 03 C8           add         rcx,rax
  0000000000000022: 48 8B C1           mov         rax,rcx
  0000000000000025: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002A: B2 0A              mov         dl,0Ah
  000000000000002C: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000031: FF 15 00 00 00 00  call        qword ptr [__imp_?widen@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBADD@Z]
  0000000000000037: 44 0F B6 C0        movzx       r8d,al
  000000000000003B: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000040: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000045: E8 00 00 00 00     call        ??$getline@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@YAAEAV?$basic_istream@DU?$char_traits@D@std@@@0@$$QEAV10@AEAV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@0@D@Z
  000000000000004A: 48 83 C4 38        add         rsp,38h
  000000000000004E: C3                 ret

??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z (class std::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class std::locale const &)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC 98 00 00  sub         rsp,98h
                    00
  000000000000000C: 33 D2              xor         edx,edx
  000000000000000E: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  0000000000000013: FF 15 00 00 00 00  call        qword ptr [__imp_??0_Lockit@std@@QEAA@H@Z]
  0000000000000019: 90                 nop
  000000000000001A: 48 8B 05 00 00 00  mov         rax,qword ptr [?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB]
                    00
  0000000000000021: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000026: 48 8B 0D 00 00 00  mov         rcx,qword ptr [__imp_?id@?$codecvt@DDU_Mbstatet@@@std@@2V0locale@2@A]
                    00
  000000000000002D: E8 00 00 00 00     call        ??$_Get_index@$0A@@id@locale@std@@QEAA_KXZ
  0000000000000032: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000037: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  000000000000003C: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000044: E8 00 00 00 00     call        ?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z
  0000000000000049: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000004E: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  0000000000000054: 0F 85 DB 00 00 00  jne         0000000000000135
  000000000000005A: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000060: 74 0F              je          0000000000000071
  0000000000000062: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000067: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000006C: E9 C4 00 00 00     jmp         0000000000000135
  0000000000000071: 48 8B 94 24 A0 00  mov         rdx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000079: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000007E: FF 15 00 00 00 00  call        qword ptr [__imp_?_Getcat@?$codecvt@DDU_Mbstatet@@@std@@SA_KPEAPEBVfacet@locale@2@PEBV42@@Z]
  0000000000000084: 48 83 F8 FF        cmp         rax,0FFFFFFFFFFFFFFFFh
  0000000000000088: 75 0B              jne         0000000000000095
  000000000000008A: E8 00 00 00 00     call        ?_Throw_bad_cast@std@@YAXXZ
  000000000000008F: 90                 nop
  0000000000000090: E9 A0 00 00 00     jmp         0000000000000135
  0000000000000095: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000009A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000009F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000A4: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000A9: 48 8D 44 24 48     lea         rax,[rsp+48h]
  00000000000000AE: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000B3: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000B8: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000BD: 48 89 08           mov         qword ptr [rax],rcx
  00000000000000C0: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000C5: E8 00 00 00 00     call        ?_Facet_Register@std@@YAXPEAV_Facet_base@1@@Z
  00000000000000CA: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000CF: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000D2: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000D7: FF 50 08           call        qword ptr [rax+8]
  00000000000000DA: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000DF: 48 89 05 00 00 00  mov         qword ptr [?_Psave@?$_Facetptr@V?$codecvt@DDU_Mbstatet@@@std@@@std@@2PEBVfacet@locale@2@EB],rax
                    00
  00000000000000E6: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000EB: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000F0: 48 C7 44 24 68 00  mov         qword ptr [rsp+68h],0
                    00 00 00
  00000000000000F9: 48 8D 44 24 48     lea         rax,[rsp+48h]
  00000000000000FE: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000103: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000108: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000010B: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000110: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000115: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000011A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000011D: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000122: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000012A: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  000000000000012F: E8 00 00 00 00     call        ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
  0000000000000134: 90                 nop
  0000000000000135: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000013A: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000013F: 48 8D 4C 24 38     lea         rcx,[rsp+38h]
  0000000000000144: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  000000000000014A: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  000000000000014F: 48 81 C4 98 00 00  add         rsp,98h
                    00
  0000000000000156: C3                 ret

?dtor$0@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA (int `class dtor$0::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class dtor$0::locale const &)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 38        lea         rcx,[rbp+38h]
  000000000000000D: FF 15 00 00 00 00  call        qword ptr [__imp_??1_Lockit@std@@QEAA@XZ]
  0000000000000013: 48 83 C4 20        add         rsp,20h
  0000000000000017: 5D                 pop         rbp
  0000000000000018: C3                 ret

?dtor$1@?0???$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z@4HA (int `class dtor$1::codecvt<char,char,struct _Mbstatet> const & __cdecl std::use_facet<class std::codecvt<char,char,struct _Mbstatet> >(class dtor$1::locale const &)'::`1'::dtor$1):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 48        lea         rcx,[rbp+48h]
  000000000000000D: E8 00 00 00 00     call        ??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ (public: __cdecl std::_String_val<struct std::_Simple_types<char> >::_String_val<struct std::_Simple_types<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 83 EC 10        sub         rsp,10h
  000000000000000A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000F: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000013: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000017: 48 8B 3C 24        mov         rdi,qword ptr [rsp]
  000000000000001B: 33 C0              xor         eax,eax
  000000000000001D: B9 10 00 00 00     mov         ecx,10h
  0000000000000022: F3 AA              rep stos    byte ptr [rdi]
  0000000000000024: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000029: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  0000000000000031: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000036: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  000000000000003E: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000043: 48 83 C4 10        add         rsp,10h
  0000000000000047: 5F                 pop         rdi
  0000000000000048: C3                 ret

??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@1@HH@Z (public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 48        sub         rsp,48h
  0000000000000018: C7 44 24 30 00 00  mov         dword ptr [rsp+30h],0
                    00 00
  0000000000000020: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000025: E8 00 00 00 00     call        ?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ
  000000000000002A: 8B 4C 24 70        mov         ecx,dword ptr [rsp+70h]
  000000000000002E: 89 4C 24 20        mov         dword ptr [rsp+20h],ecx
  0000000000000032: 44 8B 4C 24 68     mov         r9d,dword ptr [rsp+68h]
  0000000000000037: 44 8B 44 24 60     mov         r8d,dword ptr [rsp+60h]
  000000000000003C: 48 8B D0           mov         rdx,rax
  000000000000003F: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000044: E8 00 00 00 00     call        ??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z
  0000000000000049: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000004E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000051: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000055: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000005A: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000061: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  0000000000000065: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000006A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000006D: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000071: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000077: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000007C: 48 8B 09           mov         rcx,qword ptr [rcx]
  000000000000007F: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  0000000000000083: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  0000000000000088: 89 44 0A FC        mov         dword ptr [rdx+rcx-4],eax
  000000000000008C: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000091: 48 83 C4 48        add         rsp,48h
  0000000000000095: C3                 ret

??0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z (public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 58        sub         rsp,58h
  0000000000000018: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000020: 83 BC 24 80 00 00  cmp         dword ptr [rsp+80h],0
                    00 00
  0000000000000028: 74 2F              je          0000000000000059
  000000000000002A: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000002F: 48 8D 0D 00 00 00  lea         rcx,[??_8?$basic_ifstream@DU?$char_traits@D@std@@@std@@7B@]
                    00
  0000000000000036: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000039: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000003E: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000044: 48 8B C8           mov         rcx,rax
  0000000000000047: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_ios@DU?$char_traits@D@std@@@std@@IEAA@XZ]
  000000000000004D: 90                 nop
  000000000000004E: 8B 44 24 20        mov         eax,dword ptr [rsp+20h]
  0000000000000052: 83 C8 01           or          eax,1
  0000000000000055: 89 44 24 20        mov         dword ptr [rsp+20h],eax
  0000000000000059: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000005E: 48 83 C0 10        add         rax,10h
  0000000000000062: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000067: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000006C: 45 33 C9           xor         r9d,r9d
  000000000000006F: 45 33 C0           xor         r8d,r8d
  0000000000000072: 48 8B D0           mov         rdx,rax
  0000000000000075: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000007A: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@PEAV?$basic_streambuf@DU?$char_traits@D@std@@@1@_N@Z]
  0000000000000080: 90                 nop
  0000000000000081: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000086: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000089: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000008D: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000092: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000099: 48 89 14 01        mov         qword ptr [rcx+rax],rdx
  000000000000009D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000A2: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A5: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000A9: 48 2D B0 00 00 00  sub         rax,0B0h
  00000000000000AF: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000B4: 48 8B 09           mov         rcx,qword ptr [rcx]
  00000000000000B7: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  00000000000000BB: 48 8B 54 24 60     mov         rdx,qword ptr [rsp+60h]
  00000000000000C0: 89 44 0A FC        mov         dword ptr [rdx+rcx-4],eax
  00000000000000C4: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000C9: 48 83 C0 10        add         rax,10h
  00000000000000CD: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000D2: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000D7: FF 15 00 00 00 00  call        qword ptr [__imp_??0?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAA@XZ]
  00000000000000DD: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000E2: 48 8D 0D 00 00 00  lea         rcx,[??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@]
                    00
  00000000000000E9: 48 89 08           mov         qword ptr [rax],rcx
  00000000000000EC: 45 33 C0           xor         r8d,r8d
  00000000000000EF: 33 D2              xor         edx,edx
  00000000000000F1: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000F6: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  00000000000000FB: 90                 nop
  00000000000000FC: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000101: 48 83 C0 10        add         rax,10h
  0000000000000105: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000010A: 8B 44 24 70        mov         eax,dword ptr [rsp+70h]
  000000000000010E: 83 C8 01           or          eax,1
  0000000000000111: 44 8B 4C 24 78     mov         r9d,dword ptr [rsp+78h]
  0000000000000116: 44 8B C0           mov         r8d,eax
  0000000000000119: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  000000000000011E: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000123: E8 00 00 00 00     call        ?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z
  0000000000000128: 48 85 C0           test        rax,rax
  000000000000012B: 75 30              jne         000000000000015D
  000000000000012D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000132: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000135: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000139: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000013E: 48 03 C8           add         rcx,rax
  0000000000000141: 48 8B C1           mov         rax,rcx
  0000000000000144: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000149: 45 33 C0           xor         r8d,r8d
  000000000000014C: BA 02 00 00 00     mov         edx,2
  0000000000000151: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000156: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  000000000000015C: 90                 nop
  000000000000015D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000162: 48 83 C4 58        add         rsp,58h
  0000000000000166: C3                 ret

?dtor$0@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 8B 45 20           mov         eax,dword ptr [rbp+20h]
  000000000000000C: 83 E0 01           and         eax,1
  000000000000000F: 85 C0              test        eax,eax
  0000000000000011: 74 15              je          0000000000000028
  0000000000000013: 83 65 20 FE        and         dword ptr [rbp+20h],0FFFFFFFEh
  0000000000000017: 48 8B 4D 60        mov         rcx,qword ptr [rbp+60h]
  000000000000001B: 48 81 C1 B0 00 00  add         rcx,0B0h
                    00
  0000000000000022: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000028: 48 83 C4 20        add         rsp,20h
  000000000000002C: 5D                 pop         rbp
  000000000000002D: C3                 ret

?dtor$1@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$1):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8B 4D 60        mov         rcx,qword ptr [rbp+60h]
  000000000000000D: 48 83 C1 18        add         rcx,18h
  0000000000000011: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000017: 48 83 C4 20        add         rsp,20h
  000000000000001B: 5D                 pop         rbp
  000000000000001C: C3                 ret

?dtor$2@?0???0?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAA@PEBDHH@Z@4HA (int `public: __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::basic_ifstream<char,struct std::char_traits<char> >(char const *,int,int)'::`1'::dtor$2):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8B 4D 60        mov         rcx,qword ptr [rbp+60h]
  000000000000000D: 48 83 C1 10        add         rcx,10h
  0000000000000011: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000016: 48 83 C4 20        add         rsp,20h
  000000000000001A: 5D                 pop         rbp
  000000000000001B: C3                 ret

??0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z (public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * const)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 60        sub         rsp,60h
  000000000000000F: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000014: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000019: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000001E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000023: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000028: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 8B 7C 24 30     mov         rdi,qword ptr [rsp+30h]
  0000000000000037: 33 C0              xor         eax,eax
  0000000000000039: B9 10 00 00 00     mov         ecx,10h
  000000000000003E: F3 AA              rep stos    byte ptr [rdi]
  0000000000000040: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000045: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  000000000000004D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000052: 48 C7 40 18 00 00  mov         qword ptr [rax+18h],0
                    00 00
  000000000000005A: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  000000000000005F: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000064: 48 C7 44 24 20 FF  mov         qword ptr [rsp+20h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000006D: 48 FF 44 24 20     inc         qword ptr [rsp+20h]
  0000000000000072: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000077: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000007C: 80 3C 08 00        cmp         byte ptr [rax+rcx],0
  0000000000000080: 75 EB              jne         000000000000006D
  0000000000000082: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000087: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000008C: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000091: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000096: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000009B: 4C 8B C0           mov         r8,rax
  000000000000009E: 48 8B 54 24 78     mov         rdx,qword ptr [rsp+78h]
  00000000000000A3: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  00000000000000A8: E8 00 00 00 00     call        ??$_Construct@$00PEBD@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXQEBD_K@Z
  00000000000000AD: 90                 nop
  00000000000000AE: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000B3: 48 83 C4 60        add         rsp,60h
  00000000000000B7: 5F                 pop         rdi
  00000000000000B8: C3                 ret

?dtor$0@?0???0?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@QEBD@Z@4HA (int `public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(char const * const)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8B 4D 70        mov         rcx,qword ptr [rbp+70h]
  000000000000000D: E8 00 00 00 00     call        ??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

??0_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_istream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000013: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000018: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000020: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000023: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000028: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000002D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000030: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000034: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000039: 48 03 C8           add         rcx,rax
  000000000000003C: 48 8B C1           mov         rax,rcx
  000000000000003F: 48 8B C8           mov         rcx,rax
  0000000000000042: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000048: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004D: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000053: 74 11              je          0000000000000066
  0000000000000055: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005D: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000062: FF 50 08           call        qword ptr [rax+8]
  0000000000000065: 90                 nop
  0000000000000066: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006B: 48 83 C4 38        add         rsp,38h
  000000000000006F: C3                 ret

??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::_Sentry_base(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000013: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000018: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000020: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000023: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000028: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000002D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000030: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000034: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000039: 48 03 C8           add         rcx,rax
  000000000000003C: 48 8B C1           mov         rax,rcx
  000000000000003F: 48 8B C8           mov         rcx,rax
  0000000000000042: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000048: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004D: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000053: 74 11              je          0000000000000066
  0000000000000055: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005A: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005D: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000062: FF 50 08           call        qword ptr [rax+8]
  0000000000000065: 90                 nop
  0000000000000066: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006B: 48 83 C4 38        add         rsp,38h
  000000000000006F: C3                 ret

??0bad_alloc@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_alloc::bad_alloc(class std::bad_alloc const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000014: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  000000000000001B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 83 C0 08        add         rax,8
  0000000000000027: 48 8B F8           mov         rdi,rax
  000000000000002A: 33 C0              xor         eax,eax
  000000000000002C: B9 10 00 00 00     mov         ecx,10h
  0000000000000031: F3 AA              rep stos    byte ptr [rdi]
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C0 08        add         rax,8
  000000000000003C: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000041: 48 83 C1 08        add         rcx,8
  0000000000000045: 48 8B D0           mov         rdx,rax
  0000000000000048: E8 00 00 00 00     call        __std_exception_copy
  000000000000004D: 90                 nop
  000000000000004E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000053: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_alloc@std@@6B@]
                    00
  000000000000005A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000005D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000062: 48 83 C4 20        add         rsp,20h
  0000000000000066: 5F                 pop         rdi
  0000000000000067: C3                 ret

??0bad_array_new_length@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_array_new_length::bad_array_new_length(class std::bad_array_new_length const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 28        sub         rsp,28h
  000000000000000E: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  0000000000000013: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000018: E8 00 00 00 00     call        ??0bad_alloc@std@@QEAA@AEBV01@@Z
  000000000000001D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000022: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_array_new_length@std@@6B@]
                    00
  0000000000000029: 48 89 08           mov         qword ptr [rax],rcx
  000000000000002C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000031: 48 83 C4 28        add         rsp,28h
  0000000000000035: C3                 ret

??0bad_array_new_length@std@@QEAA@XZ (public: __cdecl std::bad_array_new_length::bad_array_new_length(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000012: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000015: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000001A: 48 83 C0 08        add         rax,8
  000000000000001E: 48 8B F8           mov         rdi,rax
  0000000000000021: 33 C0              xor         eax,eax
  0000000000000023: B9 10 00 00 00     mov         ecx,10h
  0000000000000028: F3 AA              rep stos    byte ptr [rdi]
  000000000000002A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000002F: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BF@KINCDENJ@bad?5array?5new?5length@]
                    00
  0000000000000036: 48 89 48 08        mov         qword ptr [rax+8],rcx
  000000000000003A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000003F: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_alloc@std@@6B@]
                    00
  0000000000000046: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000049: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000004E: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_array_new_length@std@@6B@]
                    00
  0000000000000055: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000058: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000005D: 5F                 pop         rdi
  000000000000005E: C3                 ret

??0bad_cast@std@@QEAA@AEBV01@@Z (public: __cdecl std::bad_cast::bad_cast(class std::bad_cast const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000014: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  000000000000001B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 83 C0 08        add         rax,8
  0000000000000027: 48 8B F8           mov         rdi,rax
  000000000000002A: 33 C0              xor         eax,eax
  000000000000002C: B9 10 00 00 00     mov         ecx,10h
  0000000000000031: F3 AA              rep stos    byte ptr [rdi]
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C0 08        add         rax,8
  000000000000003C: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000041: 48 83 C1 08        add         rcx,8
  0000000000000045: 48 8B D0           mov         rdx,rax
  0000000000000048: E8 00 00 00 00     call        __std_exception_copy
  000000000000004D: 90                 nop
  000000000000004E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000053: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_cast@std@@6B@]
                    00
  000000000000005A: 48 89 08           mov         qword ptr [rax],rcx
  000000000000005D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000062: 48 83 C4 20        add         rsp,20h
  0000000000000066: 5F                 pop         rdi
  0000000000000067: C3                 ret

??0bad_cast@std@@QEAA@XZ (public: __cdecl std::bad_cast::bad_cast(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 57                 push        rdi
  0000000000000006: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000000B: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000012: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000015: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000001A: 48 83 C0 08        add         rax,8
  000000000000001E: 48 8B F8           mov         rdi,rax
  0000000000000021: 33 C0              xor         eax,eax
  0000000000000023: B9 10 00 00 00     mov         ecx,10h
  0000000000000028: F3 AA              rep stos    byte ptr [rdi]
  000000000000002A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000002F: 48 8D 0D 00 00 00  lea         rcx,[??_C@_08EPJLHIJG@bad?5cast@]
                    00
  0000000000000036: 48 89 48 08        mov         qword ptr [rax+8],rcx
  000000000000003A: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000003F: 48 8D 0D 00 00 00  lea         rcx,[??_7bad_cast@std@@6B@]
                    00
  0000000000000046: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000049: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000004E: 5F                 pop         rdi
  000000000000004F: C3                 ret

??0exception@std@@QEAA@AEBV01@@Z (public: __cdecl std::exception::exception(class std::exception const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 57                 push        rdi
  000000000000000B: 48 83 EC 20        sub         rsp,20h
  000000000000000F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000014: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  000000000000001B: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000023: 48 83 C0 08        add         rax,8
  0000000000000027: 48 8B F8           mov         rdi,rax
  000000000000002A: 33 C0              xor         eax,eax
  000000000000002C: B9 10 00 00 00     mov         ecx,10h
  0000000000000031: F3 AA              rep stos    byte ptr [rdi]
  0000000000000033: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000038: 48 83 C0 08        add         rax,8
  000000000000003C: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000041: 48 83 C1 08        add         rcx,8
  0000000000000045: 48 8B D0           mov         rdx,rax
  0000000000000048: E8 00 00 00 00     call        __std_exception_copy
  000000000000004D: 90                 nop
  000000000000004E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000053: 48 83 C4 20        add         rsp,20h
  0000000000000057: 5F                 pop         rdi
  0000000000000058: C3                 ret

??0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::sentry(class std::basic_ostream<char,struct std::char_traits<char> > &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  0000000000000013: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000018: E8 00 00 00 00     call        ??0_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z
  000000000000001D: 90                 nop
  000000000000001E: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000023: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000026: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000002A: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  000000000000002F: 48 03 C8           add         rcx,rax
  0000000000000032: 48 8B C1           mov         rax,rcx
  0000000000000035: 48 8B C8           mov         rcx,rax
  0000000000000038: FF 15 00 00 00 00  call        qword ptr [__imp_?good@ios_base@std@@QEBA_NXZ]
  000000000000003E: 0F B6 C0           movzx       eax,al
  0000000000000041: 85 C0              test        eax,eax
  0000000000000043: 75 0E              jne         0000000000000053
  0000000000000045: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004A: C6 40 08 00        mov         byte ptr [rax+8],0
  000000000000004E: E9 81 00 00 00     jmp         00000000000000D4
  0000000000000053: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000058: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005B: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000005F: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000064: 48 03 C8           add         rcx,rax
  0000000000000067: 48 8B C1           mov         rax,rcx
  000000000000006A: 48 8B C8           mov         rcx,rax
  000000000000006D: FF 15 00 00 00 00  call        qword ptr [__imp_?tie@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_ostream@DU?$char_traits@D@std@@@2@XZ]
  0000000000000073: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000078: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  000000000000007E: 74 16              je          0000000000000096
  0000000000000080: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000085: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000008A: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000008F: 48 39 44 24 20     cmp         qword ptr [rsp+20h],rax
  0000000000000094: 75 0B              jne         00000000000000A1
  0000000000000096: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000009B: C6 40 08 01        mov         byte ptr [rax+8],1
  000000000000009F: EB 33              jmp         00000000000000D4
  00000000000000A1: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  00000000000000A6: FF 15 00 00 00 00  call        qword ptr [__imp_?flush@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAAEAV12@XZ]
  00000000000000AC: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000B1: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000B4: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  00000000000000B8: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  00000000000000BD: 48 03 C8           add         rcx,rax
  00000000000000C0: 48 8B C1           mov         rax,rcx
  00000000000000C3: 48 8B C8           mov         rcx,rax
  00000000000000C6: FF 15 00 00 00 00  call        qword ptr [__imp_?good@ios_base@std@@QEBA_NXZ]
  00000000000000CC: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  00000000000000D1: 88 41 08           mov         byte ptr [rcx+8],al
  00000000000000D4: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000D9: 48 83 C4 38        add         rsp,38h
  00000000000000DD: C3                 ret

?dtor$0@?0???0sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@AEAV12@@Z@4HA (int `public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::sentry(class basic_ostream<char,struct std::char_traits<char> >::sentry &)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8B 4D 40        mov         rcx,qword ptr [rbp+40h]
  000000000000000D: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

??1?$_Compressed_pair@V?$allocator@D@std@@V?$_String_val@U?$_Simple_types@D@std@@@2@$00@std@@QEAA@XZ (public: __cdecl std::_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>::~_Compressed_pair<class std::allocator<char>,class std::_String_val<struct std::_Simple_types<char> >,1>(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: C3                 ret

??1?$_Tidy_guard@V?$vector@NV?$allocator@N@std@@@std@@@std@@QEAA@XZ (public: __cdecl std::_Tidy_guard<class std::vector<double,class std::allocator<double> > >::~_Tidy_guard<class std::vector<double,class std::allocator<double> > >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000012: 74 0E              je          0000000000000022
  0000000000000014: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000019: 48 8B 08           mov         rcx,qword ptr [rax]
  000000000000001C: E8 00 00 00 00     call        ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AEAAXXZ
  0000000000000021: 90                 nop
  0000000000000022: 48 83 C4 28        add         rsp,28h
  0000000000000026: C3                 ret

??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ (public: virtual __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::~basic_filebuf<char,struct std::char_traits<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 8D 0D 00 00 00  lea         rcx,[??_7?$basic_filebuf@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000015: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000025: 74 0B              je          0000000000000032
  0000000000000027: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002C: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  0000000000000031: 90                 nop
  0000000000000032: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000037: 0F B6 40 7C        movzx       eax,byte ptr [rax+7Ch]
  000000000000003B: 85 C0              test        eax,eax
  000000000000003D: 74 0B              je          000000000000004A
  000000000000003F: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000044: E8 00 00 00 00     call        ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
  0000000000000049: 90                 nop
  000000000000004A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004F: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_streambuf@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000055: 90                 nop
  0000000000000056: 48 83 C4 28        add         rsp,28h
  000000000000005A: C3                 ret

??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ (public: virtual __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::~basic_ifstream<char,struct std::char_traits<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 8B 80 50 FF FF  mov         rax,qword ptr [rax-0B0h]
                    FF
  0000000000000015: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000019: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000001E: 48 8D 15 00 00 00  lea         rdx,[??_7?$basic_ifstream@DU?$char_traits@D@std@@@std@@6B@]
                    00
  0000000000000025: 48 89 94 01 50 FF  mov         qword ptr [rcx+rax-0B0h],rdx
                    FF FF
  000000000000002D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000032: 48 8B 80 50 FF FF  mov         rax,qword ptr [rax-0B0h]
                    FF
  0000000000000039: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000003D: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000043: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000048: 48 8B 89 50 FF FF  mov         rcx,qword ptr [rcx-0B0h]
                    FF
  000000000000004F: 48 63 49 04        movsxd      rcx,dword ptr [rcx+4]
  0000000000000053: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  0000000000000058: 89 84 0A 4C FF FF  mov         dword ptr [rdx+rcx-0B4h],eax
                    FF
  000000000000005F: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000064: 48 2D A0 00 00 00  sub         rax,0A0h
  000000000000006A: 48 8B C8           mov         rcx,rax
  000000000000006D: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000072: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000077: 48 2D 98 00 00 00  sub         rax,98h
  000000000000007D: 48 8B C8           mov         rcx,rax
  0000000000000080: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_istream@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000086: 90                 nop
  0000000000000087: 48 83 C4 28        add         rsp,28h
  000000000000008B: C3                 ret

??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ (public: __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::~basic_string<char,struct std::char_traits<char>,class std::allocator<char> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000E: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000013: 90                 nop
  0000000000000014: 48 83 C4 28        add         rsp,28h
  0000000000000018: C3                 ret

??1?$unique_ptr@V_Facet_base@std@@U?$default_delete@V_Facet_base@std@@@2@@std@@QEAA@XZ (public: __cdecl std::unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >::~unique_ptr<class std::_Facet_base,struct std::default_delete<class std::_Facet_base> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 58        sub         rsp,58h
  0000000000000009: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000000E: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000012: 74 61              je          0000000000000075
  0000000000000014: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000019: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000001E: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000023: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000028: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000002D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000030: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000035: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000003A: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003F: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000045: 74 25              je          000000000000006C
  0000000000000047: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000004C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000052: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000057: BA 01 00 00 00     mov         edx,1
  000000000000005C: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000061: FF 54 24 38        call        qword ptr [rsp+38h]
  0000000000000065: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000006A: EB 09              jmp         0000000000000075
  000000000000006C: 48 C7 44 24 40 00  mov         qword ptr [rsp+40h],0
                    00 00 00
  0000000000000075: 48 83 C4 58        add         rsp,58h
  0000000000000079: C3                 ret

??1?$vector@NV?$allocator@N@std@@@std@@QEAA@XZ (public: __cdecl std::vector<double,class std::allocator<double> >::~vector<double,class std::allocator<double> >(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000E: E8 00 00 00 00     call        ?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AEAAXXZ
  0000000000000013: 90                 nop
  0000000000000014: 48 83 C4 28        add         rsp,28h
  0000000000000018: C3                 ret

??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000011: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000016: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000001B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001E: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000022: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000027: 48 03 C8           add         rcx,rax
  000000000000002A: 48 8B C1           mov         rax,rcx
  000000000000002D: 48 8B C8           mov         rcx,rax
  0000000000000030: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000036: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003B: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000041: 74 11              je          0000000000000054
  0000000000000043: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000048: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004B: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000050: FF 50 10           call        qword ptr [rax+10h]
  0000000000000053: 90                 nop
  0000000000000054: 48 83 C4 38        add         rsp,38h
  0000000000000058: C3                 ret

??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::_Sentry_base::~_Sentry_base(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000011: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000016: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000001B: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000001E: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  0000000000000022: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000027: 48 03 C8           add         rcx,rax
  000000000000002A: 48 8B C1           mov         rax,rcx
  000000000000002D: 48 8B C8           mov         rcx,rax
  0000000000000030: FF 15 00 00 00 00  call        qword ptr [__imp_?rdbuf@?$basic_ios@DU?$char_traits@D@std@@@std@@QEBAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@XZ]
  0000000000000036: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003B: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000041: 74 11              je          0000000000000054
  0000000000000043: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000048: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004B: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000050: FF 50 10           call        qword ptr [rax+10h]
  0000000000000053: 90                 nop
  0000000000000054: 48 83 C4 38        add         rsp,38h
  0000000000000058: C3                 ret

??1bad_array_new_length@std@@UEAA@XZ (public: virtual __cdecl std::bad_array_new_length::~bad_array_new_length(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000015: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 83 C0 08        add         rax,8
  0000000000000021: 48 8B C8           mov         rcx,rax
  0000000000000024: E8 00 00 00 00     call        __std_exception_destroy
  0000000000000029: 90                 nop
  000000000000002A: 48 83 C4 28        add         rsp,28h
  000000000000002E: C3                 ret

??1bad_cast@std@@UEAA@XZ (public: virtual __cdecl std::bad_cast::~bad_cast(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000015: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 83 C0 08        add         rax,8
  0000000000000021: 48 8B C8           mov         rcx,rax
  0000000000000024: E8 00 00 00 00     call        __std_exception_destroy
  0000000000000029: 90                 nop
  000000000000002A: 48 83 C4 28        add         rsp,28h
  000000000000002E: C3                 ret

??1locale@std@@QEAA@XZ (public: __cdecl std::locale::~locale(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 48        sub         rsp,48h
  0000000000000009: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000000E: 48 83 78 08 00     cmp         qword ptr [rax+8],0
  0000000000000013: 74 53              je          0000000000000068
  0000000000000015: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000001A: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000001E: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000023: 48 8B 49 08        mov         rcx,qword ptr [rcx+8]
  0000000000000027: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002A: FF 50 10           call        qword ptr [rax+10h]
  000000000000002D: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000032: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000038: 74 25              je          000000000000005F
  000000000000003A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000003F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000042: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000045: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000004A: BA 01 00 00 00     mov         edx,1
  000000000000004F: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000054: FF 54 24 28        call        qword ptr [rsp+28h]
  0000000000000058: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000005D: EB 09              jmp         0000000000000068
  000000000000005F: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000068: 48 83 C4 48        add         rsp,48h
  000000000000006C: C3                 ret

??1sentry@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_istream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000E: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_istream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000013: 90                 nop
  0000000000000014: 48 83 C4 28        add         rsp,28h
  0000000000000018: C3                 ret

??1sentry@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ (public: __cdecl std::basic_ostream<char,struct std::char_traits<char> >::sentry::~sentry(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: E8 00 00 00 00     call        ?uncaught_exceptions@std@@YAHXZ
  000000000000000E: 85 C0              test        eax,eax
  0000000000000010: 75 07              jne         0000000000000019
  0000000000000012: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  0000000000000017: EB 05              jmp         000000000000001E
  0000000000000019: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000001E: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000023: 88 44 24 21        mov         byte ptr [rsp+21h],al
  0000000000000027: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  000000000000002C: 85 C0              test        eax,eax
  000000000000002E: 74 0F              je          000000000000003F
  0000000000000030: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000035: 48 8B 08           mov         rcx,qword ptr [rax]
  0000000000000038: FF 15 00 00 00 00  call        qword ptr [__imp_?_Osfx@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAAXXZ]
  000000000000003E: 90                 nop
  000000000000003F: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000044: E8 00 00 00 00     call        ??1_Sentry_base@?$basic_ostream@DU?$char_traits@D@std@@@std@@QEAA@XZ
  0000000000000049: 90                 nop
  000000000000004A: 48 83 C4 38        add         rsp,38h
  000000000000004E: C3                 ret

??A?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEAD_K@Z (public: char & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::operator[](unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000013: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000018: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000001D: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000022: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000027: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  000000000000002C: 76 0A              jbe         0000000000000038
  000000000000002E: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000036: EB 08              jmp         0000000000000040
  0000000000000038: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  0000000000000040: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000045: 88 04 24           mov         byte ptr [rsp],al
  0000000000000048: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  000000000000004C: 0F B6 C0           movzx       eax,al
  000000000000004F: 85 C0              test        eax,eax
  0000000000000051: 74 21              je          0000000000000074
  0000000000000053: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000058: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005B: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  0000000000000060: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000065: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000006A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000006F: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000074: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000079: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000007E: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000083: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000088: 48 03 C8           add         rcx,rax
  000000000000008B: 48 8B C1           mov         rax,rcx
  000000000000008E: 48 83 C4 38        add         rsp,38h
  0000000000000092: C3                 ret

??R<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@QEBA@QEADQEBD_KD@Z (public: __cdecl `public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)'::`2'::<lambda_1>::operator()(char * const,char const * const,unsigned __int64,char)const ):
  0000000000000000: 4C 89 4C 24 20     mov         qword ptr [rsp+20h],r9
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 48        sub         rsp,48h
  0000000000000018: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  000000000000001D: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  0000000000000022: 0F B6 C0           movzx       eax,al
  0000000000000025: 85 C0              test        eax,eax
  0000000000000027: 74 4D              je          0000000000000076
  0000000000000029: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  0000000000000032: EB 0D              jmp         0000000000000041
  0000000000000034: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000039: 48 FF C0           inc         rax
  000000000000003C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000041: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000046: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  000000000000004B: 74 27              je          0000000000000074
  000000000000004D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000052: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000057: 48 03 C8           add         rcx,rax
  000000000000005A: 48 8B C1           mov         rax,rcx
  000000000000005D: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000062: 48 8B 54 24 60     mov         rdx,qword ptr [rsp+60h]
  0000000000000067: 48 03 D1           add         rdx,rcx
  000000000000006A: 48 8B CA           mov         rcx,rdx
  000000000000006D: 0F B6 09           movzx       ecx,byte ptr [rcx]
  0000000000000070: 88 08              mov         byte ptr [rax],cl
  0000000000000072: EB C0              jmp         0000000000000034
  0000000000000074: EB 15              jmp         000000000000008B
  0000000000000076: 4C 8B 44 24 68     mov         r8,qword ptr [rsp+68h]
  000000000000007B: 48 8B 54 24 60     mov         rdx,qword ptr [rsp+60h]
  0000000000000080: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000085: E8 00 00 00 00     call        memcpy
  000000000000008A: 90                 nop
  000000000000008B: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000090: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000095: 48 03 C8           add         rcx,rax
  0000000000000098: 48 8B C1           mov         rax,rcx
  000000000000009B: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000A0: C6 44 24 22 00     mov         byte ptr [rsp+22h],0
  00000000000000A5: 0F B6 44 24 22     movzx       eax,byte ptr [rsp+22h]
  00000000000000AA: 0F B6 C0           movzx       eax,al
  00000000000000AD: 85 C0              test        eax,eax
  00000000000000AF: 74 0E              je          00000000000000BF
  00000000000000B1: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000B6: 0F B6 4C 24 70     movzx       ecx,byte ptr [rsp+70h]
  00000000000000BB: 88 08              mov         byte ptr [rax],cl
  00000000000000BD: EB 0C              jmp         00000000000000CB
  00000000000000BF: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000C4: 0F B6 4C 24 70     movzx       ecx,byte ptr [rsp+70h]
  00000000000000C9: 88 08              mov         byte ptr [rax],cl
  00000000000000CB: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  00000000000000D0: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000D5: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  00000000000000DA: 48 8D 44 08 01     lea         rax,[rax+rcx+1]
  00000000000000DF: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000E4: C6 44 24 23 00     mov         byte ptr [rsp+23h],0
  00000000000000E9: 0F B6 44 24 23     movzx       eax,byte ptr [rsp+23h]
  00000000000000EE: 0F B6 C0           movzx       eax,al
  00000000000000F1: 85 C0              test        eax,eax
  00000000000000F3: 74 0E              je          0000000000000103
  00000000000000F5: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000FA: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  00000000000000FF: 88 08              mov         byte ptr [rax],cl
  0000000000000101: EB 0C              jmp         000000000000010F
  0000000000000103: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000108: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  000000000000010D: 88 08              mov         byte ptr [rax],cl
  000000000000010F: 48 83 C4 48        add         rsp,48h
  0000000000000113: C3                 ret

??_D?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ (public: void __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`vbase destructor'(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000014: 48 8B C8           mov         rcx,rax
  0000000000000017: E8 00 00 00 00     call        ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  000000000000001C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000021: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000027: 48 8B C8           mov         rcx,rax
  000000000000002A: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000030: 90                 nop
  0000000000000031: 48 83 C4 28        add         rsp,28h
  0000000000000035: C3                 ret

??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@$4PPPPPPPM@A@EAAPEAXI@Z ([thunk]:public: virtual void * __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`vector deleting destructor'`vtordisp{4294967292,0}' (unsigned int)):
  0000000000000000: 48 63 41 FC        movsxd      rax,dword ptr [rcx-4]
  0000000000000004: 48 2B C8           sub         rcx,rax
  0000000000000007: E9 00 00 00 00     jmp         ??_E?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z

??_G?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 28        sub         rsp,28h
  000000000000000D: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000012: E8 00 00 00 00     call        ??1?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000017: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000001B: 83 E0 01           and         eax,1
  000000000000001E: 85 C0              test        eax,eax
  0000000000000020: 74 10              je          0000000000000032
  0000000000000022: BA 98 00 00 00     mov         edx,98h
  0000000000000027: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002C: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000031: 90                 nop
  0000000000000032: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000037: 48 83 C4 28        add         rsp,28h
  000000000000003B: C3                 ret

??_G?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 38        sub         rsp,38h
  000000000000000D: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000012: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000018: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001D: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000022: 48 05 B0 00 00 00  add         rax,0B0h
  0000000000000028: 48 8B C8           mov         rcx,rax
  000000000000002B: E8 00 00 00 00     call        ??1?$basic_ifstream@DU?$char_traits@D@std@@@std@@UEAA@XZ
  0000000000000030: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000035: 48 05 B0 00 00 00  add         rax,0B0h
  000000000000003B: 48 8B C8           mov         rcx,rax
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_??1?$basic_ios@DU?$char_traits@D@std@@@std@@UEAA@XZ]
  0000000000000044: 90                 nop
  0000000000000045: 8B 44 24 48        mov         eax,dword ptr [rsp+48h]
  0000000000000049: 83 E0 01           and         eax,1
  000000000000004C: 85 C0              test        eax,eax
  000000000000004E: 74 19              je          0000000000000069
  0000000000000050: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000055: 48 2D B0 00 00 00  sub         rax,0B0h
  000000000000005B: BA 10 01 00 00     mov         edx,110h
  0000000000000060: 48 8B C8           mov         rcx,rax
  0000000000000063: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000068: 90                 nop
  0000000000000069: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006E: 48 2D B0 00 00 00  sub         rax,0B0h
  0000000000000074: 48 83 C4 38        add         rsp,38h
  0000000000000078: C3                 ret

??_Gbad_alloc@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_alloc::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 28        sub         rsp,28h
  000000000000000D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000012: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000021: 48 83 C0 08        add         rax,8
  0000000000000025: 48 8B C8           mov         rcx,rax
  0000000000000028: E8 00 00 00 00     call        __std_exception_destroy
  000000000000002D: 90                 nop
  000000000000002E: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  0000000000000032: 83 E0 01           and         eax,1
  0000000000000035: 85 C0              test        eax,eax
  0000000000000037: 74 10              je          0000000000000049
  0000000000000039: BA 18 00 00 00     mov         edx,18h
  000000000000003E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000043: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000048: 90                 nop
  0000000000000049: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004E: 48 83 C4 28        add         rsp,28h
  0000000000000052: C3                 ret

??_Gbad_array_new_length@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_array_new_length::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 28        sub         rsp,28h
  000000000000000D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000012: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000021: 48 83 C0 08        add         rax,8
  0000000000000025: 48 8B C8           mov         rcx,rax
  0000000000000028: E8 00 00 00 00     call        __std_exception_destroy
  000000000000002D: 90                 nop
  000000000000002E: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  0000000000000032: 83 E0 01           and         eax,1
  0000000000000035: 85 C0              test        eax,eax
  0000000000000037: 74 10              je          0000000000000049
  0000000000000039: BA 18 00 00 00     mov         edx,18h
  000000000000003E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000043: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000048: 90                 nop
  0000000000000049: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004E: 48 83 C4 28        add         rsp,28h
  0000000000000052: C3                 ret

??_Gbad_cast@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::bad_cast::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 28        sub         rsp,28h
  000000000000000D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000012: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000021: 48 83 C0 08        add         rax,8
  0000000000000025: 48 8B C8           mov         rcx,rax
  0000000000000028: E8 00 00 00 00     call        __std_exception_destroy
  000000000000002D: 90                 nop
  000000000000002E: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  0000000000000032: 83 E0 01           and         eax,1
  0000000000000035: 85 C0              test        eax,eax
  0000000000000037: 74 10              je          0000000000000049
  0000000000000039: BA 18 00 00 00     mov         edx,18h
  000000000000003E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000043: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000048: 90                 nop
  0000000000000049: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004E: 48 83 C4 28        add         rsp,28h
  0000000000000052: C3                 ret

??_Gexception@std@@UEAAPEAXI@Z (public: virtual void * __cdecl std::exception::`scalar deleting destructor'(unsigned int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 28        sub         rsp,28h
  000000000000000D: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000012: 48 8D 0D 00 00 00  lea         rcx,[??_7exception@std@@6B@]
                    00
  0000000000000019: 48 89 08           mov         qword ptr [rax],rcx
  000000000000001C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000021: 48 83 C0 08        add         rax,8
  0000000000000025: 48 8B C8           mov         rcx,rax
  0000000000000028: E8 00 00 00 00     call        __std_exception_destroy
  000000000000002D: 90                 nop
  000000000000002E: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  0000000000000032: 83 E0 01           and         eax,1
  0000000000000035: 85 C0              test        eax,eax
  0000000000000037: 74 10              je          0000000000000049
  0000000000000039: BA 18 00 00 00     mov         edx,18h
  000000000000003E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000043: E8 00 00 00 00     call        ??3@YAXPEAX_K@Z
  0000000000000048: 90                 nop
  0000000000000049: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000004E: 48 83 C4 28        add         rsp,28h
  0000000000000052: C3                 ret

?_Adjust_manually_vector_aligned@std@@YAXAEAPEAXAEA_K@Z (void __cdecl std::_Adjust_manually_vector_aligned(void * &,unsigned __int64 &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 48        sub         rsp,48h
  000000000000000E: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000013: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000016: 48 83 C0 27        add         rax,27h
  000000000000001A: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000001F: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000022: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000027: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000002A: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000002F: B8 08 00 00 00     mov         eax,8
  0000000000000034: 48 6B C0 FF        imul        rax,rax,0FFFFFFFFFFFFFFFFh
  0000000000000038: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003D: 48 8B 04 01        mov         rax,qword ptr [rcx+rax]
  0000000000000041: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000046: 48 C7 44 24 38 08  mov         qword ptr [rsp+38h],8
                    00 00 00
  000000000000004F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000054: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000059: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000005C: 48 2B C1           sub         rax,rcx
  000000000000005F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000064: 48 83 7C 24 20 08  cmp         qword ptr [rsp+20h],8
  000000000000006A: 72 0A              jb          0000000000000076
  000000000000006C: 48 83 7C 24 20 27  cmp         qword ptr [rsp+20h],27h
  0000000000000072: 77 02              ja          0000000000000076
  0000000000000074: EB 0D              jmp         0000000000000083
  0000000000000076: FF 15 00 00 00 00  call        qword ptr [__imp__invalid_parameter_noinfo_noreturn]
  000000000000007C: 90                 nop
  000000000000007D: 33 C0              xor         eax,eax
  000000000000007F: 85 C0              test        eax,eax
  0000000000000081: 75 F3              jne         0000000000000076
  0000000000000083: 33 C0              xor         eax,eax
  0000000000000085: 85 C0              test        eax,eax
  0000000000000087: 75 DB              jne         0000000000000064
  0000000000000089: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000008E: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000093: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000096: 48 83 C4 48        add         rsp,48h
  000000000000009A: C3                 ret

?_Buy_nonzero@?$vector@NV?$allocator@N@std@@@std@@AEAAX_K@Z (private: void __cdecl std::vector<double,class std::allocator<double> >::_Buy_nonzero(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 28        sub         rsp,28h
  000000000000000E: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000013: E8 00 00 00 00     call        ?max_size@?$vector@NV?$allocator@N@std@@@std@@QEBA_KXZ
  0000000000000018: 48 39 44 24 38     cmp         qword ptr [rsp+38h],rax
  000000000000001D: 76 06              jbe         0000000000000025
  000000000000001F: E8 00 00 00 00     call        ?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ
  0000000000000024: 90                 nop
  0000000000000025: 48 8B 54 24 38     mov         rdx,qword ptr [rsp+38h]
  000000000000002A: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000002F: E8 00 00 00 00     call        ?_Buy_raw@?$vector@NV?$allocator@N@std@@@std@@AEAAX_K@Z
  0000000000000034: 90                 nop
  0000000000000035: 48 83 C4 28        add         rsp,28h
  0000000000000039: C3                 ret

?_Buy_raw@?$vector@NV?$allocator@N@std@@@std@@AEAAX_K@Z (private: void __cdecl std::vector<double,class std::allocator<double> >::_Buy_raw(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 81 EC 98 00 00  sub         rsp,98h
                    00
  0000000000000011: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000019: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000001E: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000023: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000028: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000002D: 48 83 C0 08        add         rax,8
  0000000000000031: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000036: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000003B: 48 83 C0 10        add         rax,10h
  000000000000003F: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000044: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000004C: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000051: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000056: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000005B: 48 8B 84 24 A8 00  mov         rax,qword ptr [rsp+0A8h]
                    00 00
  0000000000000063: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000068: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  000000000000006D: 48 B8 FF FF FF FF  mov         rax,1FFFFFFFFFFFFFFFh
                    FF FF FF 1F
  0000000000000077: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000007F: 48 B8 FF FF FF FF  mov         rax,1FFFFFFFFFFFFFFFh
                    FF FF FF 1F
  0000000000000089: 48 39 44 24 38     cmp         qword ptr [rsp+38h],rax
  000000000000008E: 76 06              jbe         0000000000000096
  0000000000000090: E8 00 00 00 00     call        ?_Throw_bad_array_new_length@std@@YAXXZ
  0000000000000095: 90                 nop
  0000000000000096: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000009B: 48 C1 E0 03        shl         rax,3
  000000000000009F: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000A4: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000A9: 48 8B C8           mov         rcx,rax
  00000000000000AC: E8 00 00 00 00     call        ??$_Allocate@$0BA@U_Default_allocate_traits@std@@@std@@YAPEAX_K@Z
  00000000000000B1: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000B6: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000BB: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000C0: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000C5: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000CA: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000CF: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000D4: 48 89 08           mov         qword ptr [rax],rcx
  00000000000000D7: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000DC: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000E1: 48 89 08           mov         qword ptr [rax],rcx
  00000000000000E4: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000E9: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  00000000000000F1: 48 8D 04 C8        lea         rax,[rax+rcx*8]
  00000000000000F5: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  00000000000000FA: 48 89 01           mov         qword ptr [rcx],rax
  00000000000000FD: 48 81 C4 98 00 00  add         rsp,98h
                    00
  0000000000000104: C3                 ret

?_Calculate_growth@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@CA_K_K00@Z (private: static unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Calculate_growth(unsigned __int64,unsigned __int64,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 38        sub         rsp,38h
  0000000000000013: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000018: 48 83 C8 0F        or          rax,0Fh
  000000000000001C: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000020: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000025: 48 39 04 24        cmp         qword ptr [rsp],rax
  0000000000000029: 76 0A              jbe         0000000000000035
  000000000000002B: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000030: E9 83 00 00 00     jmp         00000000000000B8
  0000000000000035: 33 D2              xor         edx,edx
  0000000000000037: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000003C: B9 02 00 00 00     mov         ecx,2
  0000000000000041: 48 F7 F1           div         rax,rcx
  0000000000000044: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000049: 48 2B C8           sub         rcx,rax
  000000000000004C: 48 8B C1           mov         rax,rcx
  000000000000004F: 48 39 44 24 48     cmp         qword ptr [rsp+48h],rax
  0000000000000054: 76 07              jbe         000000000000005D
  0000000000000056: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000005B: EB 5B              jmp         00000000000000B8
  000000000000005D: 33 D2              xor         edx,edx
  000000000000005F: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000064: B9 02 00 00 00     mov         ecx,2
  0000000000000069: 48 F7 F1           div         rax,rcx
  000000000000006C: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000071: 48 03 C8           add         rcx,rax
  0000000000000074: 48 8B C1           mov         rax,rcx
  0000000000000077: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  000000000000007C: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000081: 48 39 04 24        cmp         qword ptr [rsp],rax
  0000000000000085: 73 0C              jae         0000000000000093
  0000000000000087: 48 8D 44 24 08     lea         rax,[rsp+8]
  000000000000008C: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000091: EB 09              jmp         000000000000009C
  0000000000000093: 48 8D 04 24        lea         rax,[rsp]
  0000000000000097: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000009C: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  00000000000000A1: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  00000000000000A6: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  00000000000000AB: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000000B0: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000B5: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000B8: 48 83 C4 38        add         rsp,38h
  00000000000000BC: C3                 ret

?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Construct_empty(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000013: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000018: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  0000000000000020: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000025: 48 C7 40 18 0F 00  mov         qword ptr [rax+18h],0Fh
                    00 00
  000000000000002D: C6 44 24 01 00     mov         byte ptr [rsp+1],0
  0000000000000032: 0F B6 44 24 01     movzx       eax,byte ptr [rsp+1]
  0000000000000037: 0F B6 C0           movzx       eax,al
  000000000000003A: 85 C0              test        eax,eax
  000000000000003C: 74 35              je          0000000000000073
  000000000000003E: 48 C7 44 24 08 00  mov         qword ptr [rsp+8],0
                    00 00 00
  0000000000000047: EB 0D              jmp         0000000000000056
  0000000000000049: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000004E: 48 FF C0           inc         rax
  0000000000000051: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000056: 48 83 7C 24 08 10  cmp         qword ptr [rsp+8],10h
  000000000000005C: 73 15              jae         0000000000000073
  000000000000005E: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000063: 48 8B 4C 24 10     mov         rcx,qword ptr [rsp+10h]
  0000000000000068: 48 03 C8           add         rcx,rax
  000000000000006B: 48 8B C1           mov         rax,rcx
  000000000000006E: C6 00 00           mov         byte ptr [rax],0
  0000000000000071: EB D6              jmp         0000000000000049
  0000000000000073: C6 04 24 00        mov         byte ptr [rsp],0
  0000000000000077: B8 01 00 00 00     mov         eax,1
  000000000000007C: 48 6B C0 00        imul        rax,rax,0
  0000000000000080: 48 8B 4C 24 10     mov         rcx,qword ptr [rsp+10h]
  0000000000000085: 48 03 C8           add         rcx,rax
  0000000000000088: 48 8B C1           mov         rax,rcx
  000000000000008B: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  0000000000000090: C6 44 24 02 00     mov         byte ptr [rsp+2],0
  0000000000000095: 0F B6 44 24 02     movzx       eax,byte ptr [rsp+2]
  000000000000009A: 0F B6 C0           movzx       eax,al
  000000000000009D: 85 C0              test        eax,eax
  000000000000009F: 74 0D              je          00000000000000AE
  00000000000000A1: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  00000000000000A6: 0F B6 0C 24        movzx       ecx,byte ptr [rsp]
  00000000000000AA: 88 08              mov         byte ptr [rax],cl
  00000000000000AC: EB 0B              jmp         00000000000000B9
  00000000000000AE: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  00000000000000B3: 0F B6 0C 24        movzx       ecx,byte ptr [rsp]
  00000000000000B7: 88 08              mov         byte ptr [rax],cl
  00000000000000B9: 48 83 C4 28        add         rsp,28h
  00000000000000BD: C3                 ret

?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ (protected: bool __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Endwrite(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  000000000000000C: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  0000000000000013: 48 33 C4           xor         rax,rsp
  0000000000000016: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  000000000000001E: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000026: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  000000000000002B: 74 10              je          000000000000003D
  000000000000002D: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000035: 0F B6 40 71        movzx       eax,byte ptr [rax+71h]
  0000000000000039: 85 C0              test        eax,eax
  000000000000003B: 75 07              jne         0000000000000044
  000000000000003D: B0 01              mov         al,1
  000000000000003F: E9 8C 01 00 00     jmp         00000000000001D0
  0000000000000044: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000004C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004F: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000053: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000058: C7 44 24 40 FF FF  mov         dword ptr [rsp+40h],0FFFFFFFFh
                    FF FF
  0000000000000060: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  0000000000000064: 89 44 24 44        mov         dword ptr [rsp+44h],eax
  0000000000000068: 8B 54 24 44        mov         edx,dword ptr [rsp+44h]
  000000000000006C: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  0000000000000074: FF 54 24 60        call        qword ptr [rsp+60h]
  0000000000000078: 89 44 24 4C        mov         dword ptr [rsp+4Ch],eax
  000000000000007C: C7 44 24 48 FF FF  mov         dword ptr [rsp+48h],0FFFFFFFFh
                    FF FF
  0000000000000084: 8B 44 24 48        mov         eax,dword ptr [rsp+48h]
  0000000000000088: 89 44 24 50        mov         dword ptr [rsp+50h],eax
  000000000000008C: 8B 44 24 4C        mov         eax,dword ptr [rsp+4Ch]
  0000000000000090: 39 44 24 50        cmp         dword ptr [rsp+50h],eax
  0000000000000094: 75 0A              jne         00000000000000A0
  0000000000000096: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  000000000000009E: EB 08              jmp         00000000000000A8
  00000000000000A0: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  00000000000000A8: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  00000000000000AD: 88 44 24 30        mov         byte ptr [rsp+30h],al
  00000000000000B1: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  00000000000000B6: 0F B6 C0           movzx       eax,al
  00000000000000B9: 85 C0              test        eax,eax
  00000000000000BB: 74 07              je          00000000000000C4
  00000000000000BD: 32 C0              xor         al,al
  00000000000000BF: E9 0C 01 00 00     jmp         00000000000001D0
  00000000000000C4: 48 C7 44 24 78 20  mov         qword ptr [rsp+78h],20h
                    00 00 00
  00000000000000CD: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000D5: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  00000000000000D9: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000DE: 48 8D 84 24 A0 00  lea         rax,[rsp+0A0h]
                    00 00
  00000000000000E6: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000000EE: 48 83 C1 74        add         rcx,74h
  00000000000000F2: 48 8D 54 24 70     lea         rdx,[rsp+70h]
  00000000000000F7: 48 89 54 24 20     mov         qword ptr [rsp+20h],rdx
  00000000000000FC: 4C 8B C8           mov         r9,rax
  00000000000000FF: 4C 8D 84 24 80 00  lea         r8,[rsp+80h]
                    00 00
  0000000000000107: 48 8B D1           mov         rdx,rcx
  000000000000010A: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000010F: FF 15 00 00 00 00  call        qword ptr [__imp_?unshift@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEAD1AEAPEAD@Z]
  0000000000000115: 89 44 24 34        mov         dword ptr [rsp+34h],eax
  0000000000000119: 83 7C 24 34 00     cmp         dword ptr [rsp+34h],0
  000000000000011E: 74 17              je          0000000000000137
  0000000000000120: 83 7C 24 34 01     cmp         dword ptr [rsp+34h],1
  0000000000000125: 74 1C              je          0000000000000143
  0000000000000127: 83 7C 24 34 03     cmp         dword ptr [rsp+34h],3
  000000000000012C: 0F 84 8C 00 00 00  je          00000000000001BE
  0000000000000132: E9 97 00 00 00     jmp         00000000000001CE
  0000000000000137: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000013F: C6 40 71 00        mov         byte ptr [rax+71h],0
  0000000000000143: 48 8D 84 24 80 00  lea         rax,[rsp+80h]
                    00 00
  000000000000014B: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000150: 48 2B C8           sub         rcx,rax
  0000000000000153: 48 8B C1           mov         rax,rcx
  0000000000000156: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  000000000000015B: 48 83 7C 24 58 00  cmp         qword ptr [rsp+58h],0
  0000000000000161: 76 32              jbe         0000000000000195
  0000000000000163: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000016B: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  0000000000000172: 4C 8B 44 24 58     mov         r8,qword ptr [rsp+58h]
  0000000000000177: BA 01 00 00 00     mov         edx,1
  000000000000017C: 48 8D 8C 24 80 00  lea         rcx,[rsp+80h]
                    00 00
  0000000000000184: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  000000000000018A: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  000000000000018F: 74 04              je          0000000000000195
  0000000000000191: 32 C0              xor         al,al
  0000000000000193: EB 3B              jmp         00000000000001D0
  0000000000000195: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000019D: 0F B6 40 71        movzx       eax,byte ptr [rax+71h]
  00000000000001A1: 85 C0              test        eax,eax
  00000000000001A3: 75 0A              jne         00000000000001AF
  00000000000001A5: C7 44 24 3C 01 00  mov         dword ptr [rsp+3Ch],1
                    00 00
  00000000000001AD: EB 08              jmp         00000000000001B7
  00000000000001AF: C7 44 24 3C 00 00  mov         dword ptr [rsp+3Ch],0
                    00 00
  00000000000001B7: 0F B6 44 24 3C     movzx       eax,byte ptr [rsp+3Ch]
  00000000000001BC: EB 12              jmp         00000000000001D0
  00000000000001BE: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000001C6: C6 40 71 00        mov         byte ptr [rax+71h],0
  00000000000001CA: B0 01              mov         al,1
  00000000000001CC: EB 02              jmp         00000000000001D0
  00000000000001CE: 32 C0              xor         al,al
  00000000000001D0: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  00000000000001D8: 48 33 CC           xor         rcx,rsp
  00000000000001DB: E8 00 00 00 00     call        __security_check_cookie
  00000000000001E0: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  00000000000001E7: C3                 ret

?_Eos@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAX_K@Z (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Eos(unsigned __int64)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 48        sub         rsp,48h
  000000000000000E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000013: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000018: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000001C: C6 04 24 00        mov         byte ptr [rsp],0
  0000000000000020: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000025: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  000000000000002A: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000002F: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000034: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000039: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  000000000000003E: 76 0A              jbe         000000000000004A
  0000000000000040: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000048: EB 08              jmp         0000000000000052
  000000000000004A: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  0000000000000052: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000057: 88 44 24 01        mov         byte ptr [rsp+1],al
  000000000000005B: 0F B6 44 24 01     movzx       eax,byte ptr [rsp+1]
  0000000000000060: 0F B6 C0           movzx       eax,al
  0000000000000063: 85 C0              test        eax,eax
  0000000000000065: 74 21              je          0000000000000088
  0000000000000067: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000006C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000006F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000074: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000079: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000007E: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000083: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000088: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000008D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000092: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000097: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000009C: 48 03 C8           add         rcx,rax
  000000000000009F: 48 8B C1           mov         rax,rcx
  00000000000000A2: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  00000000000000A7: C6 44 24 02 00     mov         byte ptr [rsp+2],0
  00000000000000AC: 0F B6 44 24 02     movzx       eax,byte ptr [rsp+2]
  00000000000000B1: 0F B6 C0           movzx       eax,al
  00000000000000B4: 85 C0              test        eax,eax
  00000000000000B6: 74 0D              je          00000000000000C5
  00000000000000B8: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  00000000000000BD: 0F B6 0C 24        movzx       ecx,byte ptr [rsp]
  00000000000000C1: 88 08              mov         byte ptr [rax],cl
  00000000000000C3: EB 0B              jmp         00000000000000D0
  00000000000000C5: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  00000000000000CA: 0F B6 0C 24        movzx       ecx,byte ptr [rsp]
  00000000000000CE: 88 08              mov         byte ptr [rax],cl
  00000000000000D0: 48 83 C4 48        add         rsp,48h
  00000000000000D4: C3                 ret

?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z (private: class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Erase_noexcept(unsigned __int64,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  0000000000000016: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  000000000000001E: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000023: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  000000000000002B: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000030: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000035: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  000000000000003D: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000041: 48 2B C1           sub         rax,rcx
  0000000000000044: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000049: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000004E: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  0000000000000053: 73 0C              jae         0000000000000061
  0000000000000055: 48 8D 44 24 30     lea         rax,[rsp+30h]
  000000000000005A: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000005F: EB 0A              jmp         000000000000006B
  0000000000000061: 48 8D 44 24 38     lea         rax,[rsp+38h]
  0000000000000066: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000006B: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000070: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000075: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  000000000000007A: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000007F: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000084: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000087: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000008C: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  0000000000000091: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  0000000000000099: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000A1: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  00000000000000A5: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  00000000000000AD: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000B5: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000BA: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000BF: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000C4: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000C9: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  00000000000000CE: 76 0A              jbe         00000000000000DA
  00000000000000D0: C7 44 24 24 01 00  mov         dword ptr [rsp+24h],1
                    00 00
  00000000000000D8: EB 08              jmp         00000000000000E2
  00000000000000DA: C7 44 24 24 00 00  mov         dword ptr [rsp+24h],0
                    00 00
  00000000000000E2: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  00000000000000E7: 88 44 24 20        mov         byte ptr [rsp+20h],al
  00000000000000EB: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  00000000000000F0: 0F B6 C0           movzx       eax,al
  00000000000000F3: 85 C0              test        eax,eax
  00000000000000F5: 74 2D              je          0000000000000124
  00000000000000F7: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000FC: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000FF: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000107: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  000000000000010F: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000117: 48 8B 84 24 88 00  mov         rax,qword ptr [rsp+88h]
                    00 00
  000000000000011F: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000124: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000129: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  0000000000000131: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  0000000000000139: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  0000000000000141: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  0000000000000149: 48 8B 8C 24 98 00  mov         rcx,qword ptr [rsp+98h]
                    00 00
  0000000000000151: 48 03 C8           add         rcx,rax
  0000000000000154: 48 8B C1           mov         rax,rcx
  0000000000000157: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  000000000000015C: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000164: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000016C: 48 2B C8           sub         rcx,rax
  000000000000016F: 48 8B C1           mov         rax,rcx
  0000000000000172: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000177: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  000000000000017F: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000184: 48 2B C8           sub         rcx,rax
  0000000000000187: 48 8B C1           mov         rax,rcx
  000000000000018A: 48 FF C0           inc         rax
  000000000000018D: 48 8B 8C 24 D0 00  mov         rcx,qword ptr [rsp+0D0h]
                    00 00
  0000000000000195: 48 8B 54 24 50     mov         rdx,qword ptr [rsp+50h]
  000000000000019A: 48 03 D1           add         rdx,rcx
  000000000000019D: 48 8B CA           mov         rcx,rdx
  00000000000001A0: 4C 8B C0           mov         r8,rax
  00000000000001A3: 48 8B D1           mov         rdx,rcx
  00000000000001A6: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000001AB: E8 00 00 00 00     call        ?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z
  00000000000001B0: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000001B8: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000001BD: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  00000000000001C1: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000001C9: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  00000000000001D0: C3                 ret

?_Getfacet@locale@std@@QEBAPEBVfacet@12@_K@Z (public: class std::locale::facet const * __cdecl std::locale::_Getfacet(unsigned __int64)const ):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 48        sub         rsp,48h
  000000000000000E: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000013: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  0000000000000017: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  000000000000001B: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  0000000000000020: 73 1D              jae         000000000000003F
  0000000000000022: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000027: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000002B: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  000000000000002F: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000034: 48 8B 04 C8        mov         rax,qword ptr [rax+rcx*8]
  0000000000000038: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003D: EB 09              jmp         0000000000000048
  000000000000003F: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000048: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000004D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000052: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000058: 75 11              jne         000000000000006B
  000000000000005A: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000005F: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  0000000000000063: 0F B6 40 24        movzx       eax,byte ptr [rax+24h]
  0000000000000067: 85 C0              test        eax,eax
  0000000000000069: 75 07              jne         0000000000000072
  000000000000006B: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000070: EB 30              jmp         00000000000000A2
  0000000000000072: E8 00 00 00 00     call        ?_Getgloballocale@locale@std@@CAPEAV_Locimp@12@XZ
  0000000000000077: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000007C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000081: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000085: 48 39 44 24 58     cmp         qword ptr [rsp+58h],rax
  000000000000008A: 73 14              jae         00000000000000A0
  000000000000008C: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000091: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000095: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  000000000000009A: 48 8B 04 C8        mov         rax,qword ptr [rax+rcx*8]
  000000000000009E: EB 02              jmp         00000000000000A2
  00000000000000A0: 33 C0              xor         eax,eax
  00000000000000A2: 48 83 C4 48        add         rsp,48h
  00000000000000A6: C3                 ret

?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z (protected: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Init(struct _iobuf *,enum std::basic_filebuf<char,struct std::char_traits<char> >::_Initfl)):
  0000000000000000: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 78        sub         rsp,78h
  0000000000000013: 83 BC 24 90 00 00  cmp         dword ptr [rsp+90h],1
                    00 01
  000000000000001B: 75 0A              jne         0000000000000027
  000000000000001D: C7 44 24 40 01 00  mov         dword ptr [rsp+40h],1
                    00 00
  0000000000000025: EB 08              jmp         000000000000002F
  0000000000000027: C7 44 24 40 00 00  mov         dword ptr [rsp+40h],0
                    00 00
  000000000000002F: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000037: 0F B6 4C 24 40     movzx       ecx,byte ptr [rsp+40h]
  000000000000003C: 88 48 7C           mov         byte ptr [rax+7Ch],cl
  000000000000003F: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000047: C6 40 71 00        mov         byte ptr [rax+71h],0
  000000000000004B: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  0000000000000053: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ]
  0000000000000059: 90                 nop
  000000000000005A: 48 83 BC 24 88 00  cmp         qword ptr [rsp+88h],0
                    00 00 00
  0000000000000063: 0F 84 85 00 00 00  je          00000000000000EE
  0000000000000069: 33 C0              xor         eax,eax
  000000000000006B: 83 F8 01           cmp         eax,1
  000000000000006E: 74 7E              je          00000000000000EE
  0000000000000070: 48 C7 44 24 58 00  mov         qword ptr [rsp+58h],0
                    00 00 00
  0000000000000079: 48 C7 44 24 50 00  mov         qword ptr [rsp+50h],0
                    00 00 00
  0000000000000082: 48 C7 44 24 48 00  mov         qword ptr [rsp+48h],0
                    00 00 00
  000000000000008B: 4C 8D 4C 24 48     lea         r9,[rsp+48h]
  0000000000000090: 4C 8D 44 24 50     lea         r8,[rsp+50h]
  0000000000000095: 48 8D 54 24 58     lea         rdx,[rsp+58h]
  000000000000009A: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  00000000000000A2: FF 15 00 00 00 00  call        qword ptr [__imp__get_stream_buffer_pointers]
  00000000000000A8: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000AD: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000B2: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000B7: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000BC: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000C1: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000C6: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000CB: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000000D0: 4C 8B 4C 24 48     mov         r9,qword ptr [rsp+48h]
  00000000000000D5: 4C 8B 44 24 50     mov         r8,qword ptr [rsp+50h]
  00000000000000DA: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  00000000000000DF: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000000E7: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAPEAD0PEAH001@Z]
  00000000000000ED: 90                 nop
  00000000000000EE: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  00000000000000F6: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  00000000000000FE: 48 89 88 80 00 00  mov         qword ptr [rax+80h],rcx
                    00
  0000000000000105: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  000000000000010D: 48 8B 0D 00 00 00  mov         rcx,qword ptr [?_Stinit@?1??_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@23@@Z@4U_Mbstatet@@A]
                    00
  0000000000000114: 48 89 48 74        mov         qword ptr [rax+74h],rcx
  0000000000000118: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000120: 48 C7 40 68 00 00  mov         qword ptr [rax+68h],0
                    00 00
  0000000000000128: 48 83 C4 78        add         rsp,78h
  000000000000012C: C3                 ret

?_Lock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ (public: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Lock(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000016: 74 13              je          000000000000002B
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000024: FF 15 00 00 00 00  call        qword ptr [__imp__lock_file]
  000000000000002A: 90                 nop
  000000000000002B: 48 83 C4 28        add         rsp,28h
  000000000000002F: C3                 ret

?_Maklocwcs@std@@YAPEA_WPEB_W@Z (wchar_t * __cdecl std::_Maklocwcs(wchar_t const *)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000000E: FF 15 00 00 00 00  call        qword ptr [__imp_wcslen]
  0000000000000014: 48 FF C0           inc         rax
  0000000000000017: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000001C: BA 02 00 00 00     mov         edx,2
  0000000000000021: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000026: FF 15 00 00 00 00  call        qword ptr [__imp_calloc]
  000000000000002C: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000031: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000037: 75 06              jne         000000000000003F
  0000000000000039: E8 00 00 00 00     call        ?_Xbad_alloc@std@@YAXXZ
  000000000000003E: 90                 nop
  000000000000003F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000044: 48 D1 E0           shl         rax,1
  0000000000000047: 4C 8B C0           mov         r8,rax
  000000000000004A: 48 8B 54 24 40     mov         rdx,qword ptr [rsp+40h]
  000000000000004F: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000054: E8 00 00 00 00     call        memcpy
  0000000000000059: 90                 nop
  000000000000005A: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000005F: 48 83 C4 38        add         rsp,38h
  0000000000000063: C3                 ret

?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ (public: char * __cdecl std::_String_val<struct std::_Simple_types<char> >::_Myptr(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000013: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000018: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  000000000000001D: 76 0A              jbe         0000000000000029
  000000000000001F: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000027: EB 08              jmp         0000000000000031
  0000000000000029: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  0000000000000031: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000036: 88 04 24           mov         byte ptr [rsp],al
  0000000000000039: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  000000000000003D: 0F B6 C0           movzx       eax,al
  0000000000000040: 85 C0              test        eax,eax
  0000000000000042: 74 21              je          0000000000000065
  0000000000000044: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000049: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000004C: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000051: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000056: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000005B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000060: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000065: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000006A: 48 83 C4 28        add         rsp,28h
  000000000000006E: C3                 ret

?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ (private: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Reset_back(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000E: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: 48 83 C1 70        add         rcx,70h
  000000000000001D: 48 3B C1           cmp         rax,rcx
  0000000000000020: 75 30              jne         0000000000000052
  0000000000000022: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000027: 4C 8B 88 90 00 00  mov         r9,qword ptr [rax+90h]
                    00
  000000000000002E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000033: 4C 8B 80 88 00 00  mov         r8,qword ptr [rax+88h]
                    00
  000000000000003A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000003F: 48 8B 90 88 00 00  mov         rdx,qword ptr [rax+88h]
                    00
  0000000000000046: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000004B: FF 15 00 00 00 00  call        qword ptr [__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z]
  0000000000000051: 90                 nop
  0000000000000052: 48 83 C4 28        add         rsp,28h
  0000000000000056: C3                 ret

?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ (private: void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Set_back(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000000E: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000014: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000019: 48 83 C1 70        add         rcx,70h
  000000000000001D: 48 3B C1           cmp         rax,rcx
  0000000000000020: 74 2E              je          0000000000000050
  0000000000000022: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000027: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000002D: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000032: 48 89 81 88 00 00  mov         qword ptr [rcx+88h],rax
                    00
  0000000000000039: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000003E: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000044: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000049: 48 89 81 90 00 00  mov         qword ptr [rcx+90h],rax
                    00
  0000000000000050: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000055: 48 83 C0 71        add         rax,71h
  0000000000000059: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  000000000000005E: 48 83 C1 70        add         rcx,70h
  0000000000000062: 48 8B 54 24 30     mov         rdx,qword ptr [rsp+30h]
  0000000000000067: 48 83 C2 70        add         rdx,70h
  000000000000006B: 4C 8B C8           mov         r9,rax
  000000000000006E: 4C 8B C1           mov         r8,rcx
  0000000000000071: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000076: FF 15 00 00 00 00  call        qword ptr [__imp_?setg@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXPEAD00@Z]
  000000000000007C: 90                 nop
  000000000000007D: 48 83 C4 28        add         rsp,28h
  0000000000000081: C3                 ret

?_Throw_bad_array_new_length@std@@YAXXZ (void __cdecl std::_Throw_bad_array_new_length(void)):
  0000000000000000: 48 83 EC 48        sub         rsp,48h
  0000000000000004: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  0000000000000009: E8 00 00 00 00     call        ??0bad_array_new_length@std@@QEAA@XZ
  000000000000000E: 48 8D 15 00 00 00  lea         rdx,[_TI3?AVbad_array_new_length@std@@]
                    00
  0000000000000015: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000001A: E8 00 00 00 00     call        _CxxThrowException
  000000000000001F: 90                 nop
  0000000000000020: 48 83 C4 48        add         rsp,48h
  0000000000000024: C3                 ret

?_Throw_bad_cast@std@@YAXXZ (void __cdecl std::_Throw_bad_cast(void)):
  0000000000000000: 48 83 EC 48        sub         rsp,48h
  0000000000000004: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  0000000000000009: E8 00 00 00 00     call        ??0bad_cast@std@@QEAA@XZ
  000000000000000E: 48 8D 15 00 00 00  lea         rdx,[_TI2?AVbad_cast@std@@]
                    00
  0000000000000015: 48 8D 4C 24 20     lea         rcx,[rsp+20h]
  000000000000001A: E8 00 00 00 00     call        _CxxThrowException
  000000000000001F: 90                 nop
  0000000000000020: 48 83 C4 48        add         rsp,48h
  0000000000000024: C3                 ret

?_Tidy@?$vector@NV?$allocator@N@std@@@std@@AEAAXXZ (private: void __cdecl std::vector<double,class std::allocator<double> >::_Tidy(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC 88 00 00  sub         rsp,88h
                    00
  000000000000000C: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  0000000000000014: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000019: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000001E: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000023: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000028: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  000000000000002D: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  0000000000000035: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000003A: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000003F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000044: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000049: 48 83 C0 08        add         rax,8
  000000000000004D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000052: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000057: 48 83 C0 10        add         rax,10h
  000000000000005B: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000060: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000065: 48 83 38 00        cmp         qword ptr [rax],0
  0000000000000069: 74 7E              je          00000000000000E9
  000000000000006B: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000070: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000073: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000078: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000007D: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000080: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000085: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000008A: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  000000000000008F: 48 8B 09           mov         rcx,qword ptr [rcx]
  0000000000000092: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000095: 48 2B C1           sub         rax,rcx
  0000000000000098: 48 C1 F8 03        sar         rax,3
  000000000000009C: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000A1: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000A6: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000A9: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000AE: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000B3: 48 C1 E0 03        shl         rax,3
  00000000000000B7: 48 8B D0           mov         rdx,rax
  00000000000000BA: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  00000000000000BF: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  00000000000000C4: 90                 nop
  00000000000000C5: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000CA: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  00000000000000D1: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000D6: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  00000000000000DD: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000E2: 48 C7 00 00 00 00  mov         qword ptr [rax],0
                    00
  00000000000000E9: 48 81 C4 88 00 00  add         rsp,88h
                    00
  00000000000000F0: C3                 ret

?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ (private: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::_Tidy_deallocate(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 78        sub         rsp,78h
  0000000000000009: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000011: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000016: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000001B: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  0000000000000020: 76 0A              jbe         000000000000002C
  0000000000000022: C7 44 24 30 01 00  mov         dword ptr [rsp+30h],1
                    00 00
  000000000000002A: EB 08              jmp         0000000000000034
  000000000000002C: C7 44 24 30 00 00  mov         dword ptr [rsp+30h],0
                    00 00
  0000000000000034: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  0000000000000039: 88 44 24 21        mov         byte ptr [rsp+21h],al
  000000000000003D: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  0000000000000042: 0F B6 C0           movzx       eax,al
  0000000000000045: 85 C0              test        eax,eax
  0000000000000047: 0F 84 98 00 00 00  je          00000000000000E5
  000000000000004D: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000055: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000005A: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000005F: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000064: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000069: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  000000000000006E: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000073: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000077: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  000000000000007C: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000081: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000084: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000089: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  000000000000008E: 48 FF C0           inc         rax
  0000000000000091: 48 8B D0           mov         rdx,rax
  0000000000000094: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000099: E8 00 00 00 00     call        ??$_Deallocate@$0BA@@std@@YAXPEAX_K@Z
  000000000000009E: 90                 nop
  000000000000009F: C6 44 24 22 00     mov         byte ptr [rsp+22h],0
  00000000000000A4: 0F B6 44 24 22     movzx       eax,byte ptr [rsp+22h]
  00000000000000A9: 0F B6 C0           movzx       eax,al
  00000000000000AC: 85 C0              test        eax,eax
  00000000000000AE: 74 35              je          00000000000000E5
  00000000000000B0: 48 C7 44 24 38 00  mov         qword ptr [rsp+38h],0
                    00 00 00
  00000000000000B9: EB 0D              jmp         00000000000000C8
  00000000000000BB: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000C0: 48 FF C0           inc         rax
  00000000000000C3: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000C8: 48 83 7C 24 38 10  cmp         qword ptr [rsp+38h],10h
  00000000000000CE: 73 15              jae         00000000000000E5
  00000000000000D0: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  00000000000000D5: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000DA: 48 03 C8           add         rcx,rax
  00000000000000DD: 48 8B C1           mov         rax,rcx
  00000000000000E0: C6 00 00           mov         byte ptr [rax],0
  00000000000000E3: EB D6              jmp         00000000000000BB
  00000000000000E5: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000EA: 48 C7 40 10 00 00  mov         qword ptr [rax+10h],0
                    00 00
  00000000000000F2: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000F7: 48 C7 40 18 0F 00  mov         qword ptr [rax+18h],0Fh
                    00 00
  00000000000000FF: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000104: B8 01 00 00 00     mov         eax,1
  0000000000000109: 48 6B C0 00        imul        rax,rax,0
  000000000000010D: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000112: 48 03 C8           add         rcx,rax
  0000000000000115: 48 8B C1           mov         rax,rcx
  0000000000000118: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000011D: C6 44 24 23 00     mov         byte ptr [rsp+23h],0
  0000000000000122: 0F B6 44 24 23     movzx       eax,byte ptr [rsp+23h]
  0000000000000127: 0F B6 C0           movzx       eax,al
  000000000000012A: 85 C0              test        eax,eax
  000000000000012C: 74 0E              je          000000000000013C
  000000000000012E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000133: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  0000000000000138: 88 08              mov         byte ptr [rax],cl
  000000000000013A: EB 0C              jmp         0000000000000148
  000000000000013C: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000141: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  0000000000000146: 88 08              mov         byte ptr [rax],cl
  0000000000000148: 48 83 C4 78        add         rsp,78h
  000000000000014C: C3                 ret

?_Unlock@?$basic_filebuf@DU?$char_traits@D@std@@@std@@UEAAXXZ (public: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::_Unlock(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 28        sub         rsp,28h
  0000000000000009: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000000E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000016: 74 13              je          000000000000002B
  0000000000000018: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001D: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000024: FF 15 00 00 00 00  call        qword ptr [__imp__unlock_file]
  000000000000002A: 90                 nop
  000000000000002B: 48 83 C4 28        add         rsp,28h
  000000000000002F: C3                 ret

?_Xlen_string@std@@YAXXZ (void __cdecl std::_Xlen_string(void)):
  0000000000000000: 48 83 EC 28        sub         rsp,28h
  0000000000000004: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BA@JFNIOLAK@string?5too?5long@]
                    00
  000000000000000B: E8 00 00 00 00     call        ?_Xlength_error@std@@YAXPEBD@Z
  0000000000000010: 90                 nop
  0000000000000011: 48 83 C4 28        add         rsp,28h
  0000000000000015: C3                 ret

?_Xlength@?$vector@NV?$allocator@N@std@@@std@@CAXXZ (private: static void __cdecl std::vector<double,class std::allocator<double> >::_Xlength(void)):
  0000000000000000: 48 83 EC 28        sub         rsp,28h
  0000000000000004: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BA@FOIKENOD@vector?5too?5long@]
                    00
  000000000000000B: E8 00 00 00 00     call        ?_Xlength_error@std@@YAXPEBD@Z
  0000000000000010: 90                 nop
  0000000000000011: 48 83 C4 28        add         rsp,28h
  0000000000000015: C3                 ret

?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ (public: static void __cdecl std::_String_val<struct std::_Simple_types<char> >::_Xran(void)):
  0000000000000000: 48 83 EC 28        sub         rsp,28h
  0000000000000004: 48 8D 0D 00 00 00  lea         rcx,[??_C@_0BI@CFPLBAOH@invalid?5string?5position@]
                    00
  000000000000000B: E8 00 00 00 00     call        ?_Xout_of_range@std@@YAXPEBD@Z
  0000000000000010: 90                 nop
  0000000000000011: 48 83 C4 28        add         rsp,28h
  0000000000000015: C3                 ret

?c_str@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ (public: char const * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::c_str(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000013: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000018: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000001D: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000022: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  0000000000000027: 76 0A              jbe         0000000000000033
  0000000000000029: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000031: EB 08              jmp         000000000000003B
  0000000000000033: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  000000000000003B: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000040: 88 04 24           mov         byte ptr [rsp],al
  0000000000000043: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  0000000000000047: 0F B6 C0           movzx       eax,al
  000000000000004A: 85 C0              test        eax,eax
  000000000000004C: 74 21              je          000000000000006F
  000000000000004E: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000053: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000056: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000005B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000060: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000065: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000006A: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000006F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000074: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000079: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000007E: 48 83 C4 38        add         rsp,38h
  0000000000000082: C3                 ret

?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::close(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000016: 74 4F              je          0000000000000067
  0000000000000018: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000001D: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  0000000000000022: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000027: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002C: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000031: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  0000000000000036: 0F B6 C0           movzx       eax,al
  0000000000000039: 85 C0              test        eax,eax
  000000000000003B: 75 09              jne         0000000000000046
  000000000000003D: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000046: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000004B: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000052: FF 15 00 00 00 00  call        qword ptr [__imp_fclose]
  0000000000000058: 85 C0              test        eax,eax
  000000000000005A: 74 09              je          0000000000000065
  000000000000005C: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000065: EB 09              jmp         0000000000000070
  0000000000000067: 48 C7 44 24 20 00  mov         qword ptr [rsp+20h],0
                    00 00 00
  0000000000000070: 41 B8 02 00 00 00  mov         r8d,2
  0000000000000076: 33 D2              xor         edx,edx
  0000000000000078: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000007D: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000082: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000087: 48 83 C4 38        add         rsp,38h
  000000000000008B: C3                 ret

?close@?$basic_ifstream@DU?$char_traits@D@std@@@std@@QEAAXXZ (public: void __cdecl std::basic_ifstream<char,struct std::char_traits<char> >::close(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 83 C0 10        add         rax,10h
  0000000000000012: 48 8B C8           mov         rcx,rax
  0000000000000015: E8 00 00 00 00     call        ?close@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@XZ
  000000000000001A: 48 85 C0           test        rax,rax
  000000000000001D: 75 30              jne         000000000000004F
  000000000000001F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000024: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000027: 48 63 40 04        movsxd      rax,dword ptr [rax+4]
  000000000000002B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000030: 48 03 C8           add         rcx,rax
  0000000000000033: 48 8B C1           mov         rax,rcx
  0000000000000036: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000003B: 45 33 C0           xor         r8d,r8d
  000000000000003E: BA 02 00 00 00     mov         edx,2
  0000000000000043: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000048: FF 15 00 00 00 00  call        qword ptr [__imp_?setstate@?$basic_ios@DU?$char_traits@D@std@@@std@@QEAAXH_N@Z]
  000000000000004E: 90                 nop
  000000000000004F: 48 83 C4 38        add         rsp,38h
  0000000000000053: C3                 ret

?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ (public: char * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::data(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000013: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000018: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000001D: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000022: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  0000000000000027: 76 0A              jbe         0000000000000033
  0000000000000029: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000031: EB 08              jmp         000000000000003B
  0000000000000033: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  000000000000003B: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000040: 88 04 24           mov         byte ptr [rsp],al
  0000000000000043: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  0000000000000047: 0F B6 C0           movzx       eax,al
  000000000000004A: 85 C0              test        eax,eax
  000000000000004C: 74 21              je          000000000000006F
  000000000000004E: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000053: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000056: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000005B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000060: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000065: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000006A: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000006F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000074: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000079: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000007E: 48 83 C4 38        add         rsp,38h
  0000000000000082: C3                 ret

?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBAPEBDXZ (public: char const * __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::data(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000013: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000018: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000001D: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000022: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  0000000000000027: 76 0A              jbe         0000000000000033
  0000000000000029: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000031: EB 08              jmp         000000000000003B
  0000000000000033: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  000000000000003B: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000040: 88 04 24           mov         byte ptr [rsp],al
  0000000000000043: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  0000000000000047: 0F B6 C0           movzx       eax,al
  000000000000004A: 85 C0              test        eax,eax
  000000000000004C: 74 21              je          000000000000006F
  000000000000004E: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000053: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000056: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000005B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000060: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000065: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000006A: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000006F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000074: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000079: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000007E: 48 83 C4 38        add         rsp,38h
  0000000000000082: C3                 ret

?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KAEBV12@_K@Z (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &,unsigned __int64)const ):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  0000000000000016: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  000000000000001E: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000022: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  000000000000002A: 48 8B 84 24 C8 00  mov         rax,qword ptr [rsp+0C8h]
                    00 00
  0000000000000032: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000037: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000003C: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000041: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000046: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  000000000000004B: 76 0A              jbe         0000000000000057
  000000000000004D: C7 44 24 34 01 00  mov         dword ptr [rsp+34h],1
                    00 00
  0000000000000055: EB 08              jmp         000000000000005F
  0000000000000057: C7 44 24 34 00 00  mov         dword ptr [rsp+34h],0
                    00 00
  000000000000005F: 0F B6 44 24 34     movzx       eax,byte ptr [rsp+34h]
  0000000000000064: 88 44 24 30        mov         byte ptr [rsp+30h],al
  0000000000000068: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  000000000000006D: 0F B6 C0           movzx       eax,al
  0000000000000070: 85 C0              test        eax,eax
  0000000000000072: 74 21              je          0000000000000095
  0000000000000074: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000079: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000007C: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000081: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000086: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  000000000000008B: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000090: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000095: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000009A: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000009F: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000A4: 48 89 84 24 98 00  mov         qword ptr [rsp+98h],rax
                    00 00
  00000000000000AC: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000B4: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  00000000000000B8: 48 89 84 24 A0 00  mov         qword ptr [rsp+0A0h],rax
                    00 00
  00000000000000C0: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000000C8: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000CD: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000D2: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000D7: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000DC: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  00000000000000E1: 76 0A              jbe         00000000000000ED
  00000000000000E3: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  00000000000000EB: EB 08              jmp         00000000000000F5
  00000000000000ED: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  00000000000000F5: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  00000000000000FA: 88 44 24 31        mov         byte ptr [rsp+31h],al
  00000000000000FE: 0F B6 44 24 31     movzx       eax,byte ptr [rsp+31h]
  0000000000000103: 0F B6 C0           movzx       eax,al
  0000000000000106: 85 C0              test        eax,eax
  0000000000000108: 74 27              je          0000000000000131
  000000000000010A: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000010F: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000112: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000117: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  000000000000011C: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000124: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  000000000000012C: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  0000000000000131: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000136: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  000000000000013E: 48 8B 84 24 88 00  mov         rax,qword ptr [rsp+88h]
                    00 00
  0000000000000146: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  000000000000014E: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  0000000000000156: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000015B: 4C 8B 8C 24 98 00  mov         r9,qword ptr [rsp+98h]
                    00 00
  0000000000000163: 4C 8B 84 24 D0 00  mov         r8,qword ptr [rsp+0D0h]
                    00 00
  000000000000016B: 48 8B 94 24 A0 00  mov         rdx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000173: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  000000000000017B: E8 00 00 00 00     call        ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
  0000000000000180: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  0000000000000187: C3                 ret

?find@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KQEBD_K@Z (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::find(char const * const,unsigned __int64)const ):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC 98 00 00  sub         rsp,98h
                    00
  0000000000000016: 48 8B 84 24 A8 00  mov         rax,qword ptr [rsp+0A8h]
                    00 00
  000000000000001E: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  0000000000000023: 48 C7 44 24 38 FF  mov         qword ptr [rsp+38h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000002C: 48 FF 44 24 38     inc         qword ptr [rsp+38h]
  0000000000000031: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000036: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000003B: 80 3C 08 00        cmp         byte ptr [rax+rcx],0
  000000000000003F: 75 EB              jne         000000000000002C
  0000000000000041: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000046: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  000000000000004B: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000050: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000055: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000005D: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000061: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000069: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000071: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000076: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000007B: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000080: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000085: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  000000000000008A: 76 0A              jbe         0000000000000096
  000000000000008C: C7 44 24 34 01 00  mov         dword ptr [rsp+34h],1
                    00 00
  0000000000000094: EB 08              jmp         000000000000009E
  0000000000000096: C7 44 24 34 00 00  mov         dword ptr [rsp+34h],0
                    00 00
  000000000000009E: 0F B6 44 24 34     movzx       eax,byte ptr [rsp+34h]
  00000000000000A3: 88 44 24 30        mov         byte ptr [rsp+30h],al
  00000000000000A7: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  00000000000000AC: 0F B6 C0           movzx       eax,al
  00000000000000AF: 85 C0              test        eax,eax
  00000000000000B1: 74 21              je          00000000000000D4
  00000000000000B3: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000B8: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000BB: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000C0: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000C5: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000CA: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000CF: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000D4: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000D9: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000000DE: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000E3: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  00000000000000EB: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  00000000000000F0: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000000F5: 4C 8B 8C 24 A8 00  mov         r9,qword ptr [rsp+0A8h]
                    00 00
  00000000000000FD: 4C 8B 84 24 B0 00  mov         r8,qword ptr [rsp+0B0h]
                    00 00
  0000000000000105: 48 8B 94 24 80 00  mov         rdx,qword ptr [rsp+80h]
                    00 00
  000000000000010D: 48 8B 8C 24 88 00  mov         rcx,qword ptr [rsp+88h]
                    00 00
  0000000000000115: E8 00 00 00 00     call        ??$_Traits_find@U?$char_traits@D@std@@@std@@YA_KQEBD_K101@Z
  000000000000011A: 48 81 C4 98 00 00  add         rsp,98h
                    00
  0000000000000121: C3                 ret

?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ (public: char & __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::front(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 38        sub         rsp,38h
  0000000000000009: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000000E: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000013: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000018: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000001D: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000022: 48 83 78 18 0F     cmp         qword ptr [rax+18h],0Fh
  0000000000000027: 76 0A              jbe         0000000000000033
  0000000000000029: C7 44 24 04 01 00  mov         dword ptr [rsp+4],1
                    00 00
  0000000000000031: EB 08              jmp         000000000000003B
  0000000000000033: C7 44 24 04 00 00  mov         dword ptr [rsp+4],0
                    00 00
  000000000000003B: 0F B6 44 24 04     movzx       eax,byte ptr [rsp+4]
  0000000000000040: 88 04 24           mov         byte ptr [rsp],al
  0000000000000043: 0F B6 04 24        movzx       eax,byte ptr [rsp]
  0000000000000047: 0F B6 C0           movzx       eax,al
  000000000000004A: 85 C0              test        eax,eax
  000000000000004C: 74 21              je          000000000000006F
  000000000000004E: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  0000000000000053: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000056: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000005B: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000060: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000065: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000006A: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000006F: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000074: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000079: B8 01 00 00 00     mov         eax,1
  000000000000007E: 48 6B C0 00        imul        rax,rax,0
  0000000000000082: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000087: 48 03 C8           add         rcx,rax
  000000000000008A: 48 8B C1           mov         rax,rcx
  000000000000008D: 48 83 C4 38        add         rsp,38h
  0000000000000091: C3                 ret

?imbue@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAXAEBVlocale@2@@Z (protected: virtual void __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::imbue(class std::locale const &)):
  0000000000000000: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  0000000000000005: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000A: 48 83 EC 38        sub         rsp,38h
  000000000000000E: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000013: E8 00 00 00 00     call        ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
  0000000000000018: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000001D: 48 8B 4C 24 20     mov         rcx,qword ptr [rsp+20h]
  0000000000000022: FF 15 00 00 00 00  call        qword ptr [__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ]
  0000000000000028: 0F B6 C0           movzx       eax,al
  000000000000002B: 85 C0              test        eax,eax
  000000000000002D: 74 0F              je          000000000000003E
  000000000000002F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000034: 48 C7 40 68 00 00  mov         qword ptr [rax+68h],0
                    00 00
  000000000000003C: EB 24              jmp         0000000000000062
  000000000000003E: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000043: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000048: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000004D: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000052: 48 89 41 68        mov         qword ptr [rcx+68h],rax
  0000000000000056: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000005B: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ]
  0000000000000061: 90                 nop
  0000000000000062: 48 83 C4 38        add         rsp,38h
  0000000000000066: C3                 ret

?max_size@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEBA_KXZ (public: unsigned __int64 __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::max_size(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC 88 00 00  sub         rsp,88h
                    00
  000000000000000C: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+0000000000000090h]
                    00 00
  0000000000000014: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000019: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000001E: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000023: 48 C7 44 24 38 FF  mov         qword ptr [rsp+38h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000002C: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000031: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000036: 48 C7 04 24 10 00  mov         qword ptr [rsp],10h
                    00 00
  000000000000003E: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000042: 48 39 44 24 08     cmp         qword ptr [rsp+8],rax
  0000000000000047: 73 0B              jae         0000000000000054
  0000000000000049: 48 8D 04 24        lea         rax,[rsp]
  000000000000004D: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000052: EB 0A              jmp         000000000000005E
  0000000000000054: 48 8D 44 24 08     lea         rax,[rsp+8]
  0000000000000059: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000005E: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  0000000000000063: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000068: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  000000000000006D: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000072: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000077: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000007A: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  000000000000007F: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000084: 48 FF C8           dec         rax
  0000000000000087: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  000000000000008C: 48 C7 44 24 78 FF  mov         qword ptr [rsp+78h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  0000000000000095: 48 B8 FF FF FF FF  mov         rax,7FFFFFFFFFFFFFFFh
                    FF FF FF 7F
  000000000000009F: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000A4: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000A9: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000000AE: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000B3: 48 39 44 24 18     cmp         qword ptr [rsp+18h],rax
  00000000000000B8: 73 0C              jae         00000000000000C6
  00000000000000BA: 48 8D 44 24 18     lea         rax,[rsp+18h]
  00000000000000BF: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000C4: EB 0A              jmp         00000000000000D0
  00000000000000C6: 48 8D 44 24 20     lea         rax,[rsp+20h]
  00000000000000CB: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000000D0: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000D5: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  00000000000000DA: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000DF: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000E4: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000E9: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000EC: 48 81 C4 88 00 00  add         rsp,88h
                    00
  00000000000000F3: C3                 ret

?max_size@?$vector@NV?$allocator@N@std@@@std@@QEBA_KXZ (public: unsigned __int64 __cdecl std::vector<double,class std::allocator<double> >::max_size(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 58        sub         rsp,58h
  0000000000000009: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000000E: 48 89 44 24 18     mov         qword ptr [rsp+18h],rax
  0000000000000013: 48 8B 44 24 18     mov         rax,qword ptr [rsp+18h]
  0000000000000018: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000001D: 48 B8 FF FF FF FF  mov         rax,1FFFFFFFFFFFFFFFh
                    FF FF FF 1F
  0000000000000027: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000002C: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000031: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000035: 48 C7 44 24 48 FF  mov         qword ptr [rsp+48h],0FFFFFFFFFFFFFFFFh
                    FF FF FF
  000000000000003E: 48 B8 FF FF FF FF  mov         rax,7FFFFFFFFFFFFFFFh
                    FF FF FF 7F
  0000000000000048: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000004D: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000052: 48 89 44 24 08     mov         qword ptr [rsp+8],rax
  0000000000000057: 48 8B 44 24 08     mov         rax,qword ptr [rsp+8]
  000000000000005C: 48 39 04 24        cmp         qword ptr [rsp],rax
  0000000000000060: 73 0B              jae         000000000000006D
  0000000000000062: 48 8D 04 24        lea         rax,[rsp]
  0000000000000066: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  000000000000006B: EB 0A              jmp         0000000000000077
  000000000000006D: 48 8D 44 24 08     lea         rax,[rsp+8]
  0000000000000072: 48 89 44 24 10     mov         qword ptr [rsp+10h],rax
  0000000000000077: 48 8B 44 24 10     mov         rax,qword ptr [rsp+10h]
  000000000000007C: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000081: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000086: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  000000000000008B: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000090: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000093: 48 83 C4 58        add         rsp,58h
  0000000000000097: C3                 ret

?move@?$_Char_traits@DH@std@@SAPEADQEADQEBD_K@Z (public: static char * __cdecl std::_Char_traits<char,int>::move(char * const,char const * const,unsigned __int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 48        sub         rsp,48h
  0000000000000013: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  0000000000000018: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  000000000000001D: 0F B6 C0           movzx       eax,al
  0000000000000020: 85 C0              test        eax,eax
  0000000000000022: 0F 84 F1 00 00 00  je          0000000000000119
  0000000000000028: C6 44 24 20 01     mov         byte ptr [rsp+20h],1
  000000000000002D: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000032: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000037: EB 0D              jmp         0000000000000046
  0000000000000039: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000003E: 48 FF C0           inc         rax
  0000000000000041: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000046: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000004B: 48 8B 4C 24 58     mov         rcx,qword ptr [rsp+58h]
  0000000000000050: 48 03 C8           add         rcx,rax
  0000000000000053: 48 8B C1           mov         rax,rcx
  0000000000000056: 48 39 44 24 38     cmp         qword ptr [rsp+38h],rax
  000000000000005B: 74 15              je          0000000000000072
  000000000000005D: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000062: 48 39 44 24 50     cmp         qword ptr [rsp+50h],rax
  0000000000000067: 75 07              jne         0000000000000070
  0000000000000069: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  000000000000006E: EB 02              jmp         0000000000000072
  0000000000000070: EB C7              jmp         0000000000000039
  0000000000000072: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000077: 85 C0              test        eax,eax
  0000000000000079: 74 4D              je          00000000000000C8
  000000000000007B: 48 C7 44 24 28 00  mov         qword ptr [rsp+28h],0
                    00 00 00
  0000000000000084: EB 0D              jmp         0000000000000093
  0000000000000086: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000008B: 48 FF C0           inc         rax
  000000000000008E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000093: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000098: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  000000000000009D: 74 27              je          00000000000000C6
  000000000000009F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000A4: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000A9: 48 03 C8           add         rcx,rax
  00000000000000AC: 48 8B C1           mov         rax,rcx
  00000000000000AF: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000B4: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  00000000000000B9: 48 03 D1           add         rdx,rcx
  00000000000000BC: 48 8B CA           mov         rcx,rdx
  00000000000000BF: 0F B6 09           movzx       ecx,byte ptr [rcx]
  00000000000000C2: 88 08              mov         byte ptr [rax],cl
  00000000000000C4: EB C0              jmp         0000000000000086
  00000000000000C6: EB 4A              jmp         0000000000000112
  00000000000000C8: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000CD: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000D2: EB 0D              jmp         00000000000000E1
  00000000000000D4: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000D9: 48 FF C8           dec         rax
  00000000000000DC: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000E1: 48 83 7C 24 30 00  cmp         qword ptr [rsp+30h],0
  00000000000000E7: 74 29              je          0000000000000112
  00000000000000E9: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000EE: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000F3: 48 03 C8           add         rcx,rax
  00000000000000F6: 48 8B C1           mov         rax,rcx
  00000000000000F9: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000FE: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  0000000000000103: 48 03 D1           add         rdx,rcx
  0000000000000106: 48 8B CA           mov         rcx,rdx
  0000000000000109: 0F B6 49 FF        movzx       ecx,byte ptr [rcx-1]
  000000000000010D: 88 48 FF           mov         byte ptr [rax-1],cl
  0000000000000110: EB C2              jmp         00000000000000D4
  0000000000000112: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000117: EB 19              jmp         0000000000000132
  0000000000000119: 4C 8B 44 24 60     mov         r8,qword ptr [rsp+60h]
  000000000000011E: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  0000000000000123: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000128: E8 00 00 00 00     call        memmove
  000000000000012D: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000132: 48 83 C4 48        add         rsp,48h
  0000000000000136: C3                 ret

?now@steady_clock@chrono@std@@SA?AV?$time_point@Usteady_clock@chrono@std@@V?$duration@_JU?$ratio@$00$0DLJKMKAA@@std@@@23@@23@XZ (public: static class std::chrono::time_point<struct std::chrono::steady_clock,class std::chrono::duration<__int64,struct std::ratio<1,1000000000> > > __cdecl std::chrono::steady_clock::now(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC B8 00 00  sub         rsp,0B8h
                    00
  000000000000000C: E8 00 00 00 00     call        _Query_perf_frequency
  0000000000000011: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000016: E8 00 00 00 00     call        _Query_perf_counter
  000000000000001B: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000020: 48 C7 84 24 98 00  mov         qword ptr [rsp+98h],989680h
                    00 00 80 96 98 00
  000000000000002C: 48 C7 84 24 A0 00  mov         qword ptr [rsp+0A0h],16E3600h
                    00 00 00 36 6E 01
  0000000000000038: 48 81 7C 24 28 80  cmp         qword ptr [rsp+28h],989680h
                    96 98 00
  0000000000000041: 75 50              jne         0000000000000093
  0000000000000043: 48 C7 84 24 A8 00  mov         qword ptr [rsp+0A8h],64h
                    00 00 64 00 00 00
  000000000000004F: 48 6B 44 24 20 64  imul        rax,qword ptr [rsp+20h],64h
  0000000000000055: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000005A: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000005F: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000064: 48 8D 44 24 38     lea         rax,[rsp+38h]
  0000000000000069: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000006E: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000073: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000076: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000007E: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000081: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000089: E9 35 01 00 00     jmp         00000000000001C3
  000000000000008E: E9 30 01 00 00     jmp         00000000000001C3
  0000000000000093: 48 81 7C 24 28 00  cmp         qword ptr [rsp+28h],16E3600h
                    36 6E 01
  000000000000009C: 0F 85 91 00 00 00  jne         0000000000000133
  00000000000000A2: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000A7: 48 99              cqo
  00000000000000A9: B9 00 36 6E 01     mov         ecx,16E3600h
  00000000000000AE: 48 F7 F9           idiv        rax,rcx
  00000000000000B1: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  00000000000000B8: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000BD: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000C2: 48 99              cqo
  00000000000000C4: B9 00 36 6E 01     mov         ecx,16E3600h
  00000000000000C9: 48 F7 F9           idiv        rax,rcx
  00000000000000CC: 48 8B C2           mov         rax,rdx
  00000000000000CF: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  00000000000000D6: 48 99              cqo
  00000000000000D8: B9 00 36 6E 01     mov         ecx,16E3600h
  00000000000000DD: 48 F7 F9           idiv        rax,rcx
  00000000000000E0: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  00000000000000E5: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  00000000000000EA: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000EF: 48 03 C8           add         rcx,rax
  00000000000000F2: 48 8B C1           mov         rax,rcx
  00000000000000F5: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000FA: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000FF: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000104: 48 8D 44 24 60     lea         rax,[rsp+60h]
  0000000000000109: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  000000000000010E: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000113: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000116: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000011E: 48 89 01           mov         qword ptr [rcx],rax
  0000000000000121: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  0000000000000129: E9 95 00 00 00     jmp         00000000000001C3
  000000000000012E: E9 90 00 00 00     jmp         00000000000001C3
  0000000000000133: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000138: 48 99              cqo
  000000000000013A: 48 F7 7C 24 28     idiv        rax,qword ptr [rsp+28h]
  000000000000013F: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  0000000000000146: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  000000000000014B: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000150: 48 99              cqo
  0000000000000152: 48 F7 7C 24 28     idiv        rax,qword ptr [rsp+28h]
  0000000000000157: 48 8B C2           mov         rax,rdx
  000000000000015A: 48 69 C0 00 CA 9A  imul        rax,rax,3B9ACA00h
                    3B
  0000000000000161: 48 99              cqo
  0000000000000163: 48 F7 7C 24 28     idiv        rax,qword ptr [rsp+28h]
  0000000000000168: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000016D: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  0000000000000172: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  0000000000000177: 48 03 C8           add         rcx,rax
  000000000000017A: 48 8B C1           mov         rax,rcx
  000000000000017D: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  0000000000000185: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  000000000000018D: 48 89 84 24 88 00  mov         qword ptr [rsp+88h],rax
                    00 00
  0000000000000195: 48 8D 84 24 88 00  lea         rax,[rsp+88h]
                    00 00
  000000000000019D: 48 89 84 24 90 00  mov         qword ptr [rsp+90h],rax
                    00 00
  00000000000001A5: 48 8B 84 24 90 00  mov         rax,qword ptr [rsp+90h]
                    00 00
  00000000000001AD: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000001B0: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000001B8: 48 89 01           mov         qword ptr [rcx],rax
  00000000000001BB: 48 8B 84 24 C0 00  mov         rax,qword ptr [rsp+0C0h]
                    00 00
  00000000000001C3: 48 81 C4 B8 00 00  add         rsp,0B8h
                    00
  00000000000001CA: C3                 ret

?open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z (public: class std::basic_filebuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::open(char const *,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 44 89 44 24 18     mov         dword ptr [rsp+18h],r8d
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 48 83 EC 68        sub         rsp,68h
  0000000000000018: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000001D: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000025: 74 07              je          000000000000002E
  0000000000000027: 33 C0              xor         eax,eax
  0000000000000029: E9 C6 00 00 00     jmp         00000000000000F4
  000000000000002E: 44 8B 84 24 88 00  mov         r8d,dword ptr [rsp+88h]
                    00 00
  0000000000000036: 8B 94 24 80 00 00  mov         edx,dword ptr [rsp+80h]
                    00
  000000000000003D: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  0000000000000042: E8 00 00 00 00     call        ?_Fiopen@std@@YAPEAU_iobuf@@PEBDHH@Z
  0000000000000047: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  000000000000004C: 48 83 7C 24 20 00  cmp         qword ptr [rsp+20h],0
  0000000000000052: 75 07              jne         000000000000005B
  0000000000000054: 33 C0              xor         eax,eax
  0000000000000056: E9 99 00 00 00     jmp         00000000000000F4
  000000000000005B: 41 B8 01 00 00 00  mov         r8d,1
  0000000000000061: 48 8B 54 24 20     mov         rdx,qword ptr [rsp+20h]
  0000000000000066: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000006B: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000070: 90                 nop
  0000000000000071: 48 8D 54 24 48     lea         rdx,[rsp+48h]
  0000000000000076: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000007B: FF 15 00 00 00 00  call        qword ptr [__imp_?getloc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@QEBA?AVlocale@2@XZ]
  0000000000000081: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000086: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000008B: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000090: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  0000000000000095: E8 00 00 00 00     call        ??$use_facet@V?$codecvt@DDU_Mbstatet@@@std@@@std@@YAAEBV?$codecvt@DDU_Mbstatet@@@0@AEBVlocale@0@@Z
  000000000000009A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000009F: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000A4: FF 15 00 00 00 00  call        qword ptr [__imp_?always_noconv@codecvt_base@std@@QEBA_NXZ]
  00000000000000AA: 0F B6 C0           movzx       eax,al
  00000000000000AD: 85 C0              test        eax,eax
  00000000000000AF: 74 0F              je          00000000000000C0
  00000000000000B1: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000B6: 48 C7 40 68 00 00  mov         qword ptr [rax+68h],0
                    00 00
  00000000000000BE: EB 24              jmp         00000000000000E4
  00000000000000C0: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000C5: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  00000000000000CA: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000CF: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  00000000000000D4: 48 89 41 68        mov         qword ptr [rcx+68h],rax
  00000000000000D8: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  00000000000000DD: FF 15 00 00 00 00  call        qword ptr [__imp_?_Init@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXXZ]
  00000000000000E3: 90                 nop
  00000000000000E4: 48 8D 4C 24 48     lea         rcx,[rsp+48h]
  00000000000000E9: E8 00 00 00 00     call        ??1locale@std@@QEAA@XZ
  00000000000000EE: 90                 nop
  00000000000000EF: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000F4: 48 83 C4 68        add         rsp,68h
  00000000000000F8: C3                 ret

?dtor$0@?0??open@?$basic_filebuf@DU?$char_traits@D@std@@@std@@QEAAPEAV12@PEBDHH@Z@4HA (int `public: class basic_filebuf<char,struct std::char_traits<char> >::open * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::open(char const *,int,int)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 4D 48        lea         rcx,[rbp+48h]
  000000000000000D: E8 00 00 00 00     call        ??1locale@std@@QEAA@XZ
  0000000000000012: 48 83 C4 20        add         rsp,20h
  0000000000000016: 5D                 pop         rbp
  0000000000000017: C3                 ret

?overflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::overflow(int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 81 EC 28 01 00  sub         rsp,128h
                    00
  0000000000000010: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  0000000000000017: 48 33 C4           xor         rax,rsp
  000000000000001A: 48 89 84 24 10 01  mov         qword ptr [rsp+110h],rax
                    00 00
  0000000000000022: C7 44 24 7C FF FF  mov         dword ptr [rsp+7Ch],0FFFFFFFFh
                    FF FF
  000000000000002A: 8B 44 24 7C        mov         eax,dword ptr [rsp+7Ch]
  000000000000002E: 3B 84 24 38 01 00  cmp         eax,dword ptr [rsp+138h]
                    00
  0000000000000035: 75 0A              jne         0000000000000041
  0000000000000037: C7 44 24 60 01 00  mov         dword ptr [rsp+60h],1
                    00 00
  000000000000003F: EB 08              jmp         0000000000000049
  0000000000000041: C7 44 24 60 00 00  mov         dword ptr [rsp+60h],0
                    00 00
  0000000000000049: 0F B6 44 24 60     movzx       eax,byte ptr [rsp+60h]
  000000000000004E: 88 44 24 42        mov         byte ptr [rsp+42h],al
  0000000000000052: 0F B6 44 24 42     movzx       eax,byte ptr [rsp+42h]
  0000000000000057: 0F B6 C0           movzx       eax,al
  000000000000005A: 85 C0              test        eax,eax
  000000000000005C: 74 6F              je          00000000000000CD
  000000000000005E: C7 84 24 80 00 00  mov         dword ptr [rsp+80h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000069: 8B 84 24 80 00 00  mov         eax,dword ptr [rsp+80h]
                    00
  0000000000000070: 39 84 24 38 01 00  cmp         dword ptr [rsp+138h],eax
                    00
  0000000000000077: 74 0D              je          0000000000000086
  0000000000000079: 8B 84 24 38 01 00  mov         eax,dword ptr [rsp+138h]
                    00
  0000000000000080: 89 44 24 68        mov         dword ptr [rsp+68h],eax
  0000000000000084: EB 30              jmp         00000000000000B6
  0000000000000086: C7 84 24 84 00 00  mov         dword ptr [rsp+84h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000091: 8B 84 24 84 00 00  mov         eax,dword ptr [rsp+84h]
                    00
  0000000000000098: 85 C0              test        eax,eax
  000000000000009A: 75 0A              jne         00000000000000A6
  000000000000009C: C7 44 24 64 01 00  mov         dword ptr [rsp+64h],1
                    00 00
  00000000000000A4: EB 08              jmp         00000000000000AE
  00000000000000A6: C7 44 24 64 00 00  mov         dword ptr [rsp+64h],0
                    00 00
  00000000000000AE: 8B 44 24 64        mov         eax,dword ptr [rsp+64h]
  00000000000000B2: 89 44 24 68        mov         dword ptr [rsp+68h],eax
  00000000000000B6: 8B 44 24 68        mov         eax,dword ptr [rsp+68h]
  00000000000000BA: 89 84 24 88 00 00  mov         dword ptr [rsp+88h],eax
                    00
  00000000000000C1: 8B 84 24 88 00 00  mov         eax,dword ptr [rsp+88h]
                    00
  00000000000000C8: E9 5D 03 00 00     jmp         000000000000042A
  00000000000000CD: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  00000000000000D5: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  00000000000000DB: 48 85 C0           test        rax,rax
  00000000000000DE: 74 67              je          0000000000000147
  00000000000000E0: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  00000000000000E8: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  00000000000000EE: 48 89 84 24 B0 00  mov         qword ptr [rsp+0B0h],rax
                    00 00
  00000000000000F6: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  00000000000000FE: FF 15 00 00 00 00  call        qword ptr [__imp_?epptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000104: 48 8B 8C 24 B0 00  mov         rcx,qword ptr [rsp+0B0h]
                    00 00
  000000000000010C: 48 3B C8           cmp         rcx,rax
  000000000000010F: 73 36              jae         0000000000000147
  0000000000000111: 0F B6 84 24 38 01  movzx       eax,byte ptr [rsp+138h]
                    00 00
  0000000000000119: 88 44 24 43        mov         byte ptr [rsp+43h],al
  000000000000011D: 0F B6 44 24 43     movzx       eax,byte ptr [rsp+43h]
  0000000000000122: 88 44 24 44        mov         byte ptr [rsp+44h],al
  0000000000000126: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  000000000000012E: FF 15 00 00 00 00  call        qword ptr [__imp_?_Pninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  0000000000000134: 0F B6 4C 24 44     movzx       ecx,byte ptr [rsp+44h]
  0000000000000139: 88 08              mov         byte ptr [rax],cl
  000000000000013B: 8B 84 24 38 01 00  mov         eax,dword ptr [rsp+138h]
                    00
  0000000000000142: E9 E3 02 00 00     jmp         000000000000042A
  0000000000000147: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  000000000000014F: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000157: 75 17              jne         0000000000000170
  0000000000000159: C7 84 24 8C 00 00  mov         dword ptr [rsp+8Ch],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000164: 8B 84 24 8C 00 00  mov         eax,dword ptr [rsp+8Ch]
                    00
  000000000000016B: E9 BA 02 00 00     jmp         000000000000042A
  0000000000000170: 48 8B 8C 24 30 01  mov         rcx,qword ptr [rsp+130h]
                    00 00
  0000000000000178: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  000000000000017D: 90                 nop
  000000000000017E: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000186: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  000000000000018B: 0F 85 99 00 00 00  jne         000000000000022A
  0000000000000191: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000199: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  00000000000001A0: 48 89 84 24 B8 00  mov         qword ptr [rsp+0B8h],rax
                    00 00
  00000000000001A8: 0F B6 84 24 38 01  movzx       eax,byte ptr [rsp+138h]
                    00 00
  00000000000001B0: 88 44 24 45        mov         byte ptr [rsp+45h],al
  00000000000001B4: 0F B6 44 24 45     movzx       eax,byte ptr [rsp+45h]
  00000000000001B9: 88 44 24 46        mov         byte ptr [rsp+46h],al
  00000000000001BD: 0F BE 44 24 46     movsx       eax,byte ptr [rsp+46h]
  00000000000001C2: 48 8B 94 24 B8 00  mov         rdx,qword ptr [rsp+0B8h]
                    00 00
  00000000000001CA: 8B C8              mov         ecx,eax
  00000000000001CC: FF 15 00 00 00 00  call        qword ptr [__imp_fputc]
  00000000000001D2: 83 F8 FF           cmp         eax,0FFFFFFFFh
  00000000000001D5: 74 0A              je          00000000000001E1
  00000000000001D7: C7 44 24 6C 01 00  mov         dword ptr [rsp+6Ch],1
                    00 00
  00000000000001DF: EB 08              jmp         00000000000001E9
  00000000000001E1: C7 44 24 6C 00 00  mov         dword ptr [rsp+6Ch],0
                    00 00
  00000000000001E9: 0F B6 44 24 6C     movzx       eax,byte ptr [rsp+6Ch]
  00000000000001EE: 88 44 24 47        mov         byte ptr [rsp+47h],al
  00000000000001F2: 0F B6 44 24 47     movzx       eax,byte ptr [rsp+47h]
  00000000000001F7: 0F B6 C0           movzx       eax,al
  00000000000001FA: 85 C0              test        eax,eax
  00000000000001FC: 74 0D              je          000000000000020B
  00000000000001FE: 8B 84 24 38 01 00  mov         eax,dword ptr [rsp+138h]
                    00
  0000000000000205: 89 44 24 70        mov         dword ptr [rsp+70h],eax
  0000000000000209: EB 16              jmp         0000000000000221
  000000000000020B: C7 84 24 90 00 00  mov         dword ptr [rsp+90h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000216: 8B 84 24 90 00 00  mov         eax,dword ptr [rsp+90h]
                    00
  000000000000021D: 89 44 24 70        mov         dword ptr [rsp+70h],eax
  0000000000000221: 8B 44 24 70        mov         eax,dword ptr [rsp+70h]
  0000000000000225: E9 00 02 00 00     jmp         000000000000042A
  000000000000022A: 48 C7 84 24 E0 00  mov         qword ptr [rsp+0E0h],20h
                    00 00 20 00 00 00
  0000000000000236: 0F B6 84 24 38 01  movzx       eax,byte ptr [rsp+138h]
                    00 00
  000000000000023E: 88 44 24 48        mov         byte ptr [rsp+48h],al
  0000000000000242: 0F B6 44 24 48     movzx       eax,byte ptr [rsp+48h]
  0000000000000247: 88 44 24 40        mov         byte ptr [rsp+40h],al
  000000000000024B: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000253: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  0000000000000257: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  000000000000025F: 48 8D 84 24 08 01  lea         rax,[rsp+108h]
                    00 00
  0000000000000267: 48 8D 4C 24 41     lea         rcx,[rsp+41h]
  000000000000026C: 48 8B 94 24 30 01  mov         rdx,qword ptr [rsp+130h]
                    00 00
  0000000000000274: 48 83 C2 74        add         rdx,74h
  0000000000000278: 4C 8D 84 24 C8 00  lea         r8,[rsp+0C8h]
                    00 00
  0000000000000280: 4C 89 44 24 38     mov         qword ptr [rsp+38h],r8
  0000000000000285: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000028A: 48 8D 84 24 E8 00  lea         rax,[rsp+0E8h]
                    00 00
  0000000000000292: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000297: 48 8D 84 24 D0 00  lea         rax,[rsp+0D0h]
                    00 00
  000000000000029F: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  00000000000002A4: 4C 8B C9           mov         r9,rcx
  00000000000002A7: 4C 8D 44 24 40     lea         r8,[rsp+40h]
  00000000000002AC: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  00000000000002B4: FF 15 00 00 00 00  call        qword ptr [__imp_?out@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z]
  00000000000002BA: 89 44 24 5C        mov         dword ptr [rsp+5Ch],eax
  00000000000002BE: 83 7C 24 5C 00     cmp         dword ptr [rsp+5Ch],0
  00000000000002C3: 74 17              je          00000000000002DC
  00000000000002C5: 83 7C 24 5C 01     cmp         dword ptr [rsp+5Ch],1
  00000000000002CA: 74 10              je          00000000000002DC
  00000000000002CC: 83 7C 24 5C 03     cmp         dword ptr [rsp+5Ch],3
  00000000000002D1: 0F 84 B7 00 00 00  je          000000000000038E
  00000000000002D7: E9 3C 01 00 00     jmp         0000000000000418
  00000000000002DC: 48 8D 84 24 E8 00  lea         rax,[rsp+0E8h]
                    00 00
  00000000000002E4: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  00000000000002EC: 48 2B C8           sub         rcx,rax
  00000000000002EF: 48 8B C1           mov         rax,rcx
  00000000000002F2: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  00000000000002FA: 48 83 BC 24 A8 00  cmp         qword ptr [rsp+0A8h],0
                    00 00 00
  0000000000000303: 76 4B              jbe         0000000000000350
  0000000000000305: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  000000000000030D: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  0000000000000314: 4C 8B 84 24 A8 00  mov         r8,qword ptr [rsp+0A8h]
                    00 00
  000000000000031C: BA 01 00 00 00     mov         edx,1
  0000000000000321: 48 8D 8C 24 E8 00  lea         rcx,[rsp+0E8h]
                    00 00
  0000000000000329: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  000000000000032F: 48 39 84 24 A8 00  cmp         qword ptr [rsp+0A8h],rax
                    00 00
  0000000000000337: 74 17              je          0000000000000350
  0000000000000339: C7 84 24 94 00 00  mov         dword ptr [rsp+94h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000344: 8B 84 24 94 00 00  mov         eax,dword ptr [rsp+94h]
                    00
  000000000000034B: E9 DA 00 00 00     jmp         000000000000042A
  0000000000000350: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000358: C6 40 71 01        mov         byte ptr [rax+71h],1
  000000000000035C: 48 8D 44 24 40     lea         rax,[rsp+40h]
  0000000000000361: 48 39 84 24 D0 00  cmp         qword ptr [rsp+0D0h],rax
                    00 00
  0000000000000369: 74 0C              je          0000000000000377
  000000000000036B: 8B 84 24 38 01 00  mov         eax,dword ptr [rsp+138h]
                    00
  0000000000000372: E9 B3 00 00 00     jmp         000000000000042A
  0000000000000377: C7 84 24 98 00 00  mov         dword ptr [rsp+98h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000382: 8B 84 24 98 00 00  mov         eax,dword ptr [rsp+98h]
                    00
  0000000000000389: E9 9C 00 00 00     jmp         000000000000042A
  000000000000038E: 48 8B 84 24 30 01  mov         rax,qword ptr [rsp+130h]
                    00 00
  0000000000000396: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  000000000000039D: 48 89 84 24 D8 00  mov         qword ptr [rsp+0D8h],rax
                    00 00
  00000000000003A5: 0F B6 44 24 40     movzx       eax,byte ptr [rsp+40h]
  00000000000003AA: 88 44 24 50        mov         byte ptr [rsp+50h],al
  00000000000003AE: 0F BE 44 24 50     movsx       eax,byte ptr [rsp+50h]
  00000000000003B3: 48 8B 94 24 D8 00  mov         rdx,qword ptr [rsp+0D8h]
                    00 00
  00000000000003BB: 8B C8              mov         ecx,eax
  00000000000003BD: FF 15 00 00 00 00  call        qword ptr [__imp_fputc]
  00000000000003C3: 83 F8 FF           cmp         eax,0FFFFFFFFh
  00000000000003C6: 74 0A              je          00000000000003D2
  00000000000003C8: C7 44 24 74 01 00  mov         dword ptr [rsp+74h],1
                    00 00
  00000000000003D0: EB 08              jmp         00000000000003DA
  00000000000003D2: C7 44 24 74 00 00  mov         dword ptr [rsp+74h],0
                    00 00
  00000000000003DA: 0F B6 44 24 74     movzx       eax,byte ptr [rsp+74h]
  00000000000003DF: 88 44 24 58        mov         byte ptr [rsp+58h],al
  00000000000003E3: 0F B6 44 24 58     movzx       eax,byte ptr [rsp+58h]
  00000000000003E8: 0F B6 C0           movzx       eax,al
  00000000000003EB: 85 C0              test        eax,eax
  00000000000003ED: 74 0D              je          00000000000003FC
  00000000000003EF: 8B 84 24 38 01 00  mov         eax,dword ptr [rsp+138h]
                    00
  00000000000003F6: 89 44 24 78        mov         dword ptr [rsp+78h],eax
  00000000000003FA: EB 16              jmp         0000000000000412
  00000000000003FC: C7 84 24 9C 00 00  mov         dword ptr [rsp+9Ch],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000407: 8B 84 24 9C 00 00  mov         eax,dword ptr [rsp+9Ch]
                    00
  000000000000040E: 89 44 24 78        mov         dword ptr [rsp+78h],eax
  0000000000000412: 8B 44 24 78        mov         eax,dword ptr [rsp+78h]
  0000000000000416: EB 12              jmp         000000000000042A
  0000000000000418: C7 84 24 A0 00 00  mov         dword ptr [rsp+0A0h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000423: 8B 84 24 A0 00 00  mov         eax,dword ptr [rsp+0A0h]
                    00
  000000000000042A: 48 8B 8C 24 10 01  mov         rcx,qword ptr [rsp+110h]
                    00 00
  0000000000000432: 48 33 CC           xor         rcx,rsp
  0000000000000435: E8 00 00 00 00     call        __security_check_cookie
  000000000000043A: 48 81 C4 28 01 00  add         rsp,128h
                    00
  0000000000000441: C3                 ret

?pbackfail@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHH@Z (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::pbackfail(int)):
  0000000000000000: 89 54 24 10        mov         dword ptr [rsp+10h],edx
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 81 EC 98 00 00  sub         rsp,98h
                    00
  0000000000000010: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000018: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000001E: 48 85 C0           test        rax,rax
  0000000000000021: 0F 84 41 01 00 00  je          0000000000000168
  0000000000000027: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000002F: FF 15 00 00 00 00  call        qword ptr [__imp_?eback@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000035: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000003A: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000042: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000048: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000004D: 48 3B C8           cmp         rcx,rax
  0000000000000050: 0F 83 12 01 00 00  jae         0000000000000168
  0000000000000056: C7 44 24 50 FF FF  mov         dword ptr [rsp+50h],0FFFFFFFFh
                    FF FF
  000000000000005E: 8B 44 24 50        mov         eax,dword ptr [rsp+50h]
  0000000000000062: 3B 84 24 A8 00 00  cmp         eax,dword ptr [rsp+0A8h]
                    00
  0000000000000069: 75 0A              jne         0000000000000075
  000000000000006B: C7 44 24 38 01 00  mov         dword ptr [rsp+38h],1
                    00 00
  0000000000000073: EB 08              jmp         000000000000007D
  0000000000000075: C7 44 24 38 00 00  mov         dword ptr [rsp+38h],0
                    00 00
  000000000000007D: 0F B6 44 24 38     movzx       eax,byte ptr [rsp+38h]
  0000000000000082: 88 44 24 20        mov         byte ptr [rsp+20h],al
  0000000000000086: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000008B: 0F B6 C0           movzx       eax,al
  000000000000008E: 85 C0              test        eax,eax
  0000000000000090: 75 66              jne         00000000000000F8
  0000000000000092: B8 01 00 00 00     mov         eax,1
  0000000000000097: 48 6B C0 FF        imul        rax,rax,0FFFFFFFFFFFFFFFFh
  000000000000009B: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  00000000000000A0: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  00000000000000A8: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  00000000000000AE: 48 8B 4C 24 78     mov         rcx,qword ptr [rsp+78h]
  00000000000000B3: 0F B6 04 08        movzx       eax,byte ptr [rax+rcx]
  00000000000000B7: 88 44 24 28        mov         byte ptr [rsp+28h],al
  00000000000000BB: 0F B6 44 24 28     movzx       eax,byte ptr [rsp+28h]
  00000000000000C0: 89 44 24 54        mov         dword ptr [rsp+54h],eax
  00000000000000C4: 8B 44 24 54        mov         eax,dword ptr [rsp+54h]
  00000000000000C8: 3B 84 24 A8 00 00  cmp         eax,dword ptr [rsp+0A8h]
                    00
  00000000000000CF: 75 0A              jne         00000000000000DB
  00000000000000D1: C7 44 24 3C 01 00  mov         dword ptr [rsp+3Ch],1
                    00 00
  00000000000000D9: EB 08              jmp         00000000000000E3
  00000000000000DB: C7 44 24 3C 00 00  mov         dword ptr [rsp+3Ch],0
                    00 00
  00000000000000E3: 0F B6 44 24 3C     movzx       eax,byte ptr [rsp+3Ch]
  00000000000000E8: 88 44 24 30        mov         byte ptr [rsp+30h],al
  00000000000000EC: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  00000000000000F1: 0F B6 C0           movzx       eax,al
  00000000000000F4: 85 C0              test        eax,eax
  00000000000000F6: 74 70              je          0000000000000168
  00000000000000F8: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000100: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gndec@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  0000000000000106: C7 44 24 58 FF FF  mov         dword ptr [rsp+58h],0FFFFFFFFh
                    FF FF
  000000000000010E: 8B 44 24 58        mov         eax,dword ptr [rsp+58h]
  0000000000000112: 39 84 24 A8 00 00  cmp         dword ptr [rsp+0A8h],eax
                    00
  0000000000000119: 74 0D              je          0000000000000128
  000000000000011B: 8B 84 24 A8 00 00  mov         eax,dword ptr [rsp+0A8h]
                    00
  0000000000000122: 89 44 24 44        mov         dword ptr [rsp+44h],eax
  0000000000000126: EB 2A              jmp         0000000000000152
  0000000000000128: C7 44 24 5C FF FF  mov         dword ptr [rsp+5Ch],0FFFFFFFFh
                    FF FF
  0000000000000130: 8B 44 24 5C        mov         eax,dword ptr [rsp+5Ch]
  0000000000000134: 85 C0              test        eax,eax
  0000000000000136: 75 0A              jne         0000000000000142
  0000000000000138: C7 44 24 40 01 00  mov         dword ptr [rsp+40h],1
                    00 00
  0000000000000140: EB 08              jmp         000000000000014A
  0000000000000142: C7 44 24 40 00 00  mov         dword ptr [rsp+40h],0
                    00 00
  000000000000014A: 8B 44 24 40        mov         eax,dword ptr [rsp+40h]
  000000000000014E: 89 44 24 44        mov         dword ptr [rsp+44h],eax
  0000000000000152: 8B 44 24 44        mov         eax,dword ptr [rsp+44h]
  0000000000000156: 89 44 24 60        mov         dword ptr [rsp+60h],eax
  000000000000015A: 8B 44 24 60        mov         eax,dword ptr [rsp+60h]
  000000000000015E: E9 4F 01 00 00     jmp         00000000000002B2
  0000000000000163: E9 4A 01 00 00     jmp         00000000000002B2
  0000000000000168: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000170: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000178: 74 3C              je          00000000000001B6
  000000000000017A: C7 44 24 64 FF FF  mov         dword ptr [rsp+64h],0FFFFFFFFh
                    FF FF
  0000000000000182: 8B 44 24 64        mov         eax,dword ptr [rsp+64h]
  0000000000000186: 3B 84 24 A8 00 00  cmp         eax,dword ptr [rsp+0A8h]
                    00
  000000000000018D: 75 0A              jne         0000000000000199
  000000000000018F: C7 44 24 48 01 00  mov         dword ptr [rsp+48h],1
                    00 00
  0000000000000197: EB 08              jmp         00000000000001A1
  0000000000000199: C7 44 24 48 00 00  mov         dword ptr [rsp+48h],0
                    00 00
  00000000000001A1: 0F B6 44 24 48     movzx       eax,byte ptr [rsp+48h]
  00000000000001A6: 88 44 24 31        mov         byte ptr [rsp+31h],al
  00000000000001AA: 0F B6 44 24 31     movzx       eax,byte ptr [rsp+31h]
  00000000000001AF: 0F B6 C0           movzx       eax,al
  00000000000001B2: 85 C0              test        eax,eax
  00000000000001B4: 74 16              je          00000000000001CC
  00000000000001B6: C7 44 24 68 FF FF  mov         dword ptr [rsp+68h],0FFFFFFFFh
                    FF FF
  00000000000001BE: 8B 44 24 68        mov         eax,dword ptr [rsp+68h]
  00000000000001C2: E9 EB 00 00 00     jmp         00000000000002B2
  00000000000001C7: E9 E6 00 00 00     jmp         00000000000002B2
  00000000000001CC: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000001D4: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  00000000000001D9: 75 78              jne         0000000000000253
  00000000000001DB: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000001E3: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  00000000000001EA: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  00000000000001F2: 0F B6 84 24 A8 00  movzx       eax,byte ptr [rsp+0A8h]
                    00 00
  00000000000001FA: 88 44 24 32        mov         byte ptr [rsp+32h],al
  00000000000001FE: 0F B6 44 24 32     movzx       eax,byte ptr [rsp+32h]
  0000000000000203: 88 44 24 33        mov         byte ptr [rsp+33h],al
  0000000000000207: 0F B6 44 24 33     movzx       eax,byte ptr [rsp+33h]
  000000000000020C: 48 8B 94 24 80 00  mov         rdx,qword ptr [rsp+80h]
                    00 00
  0000000000000214: 8B C8              mov         ecx,eax
  0000000000000216: FF 15 00 00 00 00  call        qword ptr [__imp_ungetc]
  000000000000021C: 83 F8 FF           cmp         eax,0FFFFFFFFh
  000000000000021F: 74 0A              je          000000000000022B
  0000000000000221: C7 44 24 4C 01 00  mov         dword ptr [rsp+4Ch],1
                    00 00
  0000000000000229: EB 08              jmp         0000000000000233
  000000000000022B: C7 44 24 4C 00 00  mov         dword ptr [rsp+4Ch],0
                    00 00
  0000000000000233: 0F B6 44 24 4C     movzx       eax,byte ptr [rsp+4Ch]
  0000000000000238: 88 44 24 34        mov         byte ptr [rsp+34h],al
  000000000000023C: 0F B6 44 24 34     movzx       eax,byte ptr [rsp+34h]
  0000000000000241: 0F B6 C0           movzx       eax,al
  0000000000000244: 85 C0              test        eax,eax
  0000000000000246: 74 0B              je          0000000000000253
  0000000000000248: 8B 84 24 A8 00 00  mov         eax,dword ptr [rsp+0A8h]
                    00
  000000000000024F: EB 61              jmp         00000000000002B2
  0000000000000251: EB 5F              jmp         00000000000002B2
  0000000000000253: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000025B: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000261: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000269: 48 83 C1 70        add         rcx,70h
  000000000000026D: 48 3B C1           cmp         rax,rcx
  0000000000000270: 74 34              je          00000000000002A6
  0000000000000272: 0F B6 84 24 A8 00  movzx       eax,byte ptr [rsp+0A8h]
                    00 00
  000000000000027A: 88 44 24 35        mov         byte ptr [rsp+35h],al
  000000000000027E: 0F B6 44 24 35     movzx       eax,byte ptr [rsp+35h]
  0000000000000283: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000028B: 88 41 70           mov         byte ptr [rcx+70h],al
  000000000000028E: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  0000000000000296: E8 00 00 00 00     call        ?_Set_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  000000000000029B: 8B 84 24 A8 00 00  mov         eax,dword ptr [rsp+0A8h]
                    00
  00000000000002A2: EB 0E              jmp         00000000000002B2
  00000000000002A4: EB 0C              jmp         00000000000002B2
  00000000000002A6: C7 44 24 6C FF FF  mov         dword ptr [rsp+6Ch],0FFFFFFFFh
                    FF FF
  00000000000002AE: 8B 44 24 6C        mov         eax,dword ptr [rsp+6Ch]
  00000000000002B2: 48 81 C4 98 00 00  add         rsp,98h
                    00
  00000000000002B9: C3                 ret

?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z (public: void __cdecl std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> >::push_back(char)):
  0000000000000000: 88 54 24 10        mov         byte ptr [rsp+10h],dl
  0000000000000004: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000009: 48 83 EC 58        sub         rsp,58h
  000000000000000D: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000012: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  0000000000000016: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000001B: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000020: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000024: 48 39 44 24 28     cmp         qword ptr [rsp+28h],rax
  0000000000000029: 0F 83 A9 00 00 00  jae         00000000000000D8
  000000000000002F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000034: 48 FF C0           inc         rax
  0000000000000037: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000003C: 48 89 41 10        mov         qword ptr [rcx+10h],rax
  0000000000000040: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000045: 48 8B C8           mov         rcx,rax
  0000000000000048: E8 00 00 00 00     call        ?_Myptr@?$_String_val@U?$_Simple_types@D@std@@@std@@QEAAPEADXZ
  000000000000004D: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000052: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000057: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  000000000000005C: 48 03 C8           add         rcx,rax
  000000000000005F: 48 8B C1           mov         rax,rcx
  0000000000000062: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000067: C6 44 24 21 00     mov         byte ptr [rsp+21h],0
  000000000000006C: 0F B6 44 24 21     movzx       eax,byte ptr [rsp+21h]
  0000000000000071: 0F B6 C0           movzx       eax,al
  0000000000000074: 85 C0              test        eax,eax
  0000000000000076: 74 0E              je          0000000000000086
  0000000000000078: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000007D: 0F B6 4C 24 68     movzx       ecx,byte ptr [rsp+68h]
  0000000000000082: 88 08              mov         byte ptr [rax],cl
  0000000000000084: EB 0C              jmp         0000000000000092
  0000000000000086: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000008B: 0F B6 4C 24 68     movzx       ecx,byte ptr [rsp+68h]
  0000000000000090: 88 08              mov         byte ptr [rax],cl
  0000000000000092: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000097: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  000000000000009C: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  00000000000000A1: 48 8D 44 08 01     lea         rax,[rax+rcx+1]
  00000000000000A6: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  00000000000000AB: C6 44 24 22 00     mov         byte ptr [rsp+22h],0
  00000000000000B0: 0F B6 44 24 22     movzx       eax,byte ptr [rsp+22h]
  00000000000000B5: 0F B6 C0           movzx       eax,al
  00000000000000B8: 85 C0              test        eax,eax
  00000000000000BA: 74 0E              je          00000000000000CA
  00000000000000BC: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000C1: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  00000000000000C6: 88 08              mov         byte ptr [rax],cl
  00000000000000C8: EB 0C              jmp         00000000000000D6
  00000000000000CA: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  00000000000000CF: 0F B6 4C 24 20     movzx       ecx,byte ptr [rsp+20h]
  00000000000000D4: 88 08              mov         byte ptr [rax],cl
  00000000000000D6: EB 1C              jmp         00000000000000F4
  00000000000000D8: 44 0F B6 4C 24 68  movzx       r9d,byte ptr [rsp+68h]
  00000000000000DE: 44 0F B6 44 24 23  movzx       r8d,byte ptr [rsp+23h]
  00000000000000E4: BA 01 00 00 00     mov         edx,1
  00000000000000E9: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000EE: E8 00 00 00 00     call        ??$_Reallocate_grow_by@V<lambda_1>@?1??push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z@D@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV01@_KV<lambda_1>@?1??push_back@01@QEAAXD@Z@D@Z
  00000000000000F3: 90                 nop
  00000000000000F4: 48 83 C4 58        add         rsp,58h
  00000000000000F8: C3                 ret

?seekoff@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@_JHH@Z (protected: virtual class std::fpos<struct _Mbstatet> __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::seekoff(__int64,int,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 40        sub         rsp,40h
  0000000000000019: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  000000000000001E: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000024: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000029: 48 83 C1 70        add         rcx,70h
  000000000000002D: 48 3B C1           cmp         rax,rcx
  0000000000000030: 75 20              jne         0000000000000052
  0000000000000032: 83 7C 24 68 01     cmp         dword ptr [rsp+68h],1
  0000000000000037: 75 19              jne         0000000000000052
  0000000000000039: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003E: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  0000000000000043: 75 0D              jne         0000000000000052
  0000000000000045: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000004A: 48 FF C8           dec         rax
  000000000000004D: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000052: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000057: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  000000000000005F: 74 5B              je          00000000000000BC
  0000000000000061: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  0000000000000066: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  000000000000006B: 0F B6 C0           movzx       eax,al
  000000000000006E: 85 C0              test        eax,eax
  0000000000000070: 74 4A              je          00000000000000BC
  0000000000000072: 48 83 7C 24 60 00  cmp         qword ptr [rsp+60h],0
  0000000000000078: 75 07              jne         0000000000000081
  000000000000007A: 83 7C 24 68 01     cmp         dword ptr [rsp+68h],1
  000000000000007F: 74 20              je          00000000000000A1
  0000000000000081: 44 8B 44 24 68     mov         r8d,dword ptr [rsp+68h]
  0000000000000086: 48 8B 54 24 60     mov         rdx,qword ptr [rsp+60h]
  000000000000008B: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  0000000000000090: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000097: FF 15 00 00 00 00  call        qword ptr [__imp__fseeki64]
  000000000000009D: 85 C0              test        eax,eax
  000000000000009F: 75 1B              jne         00000000000000BC
  00000000000000A1: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  00000000000000A6: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000AB: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  00000000000000B2: FF 15 00 00 00 00  call        qword ptr [__imp_fgetpos]
  00000000000000B8: 85 C0              test        eax,eax
  00000000000000BA: 74 35              je          00000000000000F1
  00000000000000BC: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000C1: 48 C7 00 FF FF FF  mov         qword ptr [rax],0FFFFFFFFFFFFFFFFh
                    FF
  00000000000000C8: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000CD: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  00000000000000D5: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000DA: 48 83 C0 10        add         rax,10h
  00000000000000DE: 48 8B F8           mov         rdi,rax
  00000000000000E1: 33 C0              xor         eax,eax
  00000000000000E3: B9 08 00 00 00     mov         ecx,8
  00000000000000E8: F3 AA              rep stos    byte ptr [rdi]
  00000000000000EA: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  00000000000000EF: EB 4F              jmp         0000000000000140
  00000000000000F1: 48 8B 4C 24 50     mov         rcx,qword ptr [rsp+50h]
  00000000000000F6: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000FB: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  0000000000000100: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000105: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000010A: 48 8B 40 74        mov         rax,qword ptr [rax+74h]
  000000000000010E: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000113: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000118: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  000000000000011D: 48 89 08           mov         qword ptr [rax],rcx
  0000000000000120: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000125: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  000000000000012D: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000132: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000137: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000013B: 48 8B 44 24 58     mov         rax,qword ptr [rsp+58h]
  0000000000000140: 48 83 C4 40        add         rsp,40h
  0000000000000144: 5F                 pop         rdi
  0000000000000145: C3                 ret

?seekpos@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA?AV?$fpos@U_Mbstatet@@@2@V32@H@Z (protected: virtual class std::fpos<struct _Mbstatet> __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::seekpos(class std::fpos<struct _Mbstatet>,int)):
  0000000000000000: 44 89 4C 24 20     mov         dword ptr [rsp+20h],r9d
  0000000000000005: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  000000000000000A: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000F: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000014: 57                 push        rdi
  0000000000000015: 48 83 EC 50        sub         rsp,50h
  0000000000000019: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000001E: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000021: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000026: 48 03 41 08        add         rax,qword ptr [rcx+8]
  000000000000002A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000002F: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000034: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000039: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000003E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000046: 74 2C              je          0000000000000074
  0000000000000048: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000004D: E8 00 00 00 00     call        ?_Endwrite@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAA_NXZ
  0000000000000052: 0F B6 C0           movzx       eax,al
  0000000000000055: 85 C0              test        eax,eax
  0000000000000057: 74 1B              je          0000000000000074
  0000000000000059: 48 8D 54 24 20     lea         rdx,[rsp+20h]
  000000000000005E: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000063: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  000000000000006A: FF 15 00 00 00 00  call        qword ptr [__imp_fsetpos]
  0000000000000070: 85 C0              test        eax,eax
  0000000000000072: 74 35              je          00000000000000A9
  0000000000000074: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000079: 48 C7 00 FF FF FF  mov         qword ptr [rax],0FFFFFFFFFFFFFFFFh
                    FF
  0000000000000080: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000085: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  000000000000008D: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000092: 48 83 C0 10        add         rax,10h
  0000000000000096: 48 8B F8           mov         rdi,rax
  0000000000000099: 33 C0              xor         eax,eax
  000000000000009B: B9 08 00 00 00     mov         ecx,8
  00000000000000A0: F3 AA              rep stos    byte ptr [rdi]
  00000000000000A2: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000A7: EB 6B              jmp         0000000000000114
  00000000000000A9: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000AE: 48 8B 40 10        mov         rax,qword ptr [rax+10h]
  00000000000000B2: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000B7: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000BC: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000C1: 48 89 41 74        mov         qword ptr [rcx+74h],rax
  00000000000000C5: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000000CA: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000CF: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  00000000000000D4: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000D9: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  00000000000000DE: 48 8B 40 74        mov         rax,qword ptr [rax+74h]
  00000000000000E2: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  00000000000000E7: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000EC: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000F1: 48 89 08           mov         qword ptr [rax],rcx
  00000000000000F4: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000F9: 48 C7 40 08 00 00  mov         qword ptr [rax+8],0
                    00 00
  0000000000000101: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000106: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000010B: 48 89 48 10        mov         qword ptr [rax+10h],rcx
  000000000000010F: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  0000000000000114: 48 83 C4 50        add         rsp,50h
  0000000000000118: 5F                 pop         rdi
  0000000000000119: C3                 ret

?setbuf@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAPEAV?$basic_streambuf@DU?$char_traits@D@std@@@2@PEAD_J@Z (protected: virtual class std::basic_streambuf<char,struct std::char_traits<char> > * __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::setbuf(char *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 38        sub         rsp,38h
  0000000000000013: 48 83 7C 24 48 00  cmp         qword ptr [rsp+48h],0
  0000000000000019: 75 12              jne         000000000000002D
  000000000000001B: 48 83 7C 24 50 00  cmp         qword ptr [rsp+50h],0
  0000000000000021: 75 0A              jne         000000000000002D
  0000000000000023: C7 44 24 20 04 00  mov         dword ptr [rsp+20h],4
                    00 00
  000000000000002B: EB 08              jmp         0000000000000035
  000000000000002D: C7 44 24 20 00 00  mov         dword ptr [rsp+20h],0
                    00 00
  0000000000000035: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  000000000000003A: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000003F: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000044: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  000000000000004C: 74 25              je          0000000000000073
  000000000000004E: 4C 8B 4C 24 28     mov         r9,qword ptr [rsp+28h]
  0000000000000053: 44 8B 44 24 20     mov         r8d,dword ptr [rsp+20h]
  0000000000000058: 48 8B 54 24 48     mov         rdx,qword ptr [rsp+48h]
  000000000000005D: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000062: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  0000000000000069: FF 15 00 00 00 00  call        qword ptr [__imp_setvbuf]
  000000000000006F: 85 C0              test        eax,eax
  0000000000000071: 74 04              je          0000000000000077
  0000000000000073: 33 C0              xor         eax,eax
  0000000000000075: EB 21              jmp         0000000000000098
  0000000000000077: 41 B8 01 00 00 00  mov         r8d,1
  000000000000007D: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000082: 48 8B 90 80 00 00  mov         rdx,qword ptr [rax+80h]
                    00
  0000000000000089: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  000000000000008E: E8 00 00 00 00     call        ?_Init@?$basic_filebuf@DU?$char_traits@D@std@@@std@@IEAAXPEAU_iobuf@@W4_Initfl@12@@Z
  0000000000000093: 48 8B 44 24 40     mov         rax,qword ptr [rsp+40h]
  0000000000000098: 48 83 C4 38        add         rsp,38h
  000000000000009C: C3                 ret

?sync@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::sync(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 58        sub         rsp,58h
  0000000000000009: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000000E: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000016: 0F 84 89 00 00 00  je          00000000000000A5
  000000000000001C: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000021: 48 8B 00           mov         rax,qword ptr [rax]
  0000000000000024: 48 8B 40 18        mov         rax,qword ptr [rax+18h]
  0000000000000028: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  000000000000002D: C7 44 24 28 FF FF  mov         dword ptr [rsp+28h],0FFFFFFFFh
                    FF FF
  0000000000000035: 8B 44 24 28        mov         eax,dword ptr [rsp+28h]
  0000000000000039: 89 44 24 2C        mov         dword ptr [rsp+2Ch],eax
  000000000000003D: 8B 54 24 2C        mov         edx,dword ptr [rsp+2Ch]
  0000000000000041: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000046: FF 54 24 40        call        qword ptr [rsp+40h]
  000000000000004A: 89 44 24 34        mov         dword ptr [rsp+34h],eax
  000000000000004E: C7 44 24 30 FF FF  mov         dword ptr [rsp+30h],0FFFFFFFFh
                    FF FF
  0000000000000056: 8B 44 24 30        mov         eax,dword ptr [rsp+30h]
  000000000000005A: 89 44 24 38        mov         dword ptr [rsp+38h],eax
  000000000000005E: 8B 44 24 34        mov         eax,dword ptr [rsp+34h]
  0000000000000062: 39 44 24 38        cmp         dword ptr [rsp+38h],eax
  0000000000000066: 75 0A              jne         0000000000000072
  0000000000000068: C7 44 24 24 01 00  mov         dword ptr [rsp+24h],1
                    00 00
  0000000000000070: EB 08              jmp         000000000000007A
  0000000000000072: C7 44 24 24 00 00  mov         dword ptr [rsp+24h],0
                    00 00
  000000000000007A: 0F B6 44 24 24     movzx       eax,byte ptr [rsp+24h]
  000000000000007F: 88 44 24 20        mov         byte ptr [rsp+20h],al
  0000000000000083: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000088: 0F B6 C0           movzx       eax,al
  000000000000008B: 85 C0              test        eax,eax
  000000000000008D: 75 16              jne         00000000000000A5
  000000000000008F: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000094: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  000000000000009B: FF 15 00 00 00 00  call        qword ptr [__imp_fflush]
  00000000000000A1: 85 C0              test        eax,eax
  00000000000000A3: 7C 04              jl          00000000000000A9
  00000000000000A5: 33 C0              xor         eax,eax
  00000000000000A7: EB 05              jmp         00000000000000AE
  00000000000000A9: B8 FF FF FF FF     mov         eax,0FFFFFFFFh
  00000000000000AE: 48 83 C4 58        add         rsp,58h
  00000000000000B2: C3                 ret

?uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::uflow(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 81 EC 48 01 00  sub         rsp,148h
                    00
  000000000000000C: 48 8B 05 00 00 00  mov         rax,qword ptr [__security_cookie]
                    00
  0000000000000013: 48 33 C4           xor         rax,rsp
  0000000000000016: 48 89 84 24 38 01  mov         qword ptr [rsp+138h],rax
                    00 00
  000000000000001E: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  0000000000000026: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000002C: 48 85 C0           test        rax,rax
  000000000000002F: 74 5E              je          000000000000008F
  0000000000000031: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  0000000000000039: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000003F: 48 89 84 24 C0 00  mov         qword ptr [rsp+0C0h],rax
                    00 00
  0000000000000047: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  000000000000004F: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000055: 48 8B 8C 24 C0 00  mov         rcx,qword ptr [rsp+0C0h]
                    00 00
  000000000000005D: 48 3B C8           cmp         rcx,rax
  0000000000000060: 73 2D              jae         000000000000008F
  0000000000000062: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  000000000000006A: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gninc@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAPEADXZ]
  0000000000000070: 0F B6 00           movzx       eax,byte ptr [rax]
  0000000000000073: 88 44 24 48        mov         byte ptr [rsp+48h],al
  0000000000000077: 0F B6 44 24 48     movzx       eax,byte ptr [rsp+48h]
  000000000000007C: 89 84 24 B0 00 00  mov         dword ptr [rsp+0B0h],eax
                    00
  0000000000000083: 8B 84 24 B0 00 00  mov         eax,dword ptr [rsp+0B0h]
                    00
  000000000000008A: E9 EF 03 00 00     jmp         000000000000047E
  000000000000008F: 48 8B 84 24 50 01  mov         rax,qword ptr [rsp+150h]
                    00 00
  0000000000000097: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  000000000000009F: 75 17              jne         00000000000000B8
  00000000000000A1: C7 84 24 88 00 00  mov         dword ptr [rsp+88h],0FFFFFFFFh
                    00 FF FF FF FF
  00000000000000AC: 8B 84 24 88 00 00  mov         eax,dword ptr [rsp+88h]
                    00
  00000000000000B3: E9 C6 03 00 00     jmp         000000000000047E
  00000000000000B8: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  00000000000000C0: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000000C5: 90                 nop
  00000000000000C6: 48 8B 84 24 50 01  mov         rax,qword ptr [rsp+150h]
                    00 00
  00000000000000CE: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  00000000000000D3: 0F 85 94 00 00 00  jne         000000000000016D
  00000000000000D9: 48 8B 84 24 50 01  mov         rax,qword ptr [rsp+150h]
                    00 00
  00000000000000E1: 48 8B 80 80 00 00  mov         rax,qword ptr [rax+80h]
                    00
  00000000000000E8: 48 89 84 24 C8 00  mov         qword ptr [rsp+0C8h],rax
                    00 00
  00000000000000F0: 48 8B 8C 24 C8 00  mov         rcx,qword ptr [rsp+0C8h]
                    00 00
  00000000000000F8: FF 15 00 00 00 00  call        qword ptr [__imp_fgetc]
  00000000000000FE: 89 44 24 70        mov         dword ptr [rsp+70h],eax
  0000000000000102: 83 7C 24 70 FF     cmp         dword ptr [rsp+70h],0FFFFFFFFh
  0000000000000107: 75 09              jne         0000000000000112
  0000000000000109: C6 44 24 40 00     mov         byte ptr [rsp+40h],0
  000000000000010E: EB 10              jmp         0000000000000120
  0000000000000110: EB 0E              jmp         0000000000000120
  0000000000000112: 0F B6 44 24 70     movzx       eax,byte ptr [rsp+70h]
  0000000000000117: 88 44 24 50        mov         byte ptr [rsp+50h],al
  000000000000011B: C6 44 24 40 01     mov         byte ptr [rsp+40h],1
  0000000000000120: 0F B6 44 24 40     movzx       eax,byte ptr [rsp+40h]
  0000000000000125: 0F B6 C0           movzx       eax,al
  0000000000000128: 85 C0              test        eax,eax
  000000000000012A: 74 22              je          000000000000014E
  000000000000012C: 0F B6 44 24 50     movzx       eax,byte ptr [rsp+50h]
  0000000000000131: 88 44 24 58        mov         byte ptr [rsp+58h],al
  0000000000000135: 0F B6 44 24 58     movzx       eax,byte ptr [rsp+58h]
  000000000000013A: 89 84 24 8C 00 00  mov         dword ptr [rsp+8Ch],eax
                    00
  0000000000000141: 8B 84 24 8C 00 00  mov         eax,dword ptr [rsp+8Ch]
                    00
  0000000000000148: 89 44 24 74        mov         dword ptr [rsp+74h],eax
  000000000000014C: EB 16              jmp         0000000000000164
  000000000000014E: C7 84 24 90 00 00  mov         dword ptr [rsp+90h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000159: 8B 84 24 90 00 00  mov         eax,dword ptr [rsp+90h]
                    00
  0000000000000160: 89 44 24 74        mov         dword ptr [rsp+74h],eax
  0000000000000164: 8B 44 24 74        mov         eax,dword ptr [rsp+74h]
  0000000000000168: E9 11 03 00 00     jmp         000000000000047E
  000000000000016D: 48 8D 84 24 18 01  lea         rax,[rsp+118h]
                    00 00
  0000000000000175: 48 89 84 24 D0 00  mov         qword ptr [rsp+0D0h],rax
                    00 00
  000000000000017D: 48 8B 84 24 D0 00  mov         rax,qword ptr [rsp+0D0h]
                    00 00
  0000000000000185: 48 8B C8           mov         rcx,rax
  0000000000000188: E8 00 00 00 00     call        ??0?$_String_val@U?$_Simple_types@D@std@@@std@@QEAA@XZ
  000000000000018D: 90                 nop
  000000000000018E: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000196: E8 00 00 00 00     call        ?_Construct_empty@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000019B: 90                 nop
  000000000000019C: 48 8B 84 24 50 01  mov         rax,qword ptr [rsp+150h]
                    00 00
  00000000000001A4: 48 8B 88 80 00 00  mov         rcx,qword ptr [rax+80h]
                    00
  00000000000001AB: FF 15 00 00 00 00  call        qword ptr [__imp_fgetc]
  00000000000001B1: 89 44 24 78        mov         dword ptr [rsp+78h],eax
  00000000000001B5: 83 7C 24 78 FF     cmp         dword ptr [rsp+78h],0FFFFFFFFh
  00000000000001BA: 75 33              jne         00000000000001EF
  00000000000001BC: C7 84 24 94 00 00  mov         dword ptr [rsp+94h],0FFFFFFFFh
                    00 FF FF FF FF
  00000000000001C7: 8B 84 24 94 00 00  mov         eax,dword ptr [rsp+94h]
                    00
  00000000000001CE: 89 84 24 98 00 00  mov         dword ptr [rsp+98h],eax
                    00
  00000000000001D5: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  00000000000001DD: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  00000000000001E2: 90                 nop
  00000000000001E3: 8B 84 24 98 00 00  mov         eax,dword ptr [rsp+98h]
                    00
  00000000000001EA: E9 8F 02 00 00     jmp         000000000000047E
  00000000000001EF: 0F B6 54 24 78     movzx       edx,byte ptr [rsp+78h]
  00000000000001F4: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  00000000000001FC: E8 00 00 00 00     call        ?push_back@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAXD@Z
  0000000000000201: 90                 nop
  0000000000000202: 48 8B 84 24 50 01  mov         rax,qword ptr [rsp+150h]
                    00 00
  000000000000020A: 48 8B 40 68        mov         rax,qword ptr [rax+68h]
  000000000000020E: 48 89 84 24 F0 00  mov         qword ptr [rsp+0F0h],rax
                    00 00
  0000000000000216: 48 8B 84 24 28 01  mov         rax,qword ptr [rsp+128h]
                    00 00
  000000000000021E: 48 89 84 24 D8 00  mov         qword ptr [rsp+0D8h],rax
                    00 00
  0000000000000226: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  000000000000022E: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  0000000000000233: 48 03 84 24 D8 00  add         rax,qword ptr [rsp+0D8h]
                    00 00
  000000000000023B: 48 89 84 24 E0 00  mov         qword ptr [rsp+0E0h],rax
                    00 00
  0000000000000243: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  000000000000024B: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  0000000000000250: 48 89 84 24 E8 00  mov         qword ptr [rsp+0E8h],rax
                    00 00
  0000000000000258: 48 8D 44 24 69     lea         rax,[rsp+69h]
  000000000000025D: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  0000000000000265: 48 83 C1 74        add         rcx,74h
  0000000000000269: 48 8D 94 24 F8 00  lea         rdx,[rsp+0F8h]
                    00 00
  0000000000000271: 48 89 54 24 38     mov         qword ptr [rsp+38h],rdx
  0000000000000276: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  000000000000027B: 48 8D 44 24 68     lea         rax,[rsp+68h]
  0000000000000280: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000285: 48 8D 84 24 B8 00  lea         rax,[rsp+0B8h]
                    00 00
  000000000000028D: 48 89 44 24 20     mov         qword ptr [rsp+20h],rax
  0000000000000292: 4C 8B 8C 24 E0 00  mov         r9,qword ptr [rsp+0E0h]
                    00 00
  000000000000029A: 4C 8B 84 24 E8 00  mov         r8,qword ptr [rsp+0E8h]
                    00 00
  00000000000002A2: 48 8B D1           mov         rdx,rcx
  00000000000002A5: 48 8B 8C 24 F0 00  mov         rcx,qword ptr [rsp+0F0h]
                    00 00
  00000000000002AD: FF 15 00 00 00 00  call        qword ptr [__imp_?in@?$codecvt@DDU_Mbstatet@@@std@@QEBAHAEAU_Mbstatet@@PEBD1AEAPEBDPEAD3AEAPEAD@Z]
  00000000000002B3: 89 44 24 6C        mov         dword ptr [rsp+6Ch],eax
  00000000000002B7: 83 7C 24 6C 00     cmp         dword ptr [rsp+6Ch],0
  00000000000002BC: 74 17              je          00000000000002D5
  00000000000002BE: 83 7C 24 6C 01     cmp         dword ptr [rsp+6Ch],1
  00000000000002C3: 74 10              je          00000000000002D5
  00000000000002C5: 83 7C 24 6C 03     cmp         dword ptr [rsp+6Ch],3
  00000000000002CA: 0F 84 3D 01 00 00  je          000000000000040D
  00000000000002D0: E9 66 01 00 00     jmp         000000000000043B
  00000000000002D5: 48 8D 44 24 68     lea         rax,[rsp+68h]
  00000000000002DA: 48 39 84 24 F8 00  cmp         qword ptr [rsp+0F8h],rax
                    00 00
  00000000000002E2: 0F 84 C3 00 00 00  je          00000000000003AB
  00000000000002E8: 48 8B 84 24 28 01  mov         rax,qword ptr [rsp+128h]
                    00 00
  00000000000002F0: 48 89 84 24 00 01  mov         qword ptr [rsp+100h],rax
                    00 00
  00000000000002F8: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000300: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  0000000000000305: 48 03 84 24 00 01  add         rax,qword ptr [rsp+100h]
                    00 00
  000000000000030D: 48 2B 84 24 B8 00  sub         rax,qword ptr [rsp+0B8h]
                    00 00
  0000000000000315: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000031D: 48 83 BC 24 80 00  cmp         qword ptr [rsp+80h],0
                    00 00 00
  0000000000000326: 7E 46              jle         000000000000036E
  0000000000000328: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000330: 48 FF C8           dec         rax
  0000000000000333: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000033B: 48 8B 84 24 80 00  mov         rax,qword ptr [rsp+80h]
                    00 00
  0000000000000343: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  000000000000034B: 48 03 C8           add         rcx,rax
  000000000000034E: 48 8B C1           mov         rax,rcx
  0000000000000351: 0F BE 00           movsx       eax,byte ptr [rax]
  0000000000000354: 48 8B 8C 24 50 01  mov         rcx,qword ptr [rsp+150h]
                    00 00
  000000000000035C: 48 8B 91 80 00 00  mov         rdx,qword ptr [rcx+80h]
                    00
  0000000000000363: 8B C8              mov         ecx,eax
  0000000000000365: FF 15 00 00 00 00  call        qword ptr [__imp_ungetc]
  000000000000036B: 90                 nop
  000000000000036C: EB AF              jmp         000000000000031D
  000000000000036E: 0F B6 44 24 68     movzx       eax,byte ptr [rsp+68h]
  0000000000000373: 88 44 24 60        mov         byte ptr [rsp+60h],al
  0000000000000377: 0F B6 44 24 60     movzx       eax,byte ptr [rsp+60h]
  000000000000037C: 89 84 24 9C 00 00  mov         dword ptr [rsp+9Ch],eax
                    00
  0000000000000383: 8B 84 24 9C 00 00  mov         eax,dword ptr [rsp+9Ch]
                    00
  000000000000038A: 89 84 24 A0 00 00  mov         dword ptr [rsp+0A0h],eax
                    00
  0000000000000391: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000399: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000039E: 90                 nop
  000000000000039F: 8B 84 24 A0 00 00  mov         eax,dword ptr [rsp+0A0h]
                    00
  00000000000003A6: E9 D3 00 00 00     jmp         000000000000047E
  00000000000003AB: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  00000000000003B3: E8 00 00 00 00     call        ?data@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAPEADXZ
  00000000000003B8: 48 8B 8C 24 B8 00  mov         rcx,qword ptr [rsp+0B8h]
                    00 00
  00000000000003C0: 48 2B C8           sub         rcx,rax
  00000000000003C3: 48 8B C1           mov         rax,rcx
  00000000000003C6: 48 89 84 24 10 01  mov         qword ptr [rsp+110h],rax
                    00 00
  00000000000003CE: 48 8D 84 24 18 01  lea         rax,[rsp+118h]
                    00 00
  00000000000003D6: 48 89 84 24 08 01  mov         qword ptr [rsp+108h],rax
                    00 00
  00000000000003DE: 48 8B 84 24 08 01  mov         rax,qword ptr [rsp+108h]
                    00 00
  00000000000003E6: 48 83 78 10 00     cmp         qword ptr [rax+10h],0
  00000000000003EB: 73 06              jae         00000000000003F3
  00000000000003ED: E8 00 00 00 00     call        ?_Xran@?$_String_val@U?$_Simple_types@D@std@@@std@@SAXXZ
  00000000000003F2: 90                 nop
  00000000000003F3: 4C 8B 84 24 10 01  mov         r8,qword ptr [rsp+110h]
                    00 00
  00000000000003FB: 33 D2              xor         edx,edx
  00000000000003FD: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000405: E8 00 00 00 00     call        ?_Erase_noexcept@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAAEAV12@_K_K@Z
  000000000000040A: 90                 nop
  000000000000040B: EB 5E              jmp         000000000000046B
  000000000000040D: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000415: E8 00 00 00 00     call        ?front@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAAAEADXZ
  000000000000041A: 0F BE 00           movsx       eax,byte ptr [rax]
  000000000000041D: 89 84 24 A4 00 00  mov         dword ptr [rsp+0A4h],eax
                    00
  0000000000000424: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  000000000000042C: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000431: 90                 nop
  0000000000000432: 8B 84 24 A4 00 00  mov         eax,dword ptr [rsp+0A4h]
                    00
  0000000000000439: EB 43              jmp         000000000000047E
  000000000000043B: C7 84 24 A8 00 00  mov         dword ptr [rsp+0A8h],0FFFFFFFFh
                    00 FF FF FF FF
  0000000000000446: 8B 84 24 A8 00 00  mov         eax,dword ptr [rsp+0A8h]
                    00
  000000000000044D: 89 84 24 AC 00 00  mov         dword ptr [rsp+0ACh],eax
                    00
  0000000000000454: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  000000000000045C: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  0000000000000461: 90                 nop
  0000000000000462: 8B 84 24 AC 00 00  mov         eax,dword ptr [rsp+0ACh]
                    00
  0000000000000469: EB 13              jmp         000000000000047E
  000000000000046B: E9 2C FD FF FF     jmp         000000000000019C
  0000000000000470: 48 8D 8C 24 18 01  lea         rcx,[rsp+118h]
                    00 00
  0000000000000478: E8 00 00 00 00     call        ?_Tidy_deallocate@?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@AEAAXXZ
  000000000000047D: 90                 nop
  000000000000047E: 48 8B 8C 24 38 01  mov         rcx,qword ptr [rsp+138h]
                    00 00
  0000000000000486: 48 33 CC           xor         rcx,rsp
  0000000000000489: E8 00 00 00 00     call        __security_check_cookie
  000000000000048E: 48 81 C4 48 01 00  add         rsp,148h
                    00
  0000000000000495: C3                 ret

?dtor$0@?0??uflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ@4HA (int `protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::uflow(void)'::`1'::dtor$0):
  0000000000000000: 40 55              push        rbp
  0000000000000002: 48 83 EC 20        sub         rsp,20h
  0000000000000006: 48 8B EA           mov         rbp,rdx
  0000000000000009: 48 8D 8D 18 01 00  lea         rcx,[rbp+118h]
                    00
  0000000000000010: E8 00 00 00 00     call        ??1?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@QEAA@XZ
  0000000000000015: 48 83 C4 20        add         rsp,20h
  0000000000000019: 5D                 pop         rbp
  000000000000001A: C3                 ret

?underflow@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAAHXZ (protected: virtual int __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::underflow(void)):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 68        sub         rsp,68h
  0000000000000009: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000000E: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000014: 48 85 C0           test        rax,rax
  0000000000000017: 74 4E              je          0000000000000067
  0000000000000019: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000001E: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000024: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  0000000000000029: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000002E: FF 15 00 00 00 00  call        qword ptr [__imp_?egptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000034: 48 8B 4C 24 48     mov         rcx,qword ptr [rsp+48h]
  0000000000000039: 48 3B C8           cmp         rcx,rax
  000000000000003C: 73 29              jae         0000000000000067
  000000000000003E: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000043: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  0000000000000049: 0F B6 00           movzx       eax,byte ptr [rax]
  000000000000004C: 88 44 24 20        mov         byte ptr [rsp+20h],al
  0000000000000050: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  0000000000000055: 89 44 24 34        mov         dword ptr [rsp+34h],eax
  0000000000000059: 8B 44 24 34        mov         eax,dword ptr [rsp+34h]
  000000000000005D: E9 8C 00 00 00     jmp         00000000000000EE
  0000000000000062: E9 87 00 00 00     jmp         00000000000000EE
  0000000000000067: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000006C: 48 8B 00           mov         rax,qword ptr [rax]
  000000000000006F: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000074: FF 50 38           call        qword ptr [rax+38h]
  0000000000000077: 89 44 24 2C        mov         dword ptr [rsp+2Ch],eax
  000000000000007B: 8B 44 24 2C        mov         eax,dword ptr [rsp+2Ch]
  000000000000007F: 89 44 24 3C        mov         dword ptr [rsp+3Ch],eax
  0000000000000083: C7 44 24 38 FF FF  mov         dword ptr [rsp+38h],0FFFFFFFFh
                    FF FF
  000000000000008B: 8B 44 24 38        mov         eax,dword ptr [rsp+38h]
  000000000000008F: 89 44 24 40        mov         dword ptr [rsp+40h],eax
  0000000000000093: 8B 44 24 3C        mov         eax,dword ptr [rsp+3Ch]
  0000000000000097: 39 44 24 40        cmp         dword ptr [rsp+40h],eax
  000000000000009B: 75 0A              jne         00000000000000A7
  000000000000009D: C7 44 24 30 01 00  mov         dword ptr [rsp+30h],1
                    00 00
  00000000000000A5: EB 08              jmp         00000000000000AF
  00000000000000A7: C7 44 24 30 00 00  mov         dword ptr [rsp+30h],0
                    00 00
  00000000000000AF: 0F B6 44 24 30     movzx       eax,byte ptr [rsp+30h]
  00000000000000B4: 88 44 24 28        mov         byte ptr [rsp+28h],al
  00000000000000B8: 0F B6 44 24 28     movzx       eax,byte ptr [rsp+28h]
  00000000000000BD: 0F B6 C0           movzx       eax,al
  00000000000000C0: 85 C0              test        eax,eax
  00000000000000C2: 74 08              je          00000000000000CC
  00000000000000C4: 8B 44 24 2C        mov         eax,dword ptr [rsp+2Ch]
  00000000000000C8: EB 24              jmp         00000000000000EE
  00000000000000CA: EB 22              jmp         00000000000000EE
  00000000000000CC: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000D1: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000D4: 48 8B 40 20        mov         rax,qword ptr [rax+20h]
  00000000000000D8: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000DD: 8B 54 24 2C        mov         edx,dword ptr [rsp+2Ch]
  00000000000000E1: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  00000000000000E6: FF 54 24 50        call        qword ptr [rsp+50h]
  00000000000000EA: 8B 44 24 2C        mov         eax,dword ptr [rsp+2Ch]
  00000000000000EE: 48 83 C4 68        add         rsp,68h
  00000000000000F2: C3                 ret

?what@exception@std@@UEBAPEBDXZ (public: virtual char const * __cdecl std::exception::what(void)const ):
  0000000000000000: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  0000000000000005: 48 83 EC 18        sub         rsp,18h
  0000000000000009: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000000E: 48 83 78 08 00     cmp         qword ptr [rax+8],0
  0000000000000013: 74 0F              je          0000000000000024
  0000000000000015: 48 8B 44 24 20     mov         rax,qword ptr [rsp+20h]
  000000000000001A: 48 8B 40 08        mov         rax,qword ptr [rax+8]
  000000000000001E: 48 89 04 24        mov         qword ptr [rsp],rax
  0000000000000022: EB 0B              jmp         000000000000002F
  0000000000000024: 48 8D 05 00 00 00  lea         rax,[??_C@_0BC@EOODALEL@Unknown?5exception@]
                    00
  000000000000002B: 48 89 04 24        mov         qword ptr [rsp],rax
  000000000000002F: 48 8B 04 24        mov         rax,qword ptr [rsp]
  0000000000000033: 48 83 C4 18        add         rsp,18h
  0000000000000037: C3                 ret

?xsgetn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z (protected: virtual __int64 __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::xsgetn(char *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 81 EC 98 00 00  sub         rsp,98h
                    00
  0000000000000016: 48 83 BC 24 B0 00  cmp         qword ptr [rsp+0B0h],0
                    00 00 00
  000000000000001F: 7F 07              jg          0000000000000028
  0000000000000021: 33 C0              xor         eax,eax
  0000000000000023: E9 9F 02 00 00     jmp         00000000000002C7
  0000000000000028: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  0000000000000030: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  0000000000000035: 74 23              je          000000000000005A
  0000000000000037: 4C 8B 84 24 B0 00  mov         r8,qword ptr [rsp+0B0h]
                    00 00
  000000000000003F: 48 8B 94 24 A8 00  mov         rdx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000047: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000004F: FF 15 00 00 00 00  call        qword ptr [__imp_?xsgetn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEAD_J@Z]
  0000000000000055: E9 6D 02 00 00     jmp         00000000000002C7
  000000000000005A: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  0000000000000062: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000067: 48 8B 84 24 B0 00  mov         rax,qword ptr [rsp+0B0h]
                    00 00
  000000000000006F: 48 89 44 24 60     mov         qword ptr [rsp+60h],rax
  0000000000000074: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000007C: FF 15 00 00 00 00  call        qword ptr [__imp_?_Gnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ]
  0000000000000082: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000087: 48 83 7C 24 40 00  cmp         qword ptr [rsp+40h],0
  000000000000008D: 0F 86 12 01 00 00  jbe         00000000000001A5
  0000000000000093: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000098: 48 39 44 24 40     cmp         qword ptr [rsp+40h],rax
  000000000000009D: 73 0C              jae         00000000000000AB
  000000000000009F: 48 8D 44 24 40     lea         rax,[rsp+40h]
  00000000000000A4: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000A9: EB 0A              jmp         00000000000000B5
  00000000000000AB: 48 8D 44 24 28     lea         rax,[rsp+28h]
  00000000000000B0: 48 89 44 24 50     mov         qword ptr [rsp+50h],rax
  00000000000000B5: 48 8B 44 24 50     mov         rax,qword ptr [rsp+50h]
  00000000000000BA: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  00000000000000BF: 48 8B 44 24 68     mov         rax,qword ptr [rsp+68h]
  00000000000000C4: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  00000000000000C9: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  00000000000000CE: 48 8B 00           mov         rax,qword ptr [rax]
  00000000000000D1: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  00000000000000D6: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  00000000000000DE: FF 15 00 00 00 00  call        qword ptr [__imp_?gptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  00000000000000E4: 48 89 44 24 58     mov         qword ptr [rsp+58h],rax
  00000000000000E9: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  00000000000000EE: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  00000000000000F3: 0F B6 C0           movzx       eax,al
  00000000000000F6: 85 C0              test        eax,eax
  00000000000000F8: 74 50              je          000000000000014A
  00000000000000FA: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  0000000000000103: EB 0D              jmp         0000000000000112
  0000000000000105: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  000000000000010A: 48 FF C0           inc         rax
  000000000000010D: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  0000000000000112: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000117: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  000000000000011C: 74 2A              je          0000000000000148
  000000000000011E: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  0000000000000123: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  000000000000012B: 48 03 C8           add         rcx,rax
  000000000000012E: 48 8B C1           mov         rax,rcx
  0000000000000131: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  0000000000000136: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  000000000000013B: 48 03 D1           add         rdx,rcx
  000000000000013E: 48 8B CA           mov         rcx,rdx
  0000000000000141: 0F B6 09           movzx       ecx,byte ptr [rcx]
  0000000000000144: 88 08              mov         byte ptr [rax],cl
  0000000000000146: EB BD              jmp         0000000000000105
  0000000000000148: EB 18              jmp         0000000000000162
  000000000000014A: 4C 8B 44 24 38     mov         r8,qword ptr [rsp+38h]
  000000000000014F: 48 8B 54 24 58     mov         rdx,qword ptr [rsp+58h]
  0000000000000154: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  000000000000015C: E8 00 00 00 00     call        memcpy
  0000000000000161: 90                 nop
  0000000000000162: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000167: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  000000000000016F: 48 03 C8           add         rcx,rax
  0000000000000172: 48 8B C1           mov         rax,rcx
  0000000000000175: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  000000000000017D: 48 8B 44 24 38     mov         rax,qword ptr [rsp+38h]
  0000000000000182: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000187: 48 2B C8           sub         rcx,rax
  000000000000018A: 48 8B C1           mov         rax,rcx
  000000000000018D: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000192: 8B 54 24 38        mov         edx,dword ptr [rsp+38h]
  0000000000000196: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  000000000000019E: FF 15 00 00 00 00  call        qword ptr [__imp_?gbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z]
  00000000000001A4: 90                 nop
  00000000000001A5: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000001AD: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  00000000000001B5: 0F 84 FC 00 00 00  je          00000000000002B7
  00000000000001BB: 48 8B 8C 24 A0 00  mov         rcx,qword ptr [rsp+0A0h]
                    00 00
  00000000000001C3: E8 00 00 00 00     call        ?_Reset_back@?$basic_filebuf@DU?$char_traits@D@std@@@std@@AEAAXXZ
  00000000000001C8: 48 C7 84 24 88 00  mov         qword ptr [rsp+88h],0FFFh
                    00 00 FF 0F 00 00
  00000000000001D4: 48 81 7C 24 28 FF  cmp         qword ptr [rsp+28h],0FFFh
                    0F 00 00
  00000000000001DD: 76 7F              jbe         000000000000025E
  00000000000001DF: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  00000000000001E7: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  00000000000001EE: 41 B8 FF 0F 00 00  mov         r8d,0FFFh
  00000000000001F4: BA 01 00 00 00     mov         edx,1
  00000000000001F9: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000201: FF 15 00 00 00 00  call        qword ptr [__imp_fread]
  0000000000000207: 48 89 44 24 48     mov         qword ptr [rsp+48h],rax
  000000000000020C: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  0000000000000211: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000219: 48 03 C8           add         rcx,rax
  000000000000021C: 48 8B C1           mov         rax,rcx
  000000000000021F: 48 89 84 24 A8 00  mov         qword ptr [rsp+0A8h],rax
                    00 00
  0000000000000227: 48 8B 44 24 48     mov         rax,qword ptr [rsp+48h]
  000000000000022C: 48 8B 4C 24 28     mov         rcx,qword ptr [rsp+28h]
  0000000000000231: 48 2B C8           sub         rcx,rax
  0000000000000234: 48 8B C1           mov         rax,rcx
  0000000000000237: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  000000000000023C: 48 81 7C 24 48 FF  cmp         qword ptr [rsp+48h],0FFFh
                    0F 00 00
  0000000000000245: 74 12              je          0000000000000259
  0000000000000247: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000024C: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000251: 48 2B C8           sub         rcx,rax
  0000000000000254: 48 8B C1           mov         rax,rcx
  0000000000000257: EB 6E              jmp         00000000000002C7
  0000000000000259: E9 76 FF FF FF     jmp         00000000000001D4
  000000000000025E: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000264: 76 51              jbe         00000000000002B7
  0000000000000266: 48 8B 84 24 A0 00  mov         rax,qword ptr [rsp+0A0h]
                    00 00
  000000000000026E: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  0000000000000275: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  000000000000027A: BA 01 00 00 00     mov         edx,1
  000000000000027F: 48 8B 8C 24 A8 00  mov         rcx,qword ptr [rsp+0A8h]
                    00 00
  0000000000000287: FF 15 00 00 00 00  call        qword ptr [__imp_fread]
  000000000000028D: 48 89 44 24 78     mov         qword ptr [rsp+78h],rax
  0000000000000292: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000297: 48 89 84 24 80 00  mov         qword ptr [rsp+80h],rax
                    00 00
  000000000000029F: 48 8B 44 24 78     mov         rax,qword ptr [rsp+78h]
  00000000000002A4: 48 8B 8C 24 80 00  mov         rcx,qword ptr [rsp+80h]
                    00 00
  00000000000002AC: 48 2B C8           sub         rcx,rax
  00000000000002AF: 48 8B C1           mov         rax,rcx
  00000000000002B2: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  00000000000002B7: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000002BC: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  00000000000002C1: 48 2B C8           sub         rcx,rax
  00000000000002C4: 48 8B C1           mov         rax,rcx
  00000000000002C7: 48 81 C4 98 00 00  add         rsp,98h
                    00
  00000000000002CE: C3                 ret

?xsputn@?$basic_filebuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z (protected: virtual __int64 __cdecl std::basic_filebuf<char,struct std::char_traits<char> >::xsputn(char const *,__int64)):
  0000000000000000: 4C 89 44 24 18     mov         qword ptr [rsp+18h],r8
  0000000000000005: 48 89 54 24 10     mov         qword ptr [rsp+10h],rdx
  000000000000000A: 48 89 4C 24 08     mov         qword ptr [rsp+8],rcx
  000000000000000F: 48 83 EC 58        sub         rsp,58h
  0000000000000013: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  0000000000000018: 48 83 78 68 00     cmp         qword ptr [rax+68h],0
  000000000000001D: 74 1A              je          0000000000000039
  000000000000001F: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000024: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  0000000000000029: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  000000000000002E: FF 15 00 00 00 00  call        qword ptr [__imp_?xsputn@?$basic_streambuf@DU?$char_traits@D@std@@@std@@MEAA_JPEBD_J@Z]
  0000000000000034: E9 5D 01 00 00     jmp         0000000000000196
  0000000000000039: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000003E: 48 89 44 24 40     mov         qword ptr [rsp+40h],rax
  0000000000000043: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000048: FF 15 00 00 00 00  call        qword ptr [__imp_?_Pnavail@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBA_JXZ]
  000000000000004E: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000053: 48 83 7C 24 70 00  cmp         qword ptr [rsp+70h],0
  0000000000000059: 0F 8E DF 00 00 00  jle         000000000000013E
  000000000000005F: 48 83 7C 24 28 00  cmp         qword ptr [rsp+28h],0
  0000000000000065: 0F 8E D3 00 00 00  jle         000000000000013E
  000000000000006B: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000070: 48 39 44 24 70     cmp         qword ptr [rsp+70h],rax
  0000000000000075: 7D 0A              jge         0000000000000081
  0000000000000077: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000007C: 48 89 44 24 28     mov         qword ptr [rsp+28h],rax
  0000000000000081: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000086: FF 15 00 00 00 00  call        qword ptr [__imp_?pptr@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEBAPEADXZ]
  000000000000008C: 48 89 44 24 38     mov         qword ptr [rsp+38h],rax
  0000000000000091: C6 44 24 20 00     mov         byte ptr [rsp+20h],0
  0000000000000096: 0F B6 44 24 20     movzx       eax,byte ptr [rsp+20h]
  000000000000009B: 0F B6 C0           movzx       eax,al
  000000000000009E: 85 C0              test        eax,eax
  00000000000000A0: 74 4D              je          00000000000000EF
  00000000000000A2: 48 C7 44 24 30 00  mov         qword ptr [rsp+30h],0
                    00 00 00
  00000000000000AB: EB 0D              jmp         00000000000000BA
  00000000000000AD: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000B2: 48 FF C0           inc         rax
  00000000000000B5: 48 89 44 24 30     mov         qword ptr [rsp+30h],rax
  00000000000000BA: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  00000000000000BF: 48 39 44 24 30     cmp         qword ptr [rsp+30h],rax
  00000000000000C4: 74 27              je          00000000000000ED
  00000000000000C6: 48 8B 44 24 30     mov         rax,qword ptr [rsp+30h]
  00000000000000CB: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000D0: 48 03 C8           add         rcx,rax
  00000000000000D3: 48 8B C1           mov         rax,rcx
  00000000000000D6: 48 8B 4C 24 30     mov         rcx,qword ptr [rsp+30h]
  00000000000000DB: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  00000000000000E0: 48 03 D1           add         rdx,rcx
  00000000000000E3: 48 8B CA           mov         rcx,rdx
  00000000000000E6: 0F B6 09           movzx       ecx,byte ptr [rcx]
  00000000000000E9: 88 08              mov         byte ptr [rax],cl
  00000000000000EB: EB C0              jmp         00000000000000AD
  00000000000000ED: EB 15              jmp         0000000000000104
  00000000000000EF: 4C 8B 44 24 28     mov         r8,qword ptr [rsp+28h]
  00000000000000F4: 48 8B 54 24 68     mov         rdx,qword ptr [rsp+68h]
  00000000000000F9: 48 8B 4C 24 38     mov         rcx,qword ptr [rsp+38h]
  00000000000000FE: E8 00 00 00 00     call        memcpy
  0000000000000103: 90                 nop
  0000000000000104: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  0000000000000109: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  000000000000010E: 48 03 C8           add         rcx,rax
  0000000000000111: 48 8B C1           mov         rax,rcx
  0000000000000114: 48 89 44 24 68     mov         qword ptr [rsp+68h],rax
  0000000000000119: 48 8B 44 24 28     mov         rax,qword ptr [rsp+28h]
  000000000000011E: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  0000000000000123: 48 2B C8           sub         rcx,rax
  0000000000000126: 48 8B C1           mov         rax,rcx
  0000000000000129: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  000000000000012E: 8B 54 24 28        mov         edx,dword ptr [rsp+28h]
  0000000000000132: 48 8B 4C 24 60     mov         rcx,qword ptr [rsp+60h]
  0000000000000137: FF 15 00 00 00 00  call        qword ptr [__imp_?pbump@?$basic_streambuf@DU?$char_traits@D@std@@@std@@IEAAXH@Z]
  000000000000013D: 90                 nop
  000000000000013E: 48 83 7C 24 70 00  cmp         qword ptr [rsp+70h],0
  0000000000000144: 7E 40              jle         0000000000000186
  0000000000000146: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000014B: 48 83 B8 80 00 00  cmp         qword ptr [rax+80h],0
                    00 00
  0000000000000153: 74 31              je          0000000000000186
  0000000000000155: 48 8B 44 24 60     mov         rax,qword ptr [rsp+60h]
  000000000000015A: 4C 8B 88 80 00 00  mov         r9,qword ptr [rax+80h]
                    00
  0000000000000161: 4C 8B 44 24 70     mov         r8,qword ptr [rsp+70h]
  0000000000000166: BA 01 00 00 00     mov         edx,1
  000000000000016B: 48 8B 4C 24 68     mov         rcx,qword ptr [rsp+68h]
  0000000000000170: FF 15 00 00 00 00  call        qword ptr [__imp_fwrite]
  0000000000000176: 48 8B 4C 24 70     mov         rcx,qword ptr [rsp+70h]
  000000000000017B: 48 2B C8           sub         rcx,rax
  000000000000017E: 48 8B C1           mov         rax,rcx
  0000000000000181: 48 89 44 24 70     mov         qword ptr [rsp+70h],rax
  0000000000000186: 48 8B 44 24 70     mov         rax,qword ptr [rsp+70h]
  000000000000018B: 48 8B 4C 24 40     mov         rcx,qword ptr [rsp+40h]
  0000000000000190: 48 2B C8           sub         rcx,rax
  0000000000000193: 48 8B C1           mov         rax,rcx
  0000000000000196: 48 83 C4 58        add         rsp,58h
  000000000000019A: C3                 ret

  Summary

          10 .bss
        1060 .chks64
          28 .data
          9A .data$r
         190 .data$rs
          A0 .debug$S
         13D .drectve
         648 .pdata
         49C .rdata
         4CC .rdata$r
        654C .text$mn
         314 .text$x
          23 .voltbl
         6CA .xdata
          F8 .xdata$x
