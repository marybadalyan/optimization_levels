# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
  
    - name: Debug - List ALL Files in Workspace
      # This runs even if the build step failed, so you can see the state of the file system
      if: always()
      shell: bash
      run: |
        echo "--- Listing ALL files in the entire workspace (${{ github.workspace }}) ---"
        ls -R "${{ github.workspace }}"
        echo "--------------------------------------------------------------------"


    - name: Run Executables
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      shell: bash
      run: |
        # Define parallel arrays for executables and their analysis files
        executables=("OP_level_1" "OP_level_2")
        paths=("analysis/assembly_O0.txt" "analysis/assembly_O2.txt") # Base paths

        # Loop using the array indices (0, 1, 2...)
        for i in "${!executables[@]}"; do
        
          # --- Step 1: Get the current items from the arrays using the index ---
          exe="${executables[$i]}"
          ANALYSIS_PATH="${paths[$i]}"

          # --- Step 2: Set the platform-specific executable name ---
          if [ "$RUNNER_OS" == "Windows" ]; then
            executable_name="${{ matrix.build_type }}/${exe}.exe"
            # On Windows, our CMake script names the unoptimized file "assembly_Od.txt"
            # So we need to correct the path for that specific case.
            if [ "$exe" == "OP_level_1" ]; then
              ANALYSIS_PATH="analysis/assembly_Od.txt"
            fi
          else
            executable_name="${exe}"
          fi

          echo "---------------------------------"
          echo "Executable: ${executable_name}"
          echo "Analysis Path: ${ANALYSIS_PATH}"

          # --- Step 3: Check for and run the executable ---
          if [ -f "${executable_name}" ]; then
            echo "Running..."
            "./${executable_name}" "${ANALYSIS_PATH}"
          else
            echo "Error: Executable not found in working directory: $(pwd)/${executable_name}"
            exit 1
          fi
        done